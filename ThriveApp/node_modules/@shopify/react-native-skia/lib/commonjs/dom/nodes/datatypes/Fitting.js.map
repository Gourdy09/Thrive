{"version":3,"names":["_typeddash","require","size","width","height","exports","rect2rect","src","dst","scaleX","scaleY","translateX","x","translateY","y","fitRects","fit","rect","sizes","applyBoxFit","inscribe","halfWidthDelta","halfHeightDelta","input","output","Math","min","aspectRatio","exhaustiveCheck"],"sources":["Fitting.ts"],"sourcesContent":["import { exhaustiveCheck } from \"../../../renderer/typeddash\";\nimport type { SkRect } from \"../../../skia/types\";\nimport type { Fit } from \"../../types\";\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport const size = (width = 0, height = 0) => ({ width, height });\n\nexport const rect2rect = (\n  src: SkRect,\n  dst: SkRect\n): [\n  { translateX: number },\n  { translateY: number },\n  { scaleX: number },\n  { scaleY: number }\n] => {\n  const scaleX = dst.width / src.width;\n  const scaleY = dst.height / src.height;\n  const translateX = dst.x - src.x * scaleX;\n  const translateY = dst.y - src.y * scaleY;\n  return [{ translateX }, { translateY }, { scaleX }, { scaleY }];\n};\n\nexport const fitRects = (\n  fit: Fit,\n  rect: SkRect,\n  { x, y, width, height }: SkRect\n) => {\n  const sizes = applyBoxFit(\n    fit,\n    { width: rect.width, height: rect.height },\n    { width, height }\n  );\n  const src = inscribe(sizes.src, rect);\n  const dst = inscribe(sizes.dst, {\n    x,\n    y,\n    width,\n    height,\n  });\n  return { src, dst };\n};\n\nconst inscribe = (\n  { width, height }: Size,\n  rect: { x: number; y: number; width: number; height: number }\n) => {\n  const halfWidthDelta = (rect.width - width) / 2.0;\n  const halfHeightDelta = (rect.height - height) / 2.0;\n  return {\n    x: rect.x + halfWidthDelta,\n    y: rect.y + halfHeightDelta,\n    width,\n    height,\n  };\n};\n\nconst applyBoxFit = (fit: Fit, input: Size, output: Size) => {\n  let src = size(),\n    dst = size();\n  if (\n    input.height <= 0.0 ||\n    input.width <= 0.0 ||\n    output.height <= 0.0 ||\n    output.width <= 0.0\n  ) {\n    return { src, dst };\n  }\n  switch (fit) {\n    case \"fill\":\n      src = input;\n      dst = output;\n      break;\n    case \"contain\":\n      src = input;\n      if (output.width / output.height > src.width / src.height) {\n        dst = size((src.width * output.height) / src.height, output.height);\n      } else {\n        dst = size(output.width, (src.height * output.width) / src.width);\n      }\n      break;\n    case \"cover\":\n      if (output.width / output.height > input.width / input.height) {\n        src = size(input.width, (input.width * output.height) / output.width);\n      } else {\n        src = size((input.height * output.width) / output.height, input.height);\n      }\n      dst = output;\n      break;\n    case \"fitWidth\":\n      src = size(input.width, (input.width * output.height) / output.width);\n      dst = size(output.width, (src.height * output.width) / src.width);\n      break;\n    case \"fitHeight\":\n      src = size((input.height * output.width) / output.height, input.height);\n      dst = size((src.width * output.height) / src.height, output.height);\n      break;\n    case \"none\":\n      src = size(\n        Math.min(input.width, output.width),\n        Math.min(input.height, output.height)\n      );\n      dst = src;\n      break;\n    case \"scaleDown\":\n      src = input;\n      dst = input;\n      const aspectRatio = input.width / input.height;\n      if (dst.height > output.height) {\n        dst = size(output.height * aspectRatio, output.height);\n      }\n      if (dst.width > output.width) {\n        dst = size(output.width, output.width / aspectRatio);\n      }\n      break;\n    default:\n      exhaustiveCheck(fit);\n  }\n  return { src, dst };\n};\n"],"mappings":"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"}