{"version":3,"names":["_types","require","_types2","_datatypes","_DrawingNode","PatchNode","JsiDrawingNode","constructor","ctx","props","NodeType","Patch","deriveProps","colors","blendMode","patch","defaultBlendMode","BlendMode","DstOver","SrcOver","mode","enumKey","points","pos","c2","c1","map","c","Skia","Color","undefined","draw","canvas","paint","derived","Error","texture","drawPatch","exports"],"sources":["PatchNode.ts"],"sourcesContent":["import type { SkColor, SkPoint } from \"../../../skia/types\";\nimport { BlendMode } from \"../../../skia/types\";\nimport type { DrawingContext, PatchProps } from \"../../types\";\nimport { NodeType } from \"../../types\";\nimport { enumKey } from \"../datatypes\";\nimport { JsiDrawingNode } from \"../DrawingNode\";\nimport type { NodeContext } from \"../Node\";\n\nexport class PatchNode extends JsiDrawingNode<\n  PatchProps,\n  { points: SkPoint[]; colors: SkColor[] | undefined; mode: BlendMode }\n> {\n  constructor(ctx: NodeContext, props: PatchProps) {\n    super(ctx, NodeType.Patch, props);\n  }\n\n  deriveProps() {\n    const { colors, blendMode, patch } = this.props;\n    const defaultBlendMode = colors ? BlendMode.DstOver : BlendMode.SrcOver;\n    const mode = blendMode ? BlendMode[enumKey(blendMode)] : defaultBlendMode;\n    // Patch requires a path with the following constraints:\n    // M tl\n    // C c1 c2 br\n    // C c1 c2 bl\n    // C c1 c2 tl (the redundant point in the last command is removed)\n    return {\n      mode,\n      points: [\n        patch[0].pos,\n        patch[0].c2,\n        patch[1].c1,\n        patch[1].pos,\n        patch[1].c2,\n        patch[2].c1,\n        patch[2].pos,\n        patch[2].c2,\n        patch[3].c1,\n        patch[3].pos,\n        patch[3].c2,\n        patch[0].c1,\n      ],\n      colors: colors ? colors.map((c) => this.Skia.Color(c)) : undefined,\n    };\n  }\n\n  draw({ canvas, paint }: DrawingContext) {\n    if (!this.derived) {\n      throw new Error(\"PatchNode: derived props not set\");\n    }\n    const { texture } = this.props;\n    const { colors, points, mode } = this.derived;\n    canvas.drawPatch(points, colors, texture, mode, paint);\n  }\n}\n"],"mappings":";;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AAGO,MAAMI,SAAS,SAASC,2BAAc,CAG3C;EACAC,WAAWA,CAACC,GAAgB,EAAEC,KAAiB,EAAE;IAC/C,KAAK,CAACD,GAAG,EAAEE,gBAAQ,CAACC,KAAK,EAAEF,KAAK,CAAC;EACnC;EAEAG,WAAWA,CAAA,EAAG;IACZ,MAAM;MAAEC,MAAM;MAAEC,SAAS;MAAEC;IAAM,CAAC,GAAG,IAAI,CAACN,KAAK;IAC/C,MAAMO,gBAAgB,GAAGH,MAAM,GAAGI,gBAAS,CAACC,OAAO,GAAGD,gBAAS,CAACE,OAAO;IACvE,MAAMC,IAAI,GAAGN,SAAS,GAAGG,gBAAS,CAAC,IAAAI,kBAAO,EAACP,SAAS,CAAC,CAAC,GAAGE,gBAAgB;IACzE;IACA;IACA;IACA;IACA;IACA,OAAO;MACLI,IAAI;MACJE,MAAM,EAAE,CACNP,KAAK,CAAC,CAAC,CAAC,CAACQ,GAAG,EACZR,KAAK,CAAC,CAAC,CAAC,CAACS,EAAE,EACXT,KAAK,CAAC,CAAC,CAAC,CAACU,EAAE,EACXV,KAAK,CAAC,CAAC,CAAC,CAACQ,GAAG,EACZR,KAAK,CAAC,CAAC,CAAC,CAACS,EAAE,EACXT,KAAK,CAAC,CAAC,CAAC,CAACU,EAAE,EACXV,KAAK,CAAC,CAAC,CAAC,CAACQ,GAAG,EACZR,KAAK,CAAC,CAAC,CAAC,CAACS,EAAE,EACXT,KAAK,CAAC,CAAC,CAAC,CAACU,EAAE,EACXV,KAAK,CAAC,CAAC,CAAC,CAACQ,GAAG,EACZR,KAAK,CAAC,CAAC,CAAC,CAACS,EAAE,EACXT,KAAK,CAAC,CAAC,CAAC,CAACU,EAAE,CACZ;MACDZ,MAAM,EAAEA,MAAM,GAAGA,MAAM,CAACa,GAAG,CAAEC,CAAC,IAAK,IAAI,CAACC,IAAI,CAACC,KAAK,CAACF,CAAC,CAAC,CAAC,GAAGG;IAC3D,CAAC;EACH;EAEAC,IAAIA,CAAC;IAAEC,MAAM;IAAEC;EAAsB,CAAC,EAAE;IACtC,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACrD;IACA,MAAM;MAAEC;IAAQ,CAAC,GAAG,IAAI,CAAC3B,KAAK;IAC9B,MAAM;MAAEI,MAAM;MAAES,MAAM;MAAEF;IAAK,CAAC,GAAG,IAAI,CAACc,OAAO;IAC7CF,MAAM,CAACK,SAAS,CAACf,MAAM,EAAET,MAAM,EAAEuB,OAAO,EAAEhB,IAAI,EAAEa,KAAK,CAAC;EACxD;AACF;AAACK,OAAA,CAAAjC,SAAA,GAAAA,SAAA"}