{"version":3,"names":["_react","require","_Platform","_types","useInternalTouchHandler","handlers","deps","multiTouch","prevTouchInfoRef","useRef","prevVelocityRef","useCallback","history","forEach","touches","i","length","_prevTouchInfoRef$cur","_prevTouchInfoRef$cur2","_prevTouch$x","_prevTouch$y","_prevVelocityRef$curr","_prevVelocityRef$curr2","_prevVelocityRef$curr3","_prevVelocityRef$curr4","touch","prevTouch","current","id","timeDiffseconds","timestamp","distX","x","distY","y","type","TouchType","Start","End","Cancelled","Platform","PixelRatio","extendedTouchInfo","velocityX","velocityY","onStart","Active","onActive","onEnd","useTouchHandler","exports","useMultiTouchHandler"],"sources":["useTouchHandler.ts"],"sourcesContent":["import type { DependencyList } from \"react\";\nimport { useCallback, useRef } from \"react\";\n\nimport type { Vector } from \"../skia/types\";\nimport { Platform } from \"../Platform\";\n\nimport type {\n  ExtendedTouchInfo,\n  TouchHandlers,\n  TouchHandler,\n  TouchInfo,\n} from \"./types\";\nimport { TouchType } from \"./types\";\n\nconst useInternalTouchHandler = (\n  handlers: TouchHandlers,\n  deps: DependencyList = [],\n  multiTouch = false\n): TouchHandler => {\n  const prevTouchInfoRef = useRef<{ [key: number]: TouchInfo | undefined }>({});\n  const prevVelocityRef = useRef<{ [key: number]: Vector | undefined }>({});\n\n  return useCallback((history: Array<Array<TouchInfo>>) => {\n    // Process all items in the current touch history\n    history.forEach((touches) => {\n      // Enumerate touches\n      for (let i = 0; i < touches.length; i++) {\n        if (!multiTouch && i > 0) {\n          break;\n        }\n\n        const touch = touches[i];\n        const prevTouch = prevTouchInfoRef.current[touch.id];\n        // Calculate the velocity from the previous touch.\n        const timeDiffseconds =\n          touch.timestamp -\n          (prevTouchInfoRef.current[touch.id]?.timestamp ?? touch.timestamp);\n\n        const distX = touch.x - (prevTouch?.x ?? touch.x);\n        const distY = touch.y - (prevTouch?.y ?? touch.y);\n\n        if (\n          touch.type !== TouchType.Start &&\n          touch.type !== TouchType.End &&\n          touch.type !== TouchType.Cancelled &&\n          timeDiffseconds > 0\n        ) {\n          prevVelocityRef.current[touch.id] = {\n            x: distX / timeDiffseconds / Platform.PixelRatio,\n            y: distY / timeDiffseconds / Platform.PixelRatio,\n          };\n        }\n\n        const extendedTouchInfo: ExtendedTouchInfo = {\n          ...touch,\n          velocityX: prevVelocityRef.current[touch.id]?.x ?? 0,\n          velocityY: prevVelocityRef.current[touch.id]?.y ?? 0,\n        };\n\n        // Save previous touch\n        prevTouchInfoRef.current[touch.id] = touch;\n\n        if (touch.type === TouchType.Start) {\n          delete prevVelocityRef.current[touch.id];\n          handlers.onStart && handlers.onStart(touch);\n        } else if (touch.type === TouchType.Active) {\n          handlers.onActive && handlers.onActive(extendedTouchInfo);\n        } else {\n          handlers.onEnd && handlers.onEnd(extendedTouchInfo);\n        }\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n};\n\n/**\n * Provides a callback for handling touch events in the Skia View.\n * This touch handler only handles single touches.\n * @param handlers Callbacks for the different touch states\n * @param deps optional Dependency array to update the handlers\n * @returns A function that can be used from within the onDraw callback to\n * update and handle touch events. Call it with the touches property from\n * the info object.\n */\nexport const useTouchHandler = (\n  handlers: TouchHandlers,\n  deps: DependencyList = []\n): TouchHandler => {\n  return useInternalTouchHandler(handlers, deps, false);\n};\n\n/**\n * Provides a callback for handling touch events in the Skia View.\n * This touch handler handles multiple touches.\n * @param handlers Callbacks for the different touch states\n * @param deps optional Dependency array to update the handlers\n * @returns A function that can be used from within the onDraw callback to\n * update and handle touch events. Call it with the touches property from\n * the info object.\n */\nexport const useMultiTouchHandler = (\n  handlers: TouchHandlers,\n  deps: DependencyList = []\n): TouchHandler => {\n  return useInternalTouchHandler(handlers, deps, true);\n};\n"],"mappings":"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"}