{"version":3,"names":["AlphaType","ColorType"],"sources":["ImageFactory.ts"],"sourcesContent":["import type { SkData } from \"../Data\";\nimport type { NativeBuffer } from \"../NativeBuffer\";\n\nimport type { SkImage } from \"./Image\";\n\nexport enum AlphaType {\n  Unknown,\n  Opaque,\n  Premul,\n  Unpremul,\n}\n\nexport enum ColorType {\n  Unknown, // uninitialized\n  Alpha_8, // pixel with alpha in 8-bit byte\n  RGB_565, // pixel with 5 bits red, 6 bits green, 5 bits blue, in 16-bit word\n  ARGB_4444, // pixel with 4 bits for alpha, red, green, blue; in 16-bit word\n  RGBA_8888, // pixel with 8 bits for red, green, blue, alpha; in 32-bit word\n  RGB_888x, // pixel with 8 bits each for red, green, blue; in 32-bit word\n  BGRA_8888, // pixel with 8 bits for blue, green, red, alpha; in 32-bit word\n  RGBA_1010102, // 10 bits for red, green, blue; 2 bits for alpha; in 32-bit word\n  BGRA_1010102, // 10 bits for blue, green, red; 2 bits for alpha; in 32-bit word\n  RGB_101010x, // pixel with 10 bits each for red, green, blue; in 32-bit word\n  BGR_101010x, // pixel with 10 bits each for blue, green, red; in 32-bit word\n  BGR_101010x_XR, // pixel with 10 bits each for blue, green, red; in 32-bit word, extended range\n  RGBA_10x6, // pixel with 10 used bits (most significant) followed by 6 unused\n  Gray_8, // pixel with grayscale level in 8-bit byte\n  RGBA_F16Norm, // pixel with half floats in [0,1] for red, green, blue, alpha; in 64-bit word\n  RGBA_F16, // pixel with half floats for red, green, blue, alpha; in 64-bit word\n  RGBA_F32, // pixel using C float for red, green, blue, alpha; in 128-bit word\n}\n\nexport interface ImageInfo {\n  alphaType: AlphaType;\n  // TODO: add support for color space\n  // colorSpace: ColorSpace;\n  colorType: ColorType;\n  height: number;\n  width: number;\n}\n\nexport interface ImageFactory {\n  /**\n   * Return an Image backed by the encoded data, but attempt to defer decoding until the image\n   * is actually used/drawn. This deferral allows the system to cache the result, either on the\n   * CPU or on the GPU, depending on where the image is drawn.\n   * This decoding uses the codecs that have been compiled into CanvasKit. If the bytes are\n   * invalid (or an unrecognized codec), null will be returned. See Image.h for more details.\n   * @param data - Data object with bytes of data\n   * @returns If the encoded format is not supported, or subset is outside of the bounds of the decoded\n   *  image, nullptr is returned.\n   */\n  MakeImageFromEncoded: (encoded: SkData) => SkImage | null;\n\n  /**\n   * Return an Image backed by a given native buffer.\n   * The native buffer must be a valid owning reference.\n   *\n   * For instance, this API is used by\n   * [react-native-vision-camera](https://github.com/mrousavy/react-native-vision-camera)\n   * to render a Skia Camera preview.\n   *\n   * - On Android; This is an `AHardwareBuffer*`\n   * - On iOS, this is a `CVPixelBufferRef`\n   * @param nativeBuffer A strong `uintptr_t` pointer to the native buffer\n   * @throws Throws an error if the Image could not be created, for example when the given\n   * native buffer is invalid.\n   */\n  MakeImageFromNativeBuffer: (nativeBuffer: NativeBuffer) => SkImage;\n\n  /**\n   * Returns an image that will be a screenshot of the view represented by\n   * the view tag\n   * @param viewTag - The tag of the view to make an image from.\n   * @returns Returns a valid SkImage, if the view tag is invalid, nullptr is returned.\n   */\n  MakeImageFromViewTag: (viewTag: number) => Promise<SkImage | null>;\n\n  /**\n   * Returns an image with the given pixel data and format.\n   * Note that we will always make a copy of the pixel data, because of inconsistencies in\n   * behavior between GPU and CPU (i.e. the pixel data will be turned into a GPU texture and\n   * not modifiable after creation).\n   *\n   * @param info\n   * @param data - bytes representing the pixel data.\n   * @param bytesPerRow\n   */\n  MakeImage(info: ImageInfo, data: SkData, bytesPerRow: number): SkImage | null;\n}\n"],"mappings":"AAKA,WAAYA,SAAS,0BAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAOrB,WAAYC,SAAS,0BAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAAA,OAATA,SAAS;AAAA,OAiBT"}