{"version":3,"names":["saturate","FillType","NodeType","enumKey","processPath","JsiDrawingNode","PathNode","constructor","ctx","props","Path","deriveProps","start","trimStart","end","trimEnd","fillType","stroke","pathProps","hasStartOffset","hasEndOffset","hasStrokeOptions","undefined","hasFillType","willMutatePath","pristinePath","Skia","path","copy","setFillType","trim","draw","canvas","paint","derived","Error","drawPath"],"sources":["PathNode.ts"],"sourcesContent":["import { saturate } from \"../../../renderer/processors/math\";\nimport { FillType } from \"../../../skia/types\";\nimport type { SkPath } from \"../../../skia/types\";\nimport type { DrawingContext, PathProps } from \"../../types\";\nimport { NodeType } from \"../../types\";\nimport { enumKey, processPath } from \"../datatypes\";\nimport { JsiDrawingNode } from \"../DrawingNode\";\nimport type { NodeContext } from \"../Node\";\n\nexport class PathNode extends JsiDrawingNode<PathProps, SkPath> {\n  constructor(ctx: NodeContext, props: PathProps) {\n    super(ctx, NodeType.Path, props);\n  }\n\n  protected deriveProps() {\n    const {\n      start: trimStart,\n      end: trimEnd,\n      fillType,\n      stroke,\n      ...pathProps\n    } = this.props;\n    const start = saturate(trimStart);\n    const end = saturate(trimEnd);\n    const hasStartOffset = start !== 0;\n    const hasEndOffset = end !== 1;\n    const hasStrokeOptions = stroke !== undefined;\n    const hasFillType = !!fillType;\n    const willMutatePath =\n      hasStartOffset || hasEndOffset || hasStrokeOptions || hasFillType;\n    const pristinePath = processPath(this.Skia, pathProps.path);\n    const path = willMutatePath ? pristinePath.copy() : pristinePath;\n    if (hasFillType) {\n      path.setFillType(FillType[enumKey(fillType)]);\n    }\n    if (hasStrokeOptions) {\n      path.stroke(stroke);\n    }\n    if (hasStartOffset || hasEndOffset) {\n      path.trim(start, end, false);\n    }\n    return path;\n  }\n\n  draw({ canvas, paint }: DrawingContext) {\n    if (!this.derived) {\n      throw new Error(\"Path not initialized\");\n    }\n    canvas.drawPath(this.derived, paint);\n  }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,mCAAmC;AAC5D,SAASC,QAAQ,QAAQ,qBAAqB;AAG9C,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,OAAO,EAAEC,WAAW,QAAQ,cAAc;AACnD,SAASC,cAAc,QAAQ,gBAAgB;AAG/C,OAAO,MAAMC,QAAQ,SAASD,cAAc,CAAoB;EAC9DE,WAAWA,CAACC,GAAgB,EAAEC,KAAgB,EAAE;IAC9C,KAAK,CAACD,GAAG,EAAEN,QAAQ,CAACQ,IAAI,EAAED,KAAK,CAAC;EAClC;EAEUE,WAAWA,CAAA,EAAG;IACtB,MAAM;MACJC,KAAK,EAAEC,SAAS;MAChBC,GAAG,EAAEC,OAAO;MACZC,QAAQ;MACRC,MAAM;MACN,GAAGC;IACL,CAAC,GAAG,IAAI,CAACT,KAAK;IACd,MAAMG,KAAK,GAAGZ,QAAQ,CAACa,SAAS,CAAC;IACjC,MAAMC,GAAG,GAAGd,QAAQ,CAACe,OAAO,CAAC;IAC7B,MAAMI,cAAc,GAAGP,KAAK,KAAK,CAAC;IAClC,MAAMQ,YAAY,GAAGN,GAAG,KAAK,CAAC;IAC9B,MAAMO,gBAAgB,GAAGJ,MAAM,KAAKK,SAAS;IAC7C,MAAMC,WAAW,GAAG,CAAC,CAACP,QAAQ;IAC9B,MAAMQ,cAAc,GAClBL,cAAc,IAAIC,YAAY,IAAIC,gBAAgB,IAAIE,WAAW;IACnE,MAAME,YAAY,GAAGrB,WAAW,CAAC,IAAI,CAACsB,IAAI,EAAER,SAAS,CAACS,IAAI,CAAC;IAC3D,MAAMA,IAAI,GAAGH,cAAc,GAAGC,YAAY,CAACG,IAAI,CAAC,CAAC,GAAGH,YAAY;IAChE,IAAIF,WAAW,EAAE;MACfI,IAAI,CAACE,WAAW,CAAC5B,QAAQ,CAACE,OAAO,CAACa,QAAQ,CAAC,CAAC,CAAC;IAC/C;IACA,IAAIK,gBAAgB,EAAE;MACpBM,IAAI,CAACV,MAAM,CAACA,MAAM,CAAC;IACrB;IACA,IAAIE,cAAc,IAAIC,YAAY,EAAE;MAClCO,IAAI,CAACG,IAAI,CAAClB,KAAK,EAAEE,GAAG,EAAE,KAAK,CAAC;IAC9B;IACA,OAAOa,IAAI;EACb;EAEAI,IAAIA,CAAC;IAAEC,MAAM;IAAEC;EAAsB,CAAC,EAAE;IACtC,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACAH,MAAM,CAACI,QAAQ,CAAC,IAAI,CAACF,OAAO,EAAED,KAAK,CAAC;EACtC;AACF"}