"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCustomFunctionCall = exports.SCRIPTS_PATH = void 0;
const path_1 = __importDefault(require("path"));
const this_file_1 = require("this-file");
const fs_extra_1 = __importDefault(require("fs-extra"));
const spawn_js_1 = require("./shell/spawn.cjs");
const thisFileCtx = (0, this_file_1.createContext)();
exports.SCRIPTS_PATH = path_1.default.join(thisFileCtx.dirname, '../../dist_commonjs/scripts');
function createCustomFunctionCall(rawCustomFunctionModulePath) {
    return async (ctx, { env, inputs, outputs }) => {
        let customFunctionModulePath = rawCustomFunctionModulePath;
        if (!(await fs_extra_1.default.exists(ctx.global.projectSourceDirectory))) {
            const relative = path_1.default.relative(path_1.default.resolve(ctx.global.projectSourceDirectory), customFunctionModulePath);
            customFunctionModulePath = path_1.default.resolve(path_1.default.join(ctx.global.projectTargetDirectory, relative));
        }
        const serializedArguments = {
            env,
            inputs: Object.fromEntries(Object.entries(inputs).map(([id, input]) => [id, input.serialize()])),
            outputs: Object.fromEntries(Object.entries(outputs).map(([id, output]) => [id, output.serialize()])),
            ctx: ctx.serialize(),
        };
        try {
            await (0, spawn_js_1.spawnAsync)('node', [
                path_1.default.join(exports.SCRIPTS_PATH, 'runCustomFunction.cjs'),
                customFunctionModulePath,
                JSON.stringify(serializedArguments),
            ], {
                logger: ctx.logger,
                cwd: ctx.workingDirectory,
                env,
                stdio: 'pipe',
            });
        }
        catch {
            throw new Error(`Custom function exited with non-zero exit code.`);
        }
    };
}
exports.createCustomFunctionCall = createCustomFunctionCall;
//# sourceMappingURL=customFunction.js.map