"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliContextProvider = void 0;
const path_1 = __importDefault(require("path"));
const logger_1 = require("@expo/logger");
const BuildConfigParser_js_1 = require("../BuildConfigParser.cjs");
const BuildStepContext_js_1 = require("../BuildStepContext.cjs");
const errors_js_1 = require("../errors.cjs");
const logger = (0, logger_1.createLogger)({
    name: 'steps-cli',
    level: 'info',
});
class CliContextProvider {
    constructor(logger, runtimePlatform, projectSourceDirectory, projectTargetDirectory, defaultWorkingDirectory, buildLogsDirectory) {
        this.logger = logger;
        this.runtimePlatform = runtimePlatform;
        this.projectSourceDirectory = projectSourceDirectory;
        this.projectTargetDirectory = projectTargetDirectory;
        this.defaultWorkingDirectory = defaultWorkingDirectory;
        this.buildLogsDirectory = buildLogsDirectory;
        this._env = {};
    }
    get env() {
        return this._env;
    }
    staticContext() {
        return {
            job: {},
            metadata: {},
            env: this.env,
        };
    }
    updateEnv(env) {
        this._env = env;
    }
}
exports.CliContextProvider = CliContextProvider;
async function runAsync(configPath, relativeProjectDirectory, runtimePlatform) {
    const ctx = new BuildStepContext_js_1.BuildStepGlobalContext(new CliContextProvider(logger, runtimePlatform, relativeProjectDirectory, relativeProjectDirectory, relativeProjectDirectory, relativeProjectDirectory), false);
    const parser = new BuildConfigParser_js_1.BuildConfigParser(ctx, {
        configPath,
    });
    const workflow = await parser.parseAsync();
    await workflow.executeAsync();
}
const relativeConfigPath = process.argv[2];
const relativeProjectDirectoryPath = process.argv[3];
const platform = ((_a = process.argv[4]) !== null && _a !== void 0 ? _a : process.platform);
if (!relativeConfigPath || !relativeProjectDirectoryPath) {
    console.error('Usage: yarn cli config.yml path/to/project/directory [darwin|linux]');
    process.exit(1);
}
const configPath = path_1.default.resolve(process.cwd(), relativeConfigPath);
const workingDirectory = path_1.default.resolve(process.cwd(), relativeProjectDirectoryPath);
runAsync(configPath, workingDirectory, platform).catch((err) => {
    logger.error({ err }, 'Build failed');
    if (err instanceof errors_js_1.BuildWorkflowError) {
        logger.error('Failed to parse the custom build config file.');
        for (const detailedErr of err.errors) {
            logger.error({ err: detailedErr });
        }
    }
});
//# sourceMappingURL=cli.js.map