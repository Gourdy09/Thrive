{"version":3,"file":"BuildConfigParser.js","sourceRoot":"","sources":["../src/BuildConfigParser.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nimport {\n  BuildConfig,\n  BuildFunctionConfig,\n  BuildFunctionInputs,\n  BuildFunctionOutputs,\n  BuildStepBareCommandRun,\n  BuildStepBareFunctionOrFunctionGroupCall,\n  BuildStepCommandRun,\n  BuildStepConfig,\n  BuildStepFunctionCall,\n  BuildStepInputs,\n  BuildStepOutputs,\n  isBuildStepBareCommandRun,\n  isBuildStepBareFunctionOrFunctionGroupCall,\n  isBuildStepCommandRun,\n  readAndValidateBuildConfigFromPathAsync,\n} from './BuildConfig.js';\nimport { BuildFunction, BuildFunctionById } from './BuildFunction.js';\nimport { BuildStep } from './BuildStep.js';\nimport {\n  BuildStepInput,\n  BuildStepInputProvider,\n  BuildStepInputValueTypeName,\n} from './BuildStepInput.js';\nimport { BuildStepGlobalContext } from './BuildStepContext.js';\nimport { BuildStepOutput, BuildStepOutputProvider } from './BuildStepOutput.js';\nimport { BuildConfigError } from './errors.js';\nimport {\n  BuildFunctionGroup,\n  BuildFunctionGroupById,\n  createBuildFunctionGroupByIdMapping,\n} from './BuildFunctionGroup.js';\nimport { AbstractConfigParser } from './AbstractConfigParser.js';\n\nexport class BuildConfigParser extends AbstractConfigParser {\n  private readonly configPath: string;\n  constructor(\n    ctx: BuildStepGlobalContext,\n    {\n      configPath,\n      externalFunctions,\n      externalFunctionGroups,\n    }: {\n      configPath: string;\n      externalFunctions?: BuildFunction[];\n      externalFunctionGroups?: BuildFunctionGroup[];\n    }\n  ) {\n    super(ctx, {\n      externalFunctions,\n      externalFunctionGroups,\n    });\n\n    this.configPath = configPath;\n  }\n\n  protected async parseConfigToBuildStepsAndBuildFunctionByIdMappingAsync(): Promise<{\n    buildSteps: BuildStep[];\n    buildFunctionById: BuildFunctionById;\n  }> {\n    const config = await readAndValidateBuildConfigFromPathAsync(this.configPath, {\n      externalFunctionIds: this.getExternalFunctionFullIds(),\n      externalFunctionGroupsIds: this.getExternalFunctionGroupFullIds(),\n    });\n    const configBuildFunctions = this.createBuildFunctionsFromConfig(config.functions);\n    const buildFunctions = this.mergeBuildFunctionsWithExternal(\n      configBuildFunctions,\n      this.externalFunctions\n    );\n    const buildFunctionGroups = createBuildFunctionGroupByIdMapping(\n      this.externalFunctionGroups ?? []\n    );\n    const buildSteps: BuildStep[] = [];\n    for (const stepConfig of config.build.steps) {\n      buildSteps.push(\n        ...this.createBuildStepFromConfig(stepConfig, buildFunctions, buildFunctionGroups)\n      );\n    }\n    return {\n      buildSteps,\n      buildFunctionById: buildFunctions,\n    };\n  }\n\n  private createBuildStepFromConfig(\n    buildStepConfig: BuildStepConfig,\n    buildFunctions: BuildFunctionById,\n    buildFunctionGroups: BuildFunctionGroupById\n  ): BuildStep[] {\n    if (isBuildStepCommandRun(buildStepConfig)) {\n      return [this.createBuildStepFromBuildStepCommandRun(buildStepConfig)];\n    } else if (isBuildStepBareCommandRun(buildStepConfig)) {\n      return [this.createBuildStepFromBuildStepBareCommandRun(buildStepConfig)];\n    } else if (isBuildStepBareFunctionOrFunctionGroupCall(buildStepConfig)) {\n      return this.createBuildStepsFromBareBuildStepFunctionOrBareBuildStepFunctionGroupCall(\n        buildFunctions,\n        buildFunctionGroups,\n        buildStepConfig\n      );\n    } else if (buildStepConfig !== null) {\n      return this.createBuildStepsFromBuildStepFunctionOrBuildStepFunctionGroupCall(\n        buildFunctions,\n        buildFunctionGroups,\n        buildStepConfig\n      );\n    } else {\n      throw new BuildConfigError(\n        'Invalid build step configuration detected. Build step cannot be empty.'\n      );\n    }\n  }\n\n  private createBuildStepFromBuildStepCommandRun({ run }: BuildStepCommandRun): BuildStep {\n    const {\n      id: maybeId,\n      inputs: inputsConfig,\n      outputs: outputsConfig,\n      name,\n      workingDirectory,\n      shell,\n      command,\n      env,\n      if: ifCondition,\n    } = run;\n    const id = BuildStep.getNewId(maybeId);\n    const displayName = BuildStep.getDisplayName({ id, name, command });\n    const inputs =\n      inputsConfig && this.createBuildStepInputsFromDefinition(inputsConfig, displayName);\n    const outputs =\n      outputsConfig && this.createBuildStepOutputsFromDefinition(outputsConfig, displayName);\n    return new BuildStep(this.ctx, {\n      id,\n      inputs,\n      outputs,\n      name,\n      displayName,\n      workingDirectory,\n      shell,\n      command,\n      env,\n      ifCondition,\n    });\n  }\n\n  private createBuildStepFromBuildStepBareCommandRun({\n    run: command,\n  }: BuildStepBareCommandRun): BuildStep {\n    const id = BuildStep.getNewId();\n    const displayName = BuildStep.getDisplayName({ id, command });\n    return new BuildStep(this.ctx, {\n      id,\n      displayName,\n      command,\n    });\n  }\n\n  private createBuildStepsFromBuildStepFunctionGroupCall(\n    buildFunctionGroups: BuildFunctionGroupById,\n    buildStepFunctionCall: BuildStepFunctionCall\n  ): BuildStep[] {\n    const functionId = getFunctionIdFromBuildStepFunctionCall(buildStepFunctionCall);\n    const buildFunctionGroup = buildFunctionGroups[functionId];\n    assert(buildFunctionGroup, `Build function group with id \"${functionId}\" is not defined.`);\n    return buildFunctionGroup.createBuildStepsFromFunctionGroupCall(this.ctx, {\n      callInputs: buildStepFunctionCall[functionId].inputs,\n    });\n  }\n\n  private createBuildStepsFromBuildStepBareFunctionGroupCall(\n    buildFunctionGroups: BuildFunctionGroupById,\n    functionGroupId: string\n  ): BuildStep[] {\n    const buildFunctionGroup = buildFunctionGroups[functionGroupId];\n    assert(buildFunctionGroup, `Build function group with id \"${functionGroupId}\" is not defined.`);\n    return buildFunctionGroup.createBuildStepsFromFunctionGroupCall(this.ctx);\n  }\n\n  private createBuildStepFromBuildStepBareFunctionCall(\n    buildFunctions: BuildFunctionById,\n    functionId: BuildStepBareFunctionOrFunctionGroupCall\n  ): BuildStep {\n    const buildFunction = buildFunctions[functionId];\n    return buildFunction.createBuildStepFromFunctionCall(this.ctx);\n  }\n\n  private createBuildStepsFromBareBuildStepFunctionOrBareBuildStepFunctionGroupCall(\n    buildFunctions: BuildFunctionById,\n    buildFunctionGroups: BuildFunctionGroupById,\n    functionOrFunctionGroupId: string\n  ): BuildStep[] {\n    const maybeFunctionGroup = buildFunctionGroups[functionOrFunctionGroupId];\n    if (maybeFunctionGroup) {\n      return this.createBuildStepsFromBuildStepBareFunctionGroupCall(\n        buildFunctionGroups,\n        functionOrFunctionGroupId\n      );\n    }\n    return [\n      this.createBuildStepFromBuildStepBareFunctionCall(buildFunctions, functionOrFunctionGroupId),\n    ];\n  }\n\n  private createBuildStepsFromBuildStepFunctionOrBuildStepFunctionGroupCall(\n    buildFunctions: BuildFunctionById,\n    buildFunctionGroups: BuildFunctionGroupById,\n    buildStepFunctionCall: BuildStepFunctionCall\n  ): BuildStep[] {\n    const functionId = getFunctionIdFromBuildStepFunctionCall(buildStepFunctionCall);\n\n    const maybeFunctionGroup = buildFunctionGroups[functionId];\n    if (maybeFunctionGroup) {\n      return this.createBuildStepsFromBuildStepFunctionGroupCall(\n        buildFunctionGroups,\n        buildStepFunctionCall\n      );\n    }\n    return [this.createBuildStepFromBuildStepFunctionCall(buildFunctions, buildStepFunctionCall)];\n  }\n\n  private createBuildStepFromBuildStepFunctionCall(\n    buildFunctions: BuildFunctionById,\n    buildStepFunctionCall: BuildStepFunctionCall\n  ): BuildStep {\n    const functionId = getFunctionIdFromBuildStepFunctionCall(buildStepFunctionCall);\n    const buildFunctionCallConfig = buildStepFunctionCall[functionId];\n    const buildFunction = buildFunctions[functionId];\n    return buildFunction.createBuildStepFromFunctionCall(this.ctx, {\n      id: buildFunctionCallConfig.id,\n      name: buildFunctionCallConfig.name,\n      callInputs: buildFunctionCallConfig.inputs,\n      workingDirectory: buildFunctionCallConfig.workingDirectory,\n      shell: buildFunctionCallConfig.shell,\n      env: buildFunctionCallConfig.env,\n      ifCondition: buildFunctionCallConfig.if,\n    });\n  }\n\n  private createBuildFunctionsFromConfig(\n    buildFunctionsConfig: BuildConfig['functions']\n  ): BuildFunctionById {\n    if (!buildFunctionsConfig) {\n      return {};\n    }\n    const result: BuildFunctionById = {};\n    for (const [functionId, buildFunctionConfig] of Object.entries(buildFunctionsConfig)) {\n      const buildFunction = this.createBuildFunctionFromConfig({\n        id: functionId,\n        ...buildFunctionConfig,\n      });\n      result[buildFunction.getFullId()] = buildFunction;\n    }\n    return result;\n  }\n\n  private createBuildFunctionFromConfig({\n    id,\n    name,\n    inputs: inputsConfig,\n    outputs: outputsConfig,\n    shell,\n    command,\n    supportedRuntimePlatforms,\n    path: customFunctionModulePath,\n  }: BuildFunctionConfig & { id: string }): BuildFunction {\n    const inputProviders =\n      inputsConfig && this.createBuildStepInputProvidersFromBuildFunctionInputs(inputsConfig);\n    const outputProviders =\n      outputsConfig && this.createBuildStepOutputProvidersFromBuildFunctionOutputs(outputsConfig);\n    return new BuildFunction({\n      id,\n      name,\n      inputProviders,\n      outputProviders,\n      shell,\n      command,\n      customFunctionModulePath,\n      supportedRuntimePlatforms,\n    });\n  }\n\n  private createBuildStepInputsFromDefinition(\n    buildStepInputs: BuildStepInputs,\n    stepDisplayName: string\n  ): BuildStepInput[] {\n    return Object.entries(buildStepInputs).map(\n      ([key, value]) =>\n        new BuildStepInput(this.ctx, {\n          id: key,\n          stepDisplayName,\n          defaultValue: value,\n          required: true,\n          allowedValueTypeName:\n            typeof value === 'object'\n              ? BuildStepInputValueTypeName.JSON\n              : (typeof value as BuildStepInputValueTypeName),\n        })\n    );\n  }\n\n  private createBuildStepInputProvidersFromBuildFunctionInputs(\n    buildFunctionInputs: BuildFunctionInputs\n  ): BuildStepInputProvider[] {\n    return buildFunctionInputs.map((entry) => {\n      return typeof entry === 'string'\n        ? BuildStepInput.createProvider({\n            id: entry,\n            required: true,\n            allowedValueTypeName: BuildStepInputValueTypeName.STRING,\n          })\n        : BuildStepInput.createProvider({\n            id: entry.name,\n            required: entry.required ?? true,\n            defaultValue: entry.defaultValue,\n            allowedValues: entry.allowedValues,\n            allowedValueTypeName: entry.allowedValueType,\n          });\n    });\n  }\n\n  private createBuildStepOutputsFromDefinition(\n    buildStepOutputs: BuildStepOutputs,\n    stepDisplayName: string\n  ): BuildStepOutput[] {\n    return buildStepOutputs.map((entry) =>\n      typeof entry === 'string'\n        ? new BuildStepOutput(this.ctx, { id: entry, stepDisplayName, required: true })\n        : new BuildStepOutput(this.ctx, {\n            id: entry.name,\n            stepDisplayName,\n            required: entry.required ?? true,\n          })\n    );\n  }\n\n  private createBuildStepOutputProvidersFromBuildFunctionOutputs(\n    buildFunctionOutputs: BuildFunctionOutputs\n  ): BuildStepOutputProvider[] {\n    return buildFunctionOutputs.map((entry) =>\n      typeof entry === 'string'\n        ? BuildStepOutput.createProvider({ id: entry, required: true })\n        : BuildStepOutput.createProvider({ id: entry.name, required: entry.required ?? true })\n    );\n  }\n\n  private mergeBuildFunctionsWithExternal(\n    configFunctions: BuildFunctionById,\n    externalFunctions?: BuildFunction[]\n  ): BuildFunctionById {\n    const result: BuildFunctionById = { ...configFunctions };\n    if (externalFunctions === undefined) {\n      return result;\n    }\n    for (const buildFunction of externalFunctions) {\n      // functions defined in config shadow the external ones\n      const fullId = buildFunction.getFullId();\n      if (!(fullId in result)) {\n        result[fullId] = buildFunction;\n      }\n    }\n    return result;\n  }\n}\n\nfunction getFunctionIdFromBuildStepFunctionCall(\n  buildStepFunctionCall: BuildStepFunctionCall\n): string {\n  const keys = Object.keys(buildStepFunctionCall);\n  assert(\n    keys.length === 1,\n    'There must be at most one function call in the step (enforced by joi).'\n  );\n  return keys[0];\n}\n"]}