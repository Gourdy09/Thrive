{"version":3,"file":"runCustomFunction.js","sourceRoot":"","sources":["../../src/scripts/runCustomFunction.ts"],"names":[],"mappings":";;;;;AAAA,oDAA4B;AAE5B,yCAA4C;AAE5C,wEAAyC;AAEzC,8DAAwD;AACxD,4DAAsD;AAEtD,gEAA0D;AAE1D,sDAAqD;AAErD,KAAK,UAAU,wBAAwB;IACrC,MAAM,kCAAkC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC3D,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAErC,IAAA,gBAAM,EAAC,kCAAkC,EAAE,gDAAgD,CAAC,CAAC;IAC7F,IAAA,gBAAM,EAAC,YAAY,EAAE,sCAAsC,CAAC,CAAC;IAE7D,IAAI,2BAAmE,CAAC;IACxE,IAAI,CAAC;QACH,2BAA2B,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAC1D,MAAM,CAAC,CAAC;IACV,CAAC;IAED,MAAM,MAAM,GAAG,IAAA,qBAAY,EAAC;QAC1B,IAAI,EAAE,sBAAsB;QAC5B,OAAO,EAAE;YACP;gBACE,IAAI,EAAE,KAAK;gBACX,MAAM,EAAE;oBACN,KAAK,EAAE,CAAC,GAAQ,EAAE,EAAE;wBAClB,IAAI,GAAG,EAAE,CAAC;4BACR,QAAQ,GAAG,CAAC,KAAK,EAAE,CAAC;gCAClB,KAAK,EAAE,EAAE,cAAc;oCACrB,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC;wCACZ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oCACzB,CAAC;oCACD,MAAM;gCACR,KAAK,EAAE,EAAE,aAAa;oCACpB,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC;wCACZ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oCACvB,CAAC;oCACD,MAAM;gCACR,KAAK,EAAE,EAAE,aAAa;oCACpB,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC;wCACZ,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oCACxB,CAAC;oCACD,MAAM;gCACR,KAAK,EAAE,CAAC,CAAC,cAAc;gCACvB,KAAK,EAAE,EAAE,cAAc;oCACrB,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC;wCACZ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oCACzB,CAAC;oCACD,MAAM;gCACR;oCACE,MAAM;4BACV,CAAC;wBACH,CAAC;oBACH,CAAC;iBACF;aACF;SACF;KACF,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,sCAAgB,CAAC,WAAW,CAAC,2BAA2B,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IAClF,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAC/B,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;QACtE,EAAE;QACF,kCAAc,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC;KAC1C,CAAC,CACH,CAAC;IACF,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAChC,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC;QACxE,EAAE;QACF,oCAAe,CAAC,WAAW,CAAC,MAAM,CAAC;KACpC,CAAC,CACH,CAAC;IACF,MAAM,GAAG,GAAG,2BAA2B,CAAC,GAAG,CAAC;IAC5C,MAAM,SAAS,GAAG,IAAA,0BAAS,EAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC;IAE7D,IAAI,YAA4C,CAAC;IACjD,IAAI,CAAC;QACH,YAAY,GAAG,MAAM,OAAO,CAAC,kCAAkC,CAAC,CAAC;IACnE,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;QACvD,MAAM,CAAC,CAAC;IACV,CAAC;IAED,MAAM,wBAAwB,GAAG,YAAY,CAAC,OAAO,CAAC;IAEtD,MAAM,wBAAwB,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;IAE9D,MAAM,QAAQ,GAAgC,EAAE,CAAC;IACjD,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;QAC5C,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;YACpB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,EAAE,0BAA0B,CAAC,CAAC;YACjD,QAAQ,CAAC,IAAI,CACX,IAAA,qBAAU,EAAC,YAAY,EAAE,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE;gBAClD,GAAG;gBACH,KAAK,EAAE,MAAM;aACd,CAAC,CACH,CAAC;QACJ,CAAC;IACH,CAAC;IACD,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QACvC,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,QAAQ,KAAK,SAAS,CAAC,OAAO,CAAC,IAAI,QAAQ,EAAE,CAAC;YAChD,QAAQ,CAAC,IAAI,CACX,IAAA,qBAAU,EAAC,SAAS,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACzC,GAAG;gBACH,KAAK,EAAE,MAAM;aACd,CAAC,CACH,CAAC;QACJ,CAAC;IACH,CAAC;IACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC9B,CAAC;AAED,KAAK,wBAAwB,EAAE,CAAC","sourcesContent":["import assert from 'assert';\n\nimport { createLogger } from '@expo/logger';\nimport { SpawnPromise, SpawnResult } from '@expo/spawn-async';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport { BuildStepOutput } from '../BuildStepOutput.js';\nimport { BuildStepInput } from '../BuildStepInput.js';\nimport { SerializedCustomBuildFunctionArguments } from '../utils/customFunction.js';\nimport { BuildStepContext } from '../BuildStepContext.js';\nimport { BuildStepFunction } from '../BuildStep.js';\nimport { spawnAsync } from '../utils/shell/spawn.js';\n\nasync function runCustomJsFunctionAsync(): Promise<void> {\n  const customJavascriptFunctionModulePath = process.argv[2];\n  const functionArgs = process.argv[3];\n\n  assert(customJavascriptFunctionModulePath, 'customJavascriptFunctionModulePath is required');\n  assert(functionArgs, 'serializedFunctionParams is required');\n\n  let serializedFunctionArguments: SerializedCustomBuildFunctionArguments;\n  try {\n    serializedFunctionArguments = JSON.parse(functionArgs);\n  } catch (e) {\n    console.error('Failed to parse serializedFunctionParams');\n    throw e;\n  }\n\n  const logger = createLogger({\n    name: 'customFunctionLogger',\n    streams: [\n      {\n        type: 'raw',\n        stream: {\n          write: (rec: any) => {\n            if (rec) {\n              switch (rec.level) {\n                case 20: // Debug level\n                  if (rec.msg) {\n                    console.debug(rec.msg);\n                  }\n                  break;\n                case 30: // Info level\n                  if (rec.msg) {\n                    console.log(rec.msg);\n                  }\n                  break;\n                case 40: // Warn level\n                  if (rec.msg) {\n                    console.warn(rec.msg);\n                  }\n                  break;\n                case 50: // Error level\n                case 60: // Fatal level\n                  if (rec.msg) {\n                    console.error(rec.msg);\n                  }\n                  break;\n                default:\n                  break;\n              }\n            }\n          },\n        },\n      },\n    ],\n  });\n\n  const ctx = BuildStepContext.deserialize(serializedFunctionArguments.ctx, logger);\n  const inputs = Object.fromEntries(\n    Object.entries(serializedFunctionArguments.inputs).map(([id, input]) => [\n      id,\n      BuildStepInput.deserialize(input, logger),\n    ])\n  );\n  const outputs = Object.fromEntries(\n    Object.entries(serializedFunctionArguments.outputs).map(([id, output]) => [\n      id,\n      BuildStepOutput.deserialize(output),\n    ])\n  );\n  const env = serializedFunctionArguments.env;\n  const envBefore = cloneDeep(serializedFunctionArguments.env);\n\n  let customModule: { default: BuildStepFunction };\n  try {\n    customModule = await require(customJavascriptFunctionModulePath);\n  } catch (e) {\n    console.error('Failed to load custom function module');\n    throw e;\n  }\n\n  const customJavascriptFunction = customModule.default;\n\n  await customJavascriptFunction(ctx, { inputs, outputs, env });\n\n  const promises: SpawnPromise<SpawnResult>[] = [];\n  for (const output of Object.values(outputs)) {\n    if (output.rawValue) {\n      assert(output.value, 'output.value is required');\n      promises.push(\n        spawnAsync('set-output', [output.id, output.value], {\n          env,\n          stdio: 'pipe',\n        })\n      );\n    }\n  }\n  for (const envName of Object.keys(env)) {\n    const envValue = env[envName];\n    if (envValue !== envBefore[envName] && envValue) {\n      promises.push(\n        spawnAsync('set-env', [envName, envValue], {\n          env,\n          stdio: 'pipe',\n        })\n      );\n    }\n  }\n  await Promise.all(promises);\n}\n\nvoid runCustomJsFunctionAsync();\n"]}