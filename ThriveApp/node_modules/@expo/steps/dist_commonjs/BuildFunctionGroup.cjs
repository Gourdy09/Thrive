"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBuildFunctionGroupByIdMapping = exports.BuildFunctionGroup = void 0;
const BuildStepInput_js_1 = require("./BuildStepInput.cjs");
const errors_js_1 = require("./errors.cjs");
class BuildFunctionGroup {
    constructor({ namespace, id, inputProviders, createBuildStepsFromFunctionGroupCall, }) {
        this.namespace = namespace;
        this.id = id;
        this.inputProviders = inputProviders;
        this.createBuildStepsFromFunctionGroupCall = (ctx, { callInputs = {} } = {}) => {
            var _a;
            const inputs = (_a = this.inputProviders) === null || _a === void 0 ? void 0 : _a.map((inputProvider) => {
                const input = inputProvider(ctx, id);
                if (input.id in callInputs) {
                    input.set(callInputs[input.id]);
                }
                return input;
            });
            return createBuildStepsFromFunctionGroupCall(ctx, {
                inputs: (0, BuildStepInput_js_1.makeBuildStepInputByIdMap)(inputs),
            });
        };
    }
    getFullId() {
        return this.namespace === undefined ? this.id : `${this.namespace}/${this.id}`;
    }
}
exports.BuildFunctionGroup = BuildFunctionGroup;
function createBuildFunctionGroupByIdMapping(buildFunctionGroups) {
    const buildFunctionGroupById = {};
    for (const buildFunctionGroup of buildFunctionGroups) {
        if (buildFunctionGroupById[buildFunctionGroup.getFullId()] !== undefined) {
            throw new errors_js_1.BuildConfigError(`Build function group with id ${buildFunctionGroup.getFullId()} is already defined.`);
        }
        buildFunctionGroupById[buildFunctionGroup.getFullId()] = buildFunctionGroup;
    }
    return buildFunctionGroupById;
}
exports.createBuildFunctionGroupByIdMapping = createBuildFunctionGroupByIdMapping;
//# sourceMappingURL=BuildFunctionGroup.js.map