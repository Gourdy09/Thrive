{"version":3,"file":"BuildStepInput.js","sourceRoot":"","sources":["../src/BuildStepInput.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nimport { bunyan } from '@expo/logger';\n\nimport { BuildStepGlobalContext, SerializedBuildStepGlobalContext } from './BuildStepContext.js';\nimport { BuildStepRuntimeError } from './errors.js';\nimport {\n  BUILD_STEP_OR_BUILD_GLOBAL_CONTEXT_REFERENCE_REGEX,\n  interpolateWithOutputs,\n} from './utils/template.js';\n\nexport enum BuildStepInputValueTypeName {\n  STRING = 'string',\n  BOOLEAN = 'boolean',\n  NUMBER = 'number',\n  JSON = 'json',\n}\n\nexport type BuildStepInputValueType<\n  T extends BuildStepInputValueTypeName = BuildStepInputValueTypeName,\n> = T extends BuildStepInputValueTypeName.STRING\n  ? string\n  : T extends BuildStepInputValueTypeName.BOOLEAN\n    ? boolean\n    : T extends BuildStepInputValueTypeName.NUMBER\n      ? number\n      : Record<string, any>;\n\nexport type BuildStepInputValueTypeWithRequired<\n  T extends BuildStepInputValueTypeName = BuildStepInputValueTypeName,\n  R extends boolean = boolean,\n> = R extends true ? BuildStepInputValueType<T> : BuildStepInputValueType<T> | undefined;\n\nexport type BuildStepInputById = Record<string, BuildStepInput>;\nexport type BuildStepInputProvider = (\n  ctx: BuildStepGlobalContext,\n  stepId: string\n) => BuildStepInput;\n\ninterface BuildStepInputProviderParams<\n  T extends BuildStepInputValueTypeName = BuildStepInputValueTypeName,\n  R extends boolean = boolean,\n> {\n  id: string;\n  allowedValues?: BuildStepInputValueType<T>[];\n  defaultValue?: BuildStepInputValueType<T>;\n  required: R;\n  allowedValueTypeName: T;\n}\n\ninterface BuildStepInputParams<T extends BuildStepInputValueTypeName, R extends boolean>\n  extends BuildStepInputProviderParams<T, R> {\n  stepDisplayName: string;\n}\n\nexport interface SerializedBuildStepInput<\n  T extends BuildStepInputValueTypeName = BuildStepInputValueTypeName,\n  R extends boolean = boolean,\n> {\n  id: string;\n  stepDisplayName: string;\n  defaultValue?: BuildStepInputValueType<T>;\n  allowedValues?: BuildStepInputValueType<T>[];\n  allowedValueTypeName: BuildStepInputValueTypeName;\n  required: R;\n  value?: BuildStepInputValueType<T>;\n  ctx: SerializedBuildStepGlobalContext;\n}\n\nexport class BuildStepInput<\n  T extends BuildStepInputValueTypeName = BuildStepInputValueTypeName,\n  R extends boolean = boolean,\n> {\n  public readonly id: string;\n  public readonly stepDisplayName: string;\n  public readonly defaultValue?: BuildStepInputValueType<T>;\n  public readonly allowedValues?: BuildStepInputValueType<T>[];\n  public readonly allowedValueTypeName: T;\n  public readonly required: R;\n\n  private _value?: BuildStepInputValueType<T>;\n\n  public static createProvider(params: BuildStepInputProviderParams): BuildStepInputProvider {\n    return (ctx, stepDisplayName) => new BuildStepInput(ctx, { ...params, stepDisplayName });\n  }\n\n  constructor(\n    private readonly ctx: BuildStepGlobalContext,\n    {\n      id,\n      stepDisplayName,\n      allowedValues,\n      defaultValue,\n      required,\n      allowedValueTypeName,\n    }: BuildStepInputParams<T, R>\n  ) {\n    this.id = id;\n    this.stepDisplayName = stepDisplayName;\n    this.allowedValues = allowedValues;\n    this.defaultValue = defaultValue;\n    this.required = required;\n    this.allowedValueTypeName = allowedValueTypeName;\n  }\n\n  public get value(): BuildStepInputValueTypeWithRequired<T, R> {\n    const rawValue = this._value ?? this.defaultValue;\n    if (this.required && rawValue === undefined) {\n      throw new BuildStepRuntimeError(\n        `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" is required but it was not set.`\n      );\n    }\n\n    const valueDoesNotRequireInterpolation =\n      rawValue === undefined || typeof rawValue === 'boolean' || typeof rawValue === 'number';\n    let returnValue;\n    if (valueDoesNotRequireInterpolation) {\n      if (typeof rawValue !== this.allowedValueTypeName && rawValue !== undefined) {\n        throw new BuildStepRuntimeError(\n          `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" must be of type \"${this.allowedValueTypeName}\".`\n        );\n      }\n      returnValue = rawValue as BuildStepInputValueTypeWithRequired<T, R>;\n    } else {\n      // `valueDoesNotRequireInterpolation` checks that `rawValue` is not undefined\n      // so this will never be true.\n      assert(rawValue !== undefined);\n      const valueInterpolatedWithGlobalContext = this.ctx.interpolate(rawValue);\n      const valueInterpolatedWithOutputsAndGlobalContext = interpolateWithOutputs(\n        valueInterpolatedWithGlobalContext,\n        (path) => this.ctx.getStepOutputValue(path) ?? ''\n      );\n      returnValue = this.parseInputValueToAllowedType(valueInterpolatedWithOutputsAndGlobalContext);\n    }\n    return returnValue;\n  }\n\n  public get rawValue(): BuildStepInputValueType<T> | undefined {\n    return this._value ?? this.defaultValue;\n  }\n\n  public set(value: BuildStepInputValueType<T> | undefined): BuildStepInput {\n    if (this.required && value === undefined) {\n      throw new BuildStepRuntimeError(\n        `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" is required.`\n      );\n    }\n\n    this._value = value;\n    return this;\n  }\n\n  public isValueOneOfAllowedValues(): boolean {\n    const value = this._value ?? this.defaultValue;\n    if (this.allowedValues === undefined || value === undefined) {\n      return true;\n    }\n    return this.allowedValues.includes(value);\n  }\n\n  public isRawValueStepOrContextReference(): boolean {\n    return (\n      typeof this.rawValue === 'string' &&\n      !!BUILD_STEP_OR_BUILD_GLOBAL_CONTEXT_REFERENCE_REGEX.exec(this.rawValue)\n    );\n  }\n\n  public serialize(): SerializedBuildStepInput<T, R> {\n    return {\n      id: this.id,\n      stepDisplayName: this.stepDisplayName,\n      defaultValue: this.defaultValue,\n      allowedValues: this.allowedValues,\n      allowedValueTypeName: this.allowedValueTypeName,\n      required: this.required,\n      value: this._value,\n      ctx: this.ctx.serialize(),\n    };\n  }\n\n  public static deserialize(\n    serializedInput: SerializedBuildStepInput,\n    logger: bunyan\n  ): BuildStepInput {\n    const deserializedContext = BuildStepGlobalContext.deserialize(serializedInput.ctx, logger);\n    const input = new BuildStepInput(deserializedContext, {\n      id: serializedInput.id,\n      stepDisplayName: serializedInput.stepDisplayName,\n      defaultValue: serializedInput.defaultValue,\n      allowedValues: serializedInput.allowedValues,\n      allowedValueTypeName: serializedInput.allowedValueTypeName,\n      required: serializedInput.required,\n    });\n    input._value = serializedInput.value;\n    return input;\n  }\n\n  private parseInputValueToAllowedType(\n    value: string | object\n  ): BuildStepInputValueTypeWithRequired<T, R> {\n    if (typeof value === 'object') {\n      return value as BuildStepInputValueTypeWithRequired<T, R>;\n    }\n    if (this.allowedValueTypeName === BuildStepInputValueTypeName.STRING) {\n      return this.parseInputValueToString(value) as BuildStepInputValueTypeWithRequired<T, R>;\n    } else if (this.allowedValueTypeName === BuildStepInputValueTypeName.NUMBER) {\n      return this.parseInputValueToNumber(value) as BuildStepInputValueTypeWithRequired<T, R>;\n    } else if (this.allowedValueTypeName === BuildStepInputValueTypeName.BOOLEAN) {\n      return this.parseInputValueToBoolean(value) as BuildStepInputValueTypeWithRequired<T, R>;\n    } else {\n      return this.parseInputValueToObject(value) as BuildStepInputValueTypeWithRequired<T, R>;\n    }\n  }\n\n  private parseInputValueToString(value: string): string {\n    let parsedValue = value;\n    try {\n      parsedValue = JSON.parse(`\"${value}\"`);\n    } catch (err) {\n      if (!(err instanceof SyntaxError)) {\n        throw err;\n      }\n    }\n    return parsedValue;\n  }\n\n  private parseInputValueToNumber(value: string): number {\n    const numberValue = Number(value);\n    if (Number.isNaN(numberValue)) {\n      throw new BuildStepRuntimeError(\n        `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" must be of type \"${this.allowedValueTypeName}\".`\n      );\n    }\n    return numberValue;\n  }\n\n  private parseInputValueToBoolean(value: string): boolean {\n    if (value === 'true') {\n      return true;\n    } else if (value === 'false') {\n      return false;\n    } else {\n      throw new BuildStepRuntimeError(\n        `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" must be of type \"${this.allowedValueTypeName}\".`\n      );\n    }\n  }\n\n  private parseInputValueToObject(value: string): Record<string, any> {\n    try {\n      return JSON.parse(value);\n    } catch (e: any) {\n      throw new BuildStepRuntimeError(\n        `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" must be of type \"${this.allowedValueTypeName}\".`,\n        {\n          cause: e,\n        }\n      );\n    }\n  }\n}\n\nexport function makeBuildStepInputByIdMap(inputs?: BuildStepInput[]): BuildStepInputById {\n  if (inputs === undefined) {\n    return {};\n  }\n  return inputs.reduce((acc, input) => {\n    acc[input.id] = input;\n    return acc;\n  }, {} as BuildStepInputById);\n}\n"]}