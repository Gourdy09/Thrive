{"version":3,"file":"AbstractConfigParser.js","sourceRoot":"","sources":["../src/AbstractConfigParser.ts"],"names":[],"mappings":"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","sourcesContent":["import { BuildFunction, BuildFunctionById } from './BuildFunction.js';\nimport { BuildFunctionGroup } from './BuildFunctionGroup.js';\nimport { BuildStep } from './BuildStep.js';\nimport { BuildStepGlobalContext } from './BuildStepContext.js';\nimport { BuildWorkflow } from './BuildWorkflow.js';\nimport { BuildWorkflowValidator } from './BuildWorkflowValidator.js';\nimport { BuildConfigError } from './errors.js';\nimport { duplicates } from './utils/expodash/duplicates.js';\nimport { uniq } from './utils/expodash/uniq.js';\n\nexport abstract class AbstractConfigParser {\n  protected readonly externalFunctions?: BuildFunction[];\n  protected readonly externalFunctionGroups?: BuildFunctionGroup[];\n\n  constructor(\n    protected readonly ctx: BuildStepGlobalContext,\n    {\n      externalFunctions,\n      externalFunctionGroups,\n    }: {\n      externalFunctions?: BuildFunction[];\n      externalFunctionGroups?: BuildFunctionGroup[];\n    }\n  ) {\n    this.validateExternalFunctions(externalFunctions);\n    this.validateExternalFunctionGroups(externalFunctionGroups);\n\n    this.externalFunctions = externalFunctions;\n    this.externalFunctionGroups = externalFunctionGroups;\n  }\n\n  public async parseAsync(): Promise<BuildWorkflow> {\n    const { buildSteps, buildFunctionById } =\n      await this.parseConfigToBuildStepsAndBuildFunctionByIdMappingAsync();\n    const workflow = new BuildWorkflow(this.ctx, { buildSteps, buildFunctions: buildFunctionById });\n    await new BuildWorkflowValidator(workflow).validateAsync();\n    return workflow;\n  }\n\n  protected abstract parseConfigToBuildStepsAndBuildFunctionByIdMappingAsync(): Promise<{\n    buildSteps: BuildStep[];\n    buildFunctionById: BuildFunctionById;\n  }>;\n\n  private validateExternalFunctions(externalFunctions?: BuildFunction[]): void {\n    if (externalFunctions === undefined) {\n      return;\n    }\n    const externalFunctionIds = externalFunctions.map((f) => f.getFullId());\n    const duplicatedExternalFunctionIds = duplicates(externalFunctionIds);\n    if (duplicatedExternalFunctionIds.length === 0) {\n      return;\n    }\n    throw new BuildConfigError(\n      `Provided external functions with duplicated IDs: ${duplicatedExternalFunctionIds\n        .map((id) => `\"${id}\"`)\n        .join(', ')}`\n    );\n  }\n\n  private validateExternalFunctionGroups(externalFunctionGroups?: BuildFunctionGroup[]): void {\n    if (externalFunctionGroups === undefined) {\n      return;\n    }\n    const externalFunctionGroupIds = externalFunctionGroups.map((f) => f.getFullId());\n    const duplicatedExternalFunctionGroupIds = duplicates(externalFunctionGroupIds);\n    if (duplicatedExternalFunctionGroupIds.length === 0) {\n      return;\n    }\n    throw new BuildConfigError(\n      `Provided external function groups with duplicated IDs: ${duplicatedExternalFunctionGroupIds\n        .map((id) => `\"${id}\"`)\n        .join(', ')}`\n    );\n  }\n\n  protected getExternalFunctionFullIds(): string[] {\n    if (this.externalFunctions === undefined) {\n      return [];\n    }\n    const ids = this.externalFunctions.map((f) => f.getFullId());\n    return uniq(ids);\n  }\n\n  protected getExternalFunctionGroupFullIds(): string[] {\n    if (this.externalFunctionGroups === undefined) {\n      return [];\n    }\n    const ids = this.externalFunctionGroups.map((f) => f.getFullId());\n    return uniq(ids);\n  }\n}\n"]}