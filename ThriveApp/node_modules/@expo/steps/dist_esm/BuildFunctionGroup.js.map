{"version":3,"file":"BuildFunctionGroup.js","sourceRoot":"","sources":["../src/BuildFunctionGroup.ts"],"names":[],"mappings":"AAGA,OAAO,EAGL,yBAAyB,GAC1B,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAI/C,MAAM,OAAO,kBAAkB;IAW7B,YAAY,EACV,SAAS,EACT,EAAE,EACF,cAAc,EACd,qCAAqC,GAatC;QACC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QAErC,IAAI,CAAC,qCAAqC,GAAG,CAAC,GAAG,EAAE,EAAE,UAAU,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE;;YAC7E,MAAM,MAAM,GAAG,MAAA,IAAI,CAAC,cAAc,0CAAE,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE;gBACxD,MAAM,KAAK,GAAG,aAAa,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;gBACrC,IAAI,KAAK,CAAC,EAAE,IAAI,UAAU,EAAE,CAAC;oBAC3B,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;gBAClC,CAAC;gBACD,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;YACH,OAAO,qCAAqC,CAAC,GAAG,EAAE;gBAChD,MAAM,EAAE,yBAAyB,CAAC,MAAM,CAAC;aAC1C,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;IACjF,CAAC;CACF;AAED,MAAM,UAAU,mCAAmC,CACjD,mBAAyC;IAEzC,MAAM,sBAAsB,GAA2B,EAAE,CAAC;IAC1D,KAAK,MAAM,kBAAkB,IAAI,mBAAmB,EAAE,CAAC;QACrD,IAAI,sBAAsB,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,KAAK,SAAS,EAAE,CAAC;YACzE,MAAM,IAAI,gBAAgB,CACxB,gCAAgC,kBAAkB,CAAC,SAAS,EAAE,sBAAsB,CACrF,CAAC;QACJ,CAAC;QACD,sBAAsB,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,GAAG,kBAAkB,CAAC;IAC9E,CAAC;IACD,OAAO,sBAAsB,CAAC;AAChC,CAAC","sourcesContent":["import { BuildFunctionCallInputs } from './BuildFunction.js';\nimport { BuildStep } from './BuildStep.js';\nimport { BuildStepGlobalContext } from './BuildStepContext.js';\nimport {\n  BuildStepInputById,\n  BuildStepInputProvider,\n  makeBuildStepInputByIdMap,\n} from './BuildStepInput.js';\nimport { BuildConfigError } from './errors.js';\n\nexport type BuildFunctionGroupById = Record<string, BuildFunctionGroup | undefined>;\n\nexport class BuildFunctionGroup {\n  public readonly namespace: string;\n  public readonly id: string;\n  public readonly inputProviders?: BuildStepInputProvider[];\n  public readonly createBuildStepsFromFunctionGroupCall: (\n    globalCtx: BuildStepGlobalContext,\n    options?: {\n      callInputs?: BuildFunctionCallInputs;\n    }\n  ) => BuildStep[];\n\n  constructor({\n    namespace,\n    id,\n    inputProviders,\n    createBuildStepsFromFunctionGroupCall,\n  }: {\n    namespace: string;\n    id: string;\n    inputProviders?: BuildStepInputProvider[];\n    createBuildStepsFromFunctionGroupCall: (\n      globalCtx: BuildStepGlobalContext,\n      {\n        inputs,\n      }: {\n        inputs: BuildStepInputById;\n      }\n    ) => BuildStep[];\n  }) {\n    this.namespace = namespace;\n    this.id = id;\n    this.inputProviders = inputProviders;\n\n    this.createBuildStepsFromFunctionGroupCall = (ctx, { callInputs = {} } = {}) => {\n      const inputs = this.inputProviders?.map((inputProvider) => {\n        const input = inputProvider(ctx, id);\n        if (input.id in callInputs) {\n          input.set(callInputs[input.id]);\n        }\n        return input;\n      });\n      return createBuildStepsFromFunctionGroupCall(ctx, {\n        inputs: makeBuildStepInputByIdMap(inputs),\n      });\n    };\n  }\n\n  public getFullId(): string {\n    return this.namespace === undefined ? this.id : `${this.namespace}/${this.id}`;\n  }\n}\n\nexport function createBuildFunctionGroupByIdMapping(\n  buildFunctionGroups: BuildFunctionGroup[]\n): BuildFunctionGroupById {\n  const buildFunctionGroupById: BuildFunctionGroupById = {};\n  for (const buildFunctionGroup of buildFunctionGroups) {\n    if (buildFunctionGroupById[buildFunctionGroup.getFullId()] !== undefined) {\n      throw new BuildConfigError(\n        `Build function group with id ${buildFunctionGroup.getFullId()} is already defined.`\n      );\n    }\n    buildFunctionGroupById[buildFunctionGroup.getFullId()] = buildFunctionGroup;\n  }\n  return buildFunctionGroupById;\n}\n"]}