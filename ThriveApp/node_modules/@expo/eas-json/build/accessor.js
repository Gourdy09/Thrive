"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EasJsonAccessor = void 0;
const tslib_1 = require("tslib");
const code_frame_1 = require("@babel/code-frame");
const assert_1 = tslib_1.__importDefault(require("assert"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const fleece = tslib_1.__importStar(require("golden-fleece"));
const path_1 = tslib_1.__importDefault(require("path"));
const errors_1 = require("./errors");
const log_1 = require("./log");
const schema_1 = require("./schema");
const customErrorMessageHandlers = [
    // Ask user to upgrade eas-cli version or check the docs when image is invalid.
    (err) => {
        for (const detail of err.details) {
            // image should be only placed under 'build.profilename.platform.image' key
            // if it's not the case show standard Joi error
            if (detail.path.length === 4 &&
                detail.path[0] === 'build' &&
                ['ios', 'android'].includes(detail.path[2].toString()) &&
                detail.path[3] === 'image') {
                throw new errors_1.InvalidEasJsonError(chalk_1.default.red(`Specified build image '${detail?.context}' is not recognized. Please update your EAS CLI and see ${(0, log_1.link)('https://docs.expo.dev/build-reference/infrastructure/')} for supported build images.`));
            }
        }
    },
];
class EasJsonAccessor {
    constructor({ projectDir, easJsonRawContents, }) {
        this.isJson5 = false;
        this.easJsonPatched = false;
        this.easJsonPath = projectDir && EasJsonAccessor.formatEasJsonPath(projectDir);
        this.easJsonRawContents = easJsonRawContents;
    }
    static fromProjectPath(projectDir) {
        return new EasJsonAccessor({ projectDir });
    }
    static fromRawString(easJsonRawContents) {
        return new EasJsonAccessor({ easJsonRawContents });
    }
    static formatEasJsonPath(projectDir) {
        return path_1.default.join(projectDir, 'eas.json');
    }
    async readAsync() {
        if (this.easJson) {
            return this.easJson;
        }
        const rawJSON = await this.readRawJsonAsync();
        const { value, error } = schema_1.EasJsonSchema.validate(rawJSON, {
            allowUnknown: false,
            abortEarly: false,
            convert: true,
            noDefaults: true,
        });
        if (error) {
            for (const handler of customErrorMessageHandlers) {
                handler(error);
            }
            const errorMessages = error.message.split('. ');
            throw new errors_1.InvalidEasJsonError(`${chalk_1.default.bold('eas.json')} is not valid.\n- ${errorMessages.join('\n- ')}`);
        }
        this.easJson = value;
        return value;
    }
    async writeAsync() {
        if (!this.easJsonPath) {
            throw new Error('Updates are not supported for EasJsonAccessor created from string.');
        }
        if (!this.easJsonPatched || !this.easJsonRawContents) {
            return;
        }
        await fs_extra_1.default.writeFile(this.easJsonPath, this.easJsonRawContents);
        this.resetState();
    }
    patch(fn) {
        if (!this.easJsonPath) {
            throw new Error('Updates are not supported for EasJsonAccessor created from string.');
        }
        (0, assert_1.default)(this.easJsonRawContents && this.easJsonRawObject, 'call readAsync/readRawJsonAsync first');
        this.easJsonRawObject = fn(this.easJsonRawObject);
        if (this.isJson5) {
            this.easJsonRawContents = fleece.patch(this.easJsonRawContents, this.easJsonRawObject);
        }
        else {
            this.easJsonRawContents = `${JSON.stringify(this.easJsonRawObject, null, 2)}\n`;
        }
        this.easJsonPatched = true;
    }
    async readRawJsonAsync() {
        if (this.easJsonPath) {
            if (!(await fs_extra_1.default.pathExists(this.easJsonPath))) {
                throw new errors_1.MissingEasJsonError(`${chalk_1.default.bold('eas.json')} could not be found at ${this.easJsonPath}. Learn more at https://expo.fyi/eas-json`);
            }
            this.easJsonRawContents = await fs_extra_1.default.readFile(this.easJsonPath, 'utf-8');
        }
        return this.parseRawJson();
    }
    parseRawJson() {
        (0, assert_1.default)(this.easJsonRawContents !== undefined, 'easJsonRawContents needs to be set before calling parseRawJson');
        if (this.easJsonRawContents.trim().length === 0) {
            throw new errors_1.InvalidEasJsonError(`${chalk_1.default.bold('eas.json')} is empty.`);
        }
        try {
            const rawJSON = JSON.parse(this.easJsonRawContents);
            this.easJsonRawObject = rawJSON;
            return rawJSON;
        }
        catch {
            // ignore error, try reading as JSON5
        }
        try {
            const rawJSON = fleece.evaluate(this.easJsonRawContents);
            this.easJsonRawObject = rawJSON;
            this.isJson5 = true;
            return rawJSON;
        }
        catch (originalError) {
            if (originalError.loc) {
                const err = new errors_1.InvalidEasJsonError(`Found invalid character in ${chalk_1.default.bold('eas.json')}.`);
                const codeFrame = (0, code_frame_1.codeFrameColumns)(this.easJsonRawContents, { start: originalError.loc });
                err.message += `\n${codeFrame}`;
                throw err;
            }
            else {
                throw new errors_1.InvalidEasJsonError(`Found invalid JSON in ${chalk_1.default.bold('eas.json')}.`);
            }
        }
    }
    resetState() {
        this.isJson5 = false;
        this.easJson = undefined;
        this.easJsonRawContents = undefined;
        this.easJsonRawObject = undefined;
        this.easJsonPatched = false;
    }
}
exports.EasJsonAccessor = EasJsonAccessor;
