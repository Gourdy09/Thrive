"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildProfileSchema = void 0;
const tslib_1 = require("tslib");
const joi_1 = tslib_1.__importDefault(require("joi"));
const semver_1 = tslib_1.__importDefault(require("semver"));
const types_1 = require("./types");
const AllowedCommonResourceClasses = [
    types_1.ResourceClass.DEFAULT,
    types_1.ResourceClass.MEDIUM,
    types_1.ResourceClass.LARGE,
];
const AllowedAndroidResourceClasses = AllowedCommonResourceClasses;
const AllowedIosResourceClasses = [
    ...AllowedCommonResourceClasses,
    types_1.ResourceClass.M1_MEDIUM,
    types_1.ResourceClass.M_MEDIUM,
    types_1.ResourceClass.M_LARGE,
];
const CacheSchema = joi_1.default.object({
    disabled: joi_1.default.boolean(),
    key: joi_1.default.string().max(128),
    cacheDefaultPaths: joi_1.default.boolean(),
    customPaths: joi_1.default.array().items(joi_1.default.string()),
    paths: joi_1.default.array().items(joi_1.default.string()),
})
    .rename('customPaths', 'paths')
    .messages({
    'object.rename.override': 'Cannot provide both "cache.customPaths" and "cache.paths" - use "cache.paths"',
});
const CommonBuildProfileSchema = joi_1.default.object({
    // builder
    resourceClass: joi_1.default.string().valid(...AllowedCommonResourceClasses),
    // build environment
    env: joi_1.default.object().pattern(joi_1.default.string(), joi_1.default.string().empty(null)),
    node: joi_1.default.string().empty(null).custom(semverCheck),
    pnpm: joi_1.default.string().empty(null).custom(semverCheck),
    bun: joi_1.default.string().empty(null).custom(semverCheck),
    yarn: joi_1.default.string().empty(null).custom(semverCheck),
    expoCli: joi_1.default.string().empty(null).custom(semverCheck),
    // credentials
    credentialsSource: joi_1.default.string().valid('local', 'remote').default('remote'),
    distribution: joi_1.default.string().valid('store', 'internal').default('store'),
    // updates
    releaseChannel: joi_1.default.string().regex(/^[a-z\d][a-z\d._-]*$/),
    channel: joi_1.default.string().regex(/^[a-z\d][a-z\d._-]*$/),
    // build configuration
    developmentClient: joi_1.default.boolean(),
    prebuildCommand: joi_1.default.string(),
    // versions
    autoIncrement: joi_1.default.alternatives().try(joi_1.default.boolean()),
    // artifacts
    buildArtifactPaths: joi_1.default.array().items(joi_1.default.string()),
    // cache
    cache: CacheSchema,
    // custom build configuration
    config: joi_1.default.string(),
    // credentials
    withoutCredentials: joi_1.default.boolean(),
    environment: joi_1.default.string().valid('preview', 'production', 'development'),
});
const PlatformBuildProfileSchema = CommonBuildProfileSchema.concat(joi_1.default.object({
    // build environment
    image: joi_1.default.string(),
    // artifacts
    artifactPath: joi_1.default.string(),
    applicationArchivePath: joi_1.default.string(),
}).oxor('artifactPath', 'applicationArchivePath'));
const AndroidBuildProfileSchema = PlatformBuildProfileSchema.concat(joi_1.default.object({
    // builder
    resourceClass: joi_1.default.string().valid(...AllowedAndroidResourceClasses),
    // build environment
    ndk: joi_1.default.string().empty(null).custom(semverCheck),
    // build configuration
    gradleCommand: joi_1.default.string(),
    buildType: joi_1.default.string().valid('apk', 'app-bundle'),
    // versions
    autoIncrement: joi_1.default.alternatives().try(joi_1.default.boolean(), joi_1.default.string().valid('version', 'versionCode')),
}));
const IosBuildProfileSchema = PlatformBuildProfileSchema.concat(joi_1.default.object({
    // builder
    resourceClass: joi_1.default.string().valid(...AllowedIosResourceClasses),
    // build environment
    bundler: joi_1.default.string().empty(null).custom(semverCheck),
    fastlane: joi_1.default.string().empty(null).custom(semverCheck),
    cocoapods: joi_1.default.string().empty(null).custom(semverCheck),
    // credentials
    enterpriseProvisioning: joi_1.default.string().valid('adhoc', 'universal'),
    // build configuration
    simulator: joi_1.default.boolean(),
    scheme: joi_1.default.string(),
    buildConfiguration: joi_1.default.string(),
    // versions
    autoIncrement: joi_1.default.alternatives().try(joi_1.default.boolean(), joi_1.default.string().valid('version', 'buildNumber')),
}));
exports.BuildProfileSchema = CommonBuildProfileSchema.concat(joi_1.default.object({
    extends: joi_1.default.string(),
    android: AndroidBuildProfileSchema,
    ios: IosBuildProfileSchema,
}));
function semverCheck(value) {
    if (semver_1.default.valid(value)) {
        return value;
    }
    else {
        throw new Error(`${value} is not a valid version`);
    }
}
