"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pipeSpawnOutput = exports.pipe = exports.PipeMode = void 0;
function pipe(stream, loggerFn, lineTransformer) {
    const multilineLogger = createMultilineLogger(loggerFn, lineTransformer);
    stream.on('data', multilineLogger);
}
exports.pipe = pipe;
var PipeMode;
(function (PipeMode) {
    /**
     * Pipe both stdout and stderr to logger
     */
    PipeMode[PipeMode["COMBINED"] = 0] = "COMBINED";
    /**
     * Pipe both stdout and stderr to logger, but tag stderr as stdout
     */
    PipeMode[PipeMode["COMBINED_AS_STDOUT"] = 1] = "COMBINED_AS_STDOUT";
    /**
     * Pipe stderr to logger, but tag it as stdout. Do not pipe stdout
     * at all.
     */
    PipeMode[PipeMode["STDERR_ONLY_AS_STDOUT"] = 2] = "STDERR_ONLY_AS_STDOUT";
})(PipeMode || (exports.PipeMode = PipeMode = {}));
function pipeSpawnOutput(logger, { stdout, stderr } = {}, { mode = PipeMode.COMBINED, lineTransformer, infoCallbackFn } = {}) {
    if (stdout && [PipeMode.COMBINED, PipeMode.COMBINED_AS_STDOUT].includes(mode)) {
        const stdoutLogger = logger.child({ source: 'stdout' });
        pipe(stdout, (line) => {
            stdoutLogger.info(line);
            infoCallbackFn === null || infoCallbackFn === void 0 ? void 0 : infoCallbackFn();
        }, lineTransformer);
    }
    if (stderr) {
        const stderrLogger = logger.child({
            source: [PipeMode.STDERR_ONLY_AS_STDOUT, PipeMode.COMBINED_AS_STDOUT].includes(mode)
                ? 'stdout'
                : 'stderr',
        });
        pipe(stderr, (line) => {
            stderrLogger.info(line);
            infoCallbackFn === null || infoCallbackFn === void 0 ? void 0 : infoCallbackFn();
        }, lineTransformer);
    }
}
exports.pipeSpawnOutput = pipeSpawnOutput;
function createMultilineLogger(loggerFn, transformer) {
    return (data) => {
        if (!data) {
            return;
        }
        const lines = String(data).trim().split('\n');
        lines.forEach((line) => {
            if (transformer) {
                const transformedLine = transformer(line);
                if (transformedLine) {
                    loggerFn(transformedLine);
                }
            }
            else {
                loggerFn(line);
            }
        });
    };
}
//# sourceMappingURL=pipe.js.map