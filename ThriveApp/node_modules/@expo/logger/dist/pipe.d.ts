/// <reference types="node" />
import { Readable } from 'stream';
import type bunyan from 'bunyan';
type LineLogger = (line: string) => void;
type LineTransformer = (line: string) => string | null;
interface SpawnOutput {
    stdout?: Readable | null;
    stderr?: Readable | null;
}
export interface PipeOptions {
    mode?: PipeMode;
    lineTransformer?: LineTransformer;
    infoCallbackFn?: () => void;
}
declare function pipe(stream: Readable, loggerFn: LineLogger, lineTransformer?: LineTransformer): void;
export declare enum PipeMode {
    /**
     * Pipe both stdout and stderr to logger
     */
    COMBINED = 0,
    /**
     * Pipe both stdout and stderr to logger, but tag stderr as stdout
     */
    COMBINED_AS_STDOUT = 1,
    /**
     * Pipe stderr to logger, but tag it as stdout. Do not pipe stdout
     * at all.
     */
    STDERR_ONLY_AS_STDOUT = 2
}
declare function pipeSpawnOutput(logger: bunyan, { stdout, stderr }?: SpawnOutput, { mode, lineTransformer, infoCallbackFn }?: PipeOptions): void;
export { pipe, pipeSpawnOutput };
