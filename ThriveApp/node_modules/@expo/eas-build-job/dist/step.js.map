{"version":3,"file":"step.js","sourceRoot":"","sources":["../src/step.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AAExB,MAAM,WAAW,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB,QAAQ,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;CACjC,CAAC,CAAC;AAEH,MAAM,WAAW,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3B;;;;;OAKG;IACH,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACzB;;;OAGG;IACH,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACzB;;;;;OAKG;IACH,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC3B;;;;;;;OAOG;IACH,iBAAiB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACxC;;;;;;;OAOG;IACH,GAAG,EAAE,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;CACrC,CAAC,CAAC;AAEU,QAAA,aAAa,GAAG,WAAW,CAAC,MAAM,CAAC;IAC9C;;;;;;;;;OASG;IACH,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB;;;;;;;;;;;;OAYG;IACH,IAAI,EAAE,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,KAAK,CAAC,CAAC,OAAC,CAAC,MAAM,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE;IAE5F,GAAG,EAAE,OAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;IACzB,KAAK,EAAE,OAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;IAC3B,OAAO,EAAE,OAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;CAC9B,CAAC,CAAC;AAIU,QAAA,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC;IAC3C;;;;;;;;;;;OAWG;IACH,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;IACf;;;;;;;OAOG;IACH,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC5B;;;;;;;;;;OAUG;IACH,OAAO,EAAE,OAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,QAAQ,EAAE;IAExC,IAAI,EAAE,OAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;IAC1B,IAAI,EAAE,OAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;CAC3B,CAAC,CAAC;AAIU,QAAA,KAAK,GAAG,OAAC,CAAC,KAAK,CAAC,CAAC,kBAAU,EAAE,qBAAa,CAAC,CAAC,CAAC;AAwB1D,SAAgB,aAAa,CAAC,UAAmB;IAC/C,MAAM,KAAK,GAAG,OAAC,CAAC,KAAK,CAAC,aAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACtD,OAAO,KAAK,CAAC;AACf,CAAC;AAHD,sCAGC;AAED,SAAgB,eAAe,CAAC,IAAU;IACxC,OAAO,IAAI,CAAC,GAAG,KAAK,SAAS,CAAC;AAChC,CAAC;AAFD,0CAEC;AAED,SAAgB,kBAAkB,CAAC,IAAU;IAC3C,OAAO,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC;AACjC,CAAC;AAFD,gDAEC","sourcesContent":["import { z } from 'zod';\n\nconst StepOutputZ = z.object({\n  name: z.string(),\n  required: z.boolean().optional(),\n});\n\nconst CommonStepZ = z.object({\n  /**\n   * Unique identifier for the step.\n   *\n   * @example\n   * id: step1\n   */\n  id: z.string().optional(),\n  /**\n   * Expression that determines whether the step should run.\n   * Based on the GitHub Actions job step `if` field (https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsif).\n   */\n  if: z.string().optional(),\n  /**\n   * The name of the step.\n   *\n   * @example\n   * name: 'Step 1'\n   */\n  name: z.string().optional(),\n  /**\n   * The working directory to run the step in.\n   *\n   * @example\n   * working_directory: ./my-working-directory\n   *\n   * @default depends on the project settings\n   */\n  working_directory: z.string().optional(),\n  /**\n   * Env variables override for the step.\n   *\n   * @example\n   * env:\n   *   MY_ENV_VAR: my-value\n   *   ANOTHER_ENV_VAR: another-value\n   */\n  env: z.record(z.string()).optional(),\n});\n\nexport const FunctionStepZ = CommonStepZ.extend({\n  /**\n   * The custom EAS function to run as a step.\n   * It can be a function provided by EAS or a custom function defined by the user.\n   *\n   * @example\n   * uses: eas/build\n   *\n   * @example\n   * uses: my-custom-function\n   */\n  uses: z.string(),\n  /**\n   * The arguments to pass to the function.\n   *\n   * @example\n   * with:\n   *   arg1: value1\n   *   arg2: ['ala', 'ma', 'kota']\n   *   arg3:\n   *     key1: value1\n   *     key2:\n   *      - value1\n   *   arg4: ${{ steps.step1.outputs.test }}\n   */\n  with: z.record(z.union([z.string(), z.number(), z.record(z.any())], z.boolean())).optional(),\n\n  run: z.never().optional(),\n  shell: z.never().optional(),\n  outputs: z.never().optional(),\n});\n\nexport type FunctionStep = z.infer<typeof FunctionStepZ>;\n\nexport const ShellStepZ = CommonStepZ.extend({\n  /**\n   * The command-line programs to run as a step.\n   *\n   * @example\n   * run: echo Hello, world!\n   *\n   * @example\n   * run: |\n   *  npm install\n   *  npx expo prebuild\n   *  pod install\n   */\n  run: z.string(),\n  /**\n   * The shell to run the \"run\" command with.\n   *\n   * @example\n   * shell: 'sh'\n   *\n   * @default 'bash'\n   */\n  shell: z.string().optional(),\n  /**\n   * The outputs of the step.\n   *\n   * @example\n   * outputs:\n   *  - name: my_output\n   *    required: true\n   *  - name: my_optional_output\n   *    required: false\n   *  - name: my_optional_output_without_required\n   */\n  outputs: z.array(StepOutputZ).optional(),\n\n  uses: z.never().optional(),\n  with: z.never().optional(),\n});\n\nexport type ShellStep = z.infer<typeof ShellStepZ>;\n\nexport const StepZ = z.union([ShellStepZ, FunctionStepZ]);\n\n/**\n * Structure of a custom EAS job step.\n *\n * GHA step fields skipped here:\n * - `with.entrypoint`\n * - `continue-on-error`\n * - `timeout-minutes`\n *\n * * @example\n * steps:\n *  - uses: eas/maestro-test\n *    id: step1\n *    name: Step 1\n *    with:\n *      flow_path: |\n *        maestro/sign_in.yaml\n *        maestro/create_post.yaml\n *        maestro/sign_out.yaml\n *  - run: echo Hello, world!\n */\nexport type Step = z.infer<typeof StepZ>;\n\nexport function validateSteps(maybeSteps: unknown): Step[] {\n  const steps = z.array(StepZ).min(1).parse(maybeSteps);\n  return steps;\n}\n\nexport function isStepShellStep(step: Step): step is ShellStep {\n  return step.run !== undefined;\n}\n\nexport function isStepFunctionStep(step: Step): step is FunctionStep {\n  return step.uses !== undefined;\n}\n"]}