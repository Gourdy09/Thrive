"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeMetadata = exports.MetadataSchema = exports.FingerprintSourceType = void 0;
const joi_1 = __importDefault(require("joi"));
var FingerprintSourceType;
(function (FingerprintSourceType) {
    FingerprintSourceType["GCS"] = "GCS";
    FingerprintSourceType["PATH"] = "PATH";
    FingerprintSourceType["URL"] = "URL";
})(FingerprintSourceType || (exports.FingerprintSourceType = FingerprintSourceType = {}));
const FingerprintSourceSchema = joi_1.default.object({
    type: joi_1.default.string()
        .valid(...Object.values(FingerprintSourceType))
        .required(),
    isDebugFingerprint: joi_1.default.boolean(),
})
    .when(joi_1.default.object({ type: FingerprintSourceType.GCS }).unknown(), {
    then: joi_1.default.object({
        type: joi_1.default.string().valid(FingerprintSourceType.GCS).required(),
        bucketKey: joi_1.default.string().required(),
    }),
})
    .when(joi_1.default.object({ type: FingerprintSourceType.PATH }).unknown(), {
    then: joi_1.default.object({
        type: joi_1.default.string().valid(FingerprintSourceType.PATH).required(),
        path: joi_1.default.string().required(),
    }),
})
    .when(joi_1.default.object({ type: FingerprintSourceType.URL }).unknown(), {
    then: joi_1.default.object({
        type: joi_1.default.string().valid(FingerprintSourceType.URL).required(),
        url: joi_1.default.string().uri().required(),
    }),
});
exports.MetadataSchema = joi_1.default.object({
    trackingContext: joi_1.default.object()
        .pattern(joi_1.default.string(), [joi_1.default.string(), joi_1.default.number(), joi_1.default.boolean()])
        .required(),
    appVersion: joi_1.default.string(),
    appBuildVersion: joi_1.default.string(),
    cliVersion: joi_1.default.string(),
    workflow: joi_1.default.string().valid('generic', 'managed'),
    distribution: joi_1.default.string().valid('store', 'internal', 'simulator'),
    credentialsSource: joi_1.default.string().valid('local', 'remote'),
    sdkVersion: joi_1.default.string(),
    runtimeVersion: joi_1.default.string(),
    fingerprintSource: FingerprintSourceSchema,
    reactNativeVersion: joi_1.default.string(),
    channel: joi_1.default.string(),
    appName: joi_1.default.string(),
    appIdentifier: joi_1.default.string(),
    buildProfile: joi_1.default.string(),
    gitCommitHash: joi_1.default.string().length(40).hex(),
    gitCommitMessage: joi_1.default.string().max(4096),
    isGitWorkingTreeDirty: joi_1.default.boolean(),
    username: joi_1.default.string(),
    iosEnterpriseProvisioning: joi_1.default.string().valid('adhoc', 'universal'),
    message: joi_1.default.string().max(1024),
    runFromCI: joi_1.default.boolean(),
    runWithNoWaitFlag: joi_1.default.boolean(),
    customWorkflowName: joi_1.default.string(),
    developmentClient: joi_1.default.boolean(),
    requiredPackageManager: joi_1.default.string().valid('npm', 'pnpm', 'yarn', 'bun'),
    simulator: joi_1.default.boolean(),
    selectedImage: joi_1.default.string(),
    customNodeVersion: joi_1.default.string(),
    environment: joi_1.default.string().valid('production', 'preview', 'development'),
});
function sanitizeMetadata(metadata) {
    const { value, error } = exports.MetadataSchema.validate(metadata, {
        stripUnknown: true,
        convert: true,
        abortEarly: false,
    });
    if (error) {
        throw error;
    }
    else {
        return value;
    }
}
exports.sanitizeMetadata = sanitizeMetadata;
//# sourceMappingURL=metadata.js.map