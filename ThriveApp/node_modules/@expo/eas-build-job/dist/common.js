"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheSchema = exports.EnvironmentSecretZ = exports.EnvironmentSecretsSchema = exports.EnvironmentSecretType = exports.EnvSchema = exports.ArchiveSourceSchemaZ = exports.ArchiveSourceSchema = exports.BuildTrigger = exports.ArchiveSourceType = exports.Platform = exports.Workflow = exports.BuildMode = void 0;
const joi_1 = __importDefault(require("joi"));
const zod_1 = require("zod");
var BuildMode;
(function (BuildMode) {
    BuildMode["BUILD"] = "build";
    BuildMode["RESIGN"] = "resign";
    BuildMode["CUSTOM"] = "custom";
    BuildMode["REPACK"] = "repack";
})(BuildMode || (exports.BuildMode = BuildMode = {}));
var Workflow;
(function (Workflow) {
    Workflow["GENERIC"] = "generic";
    Workflow["MANAGED"] = "managed";
    Workflow["UNKNOWN"] = "unknown";
})(Workflow || (exports.Workflow = Workflow = {}));
var Platform;
(function (Platform) {
    Platform["ANDROID"] = "android";
    Platform["IOS"] = "ios";
})(Platform || (exports.Platform = Platform = {}));
var ArchiveSourceType;
(function (ArchiveSourceType) {
    ArchiveSourceType["NONE"] = "NONE";
    ArchiveSourceType["URL"] = "URL";
    ArchiveSourceType["PATH"] = "PATH";
    ArchiveSourceType["GCS"] = "GCS";
    ArchiveSourceType["GIT"] = "GIT";
})(ArchiveSourceType || (exports.ArchiveSourceType = ArchiveSourceType = {}));
var BuildTrigger;
(function (BuildTrigger) {
    BuildTrigger["EAS_CLI"] = "EAS_CLI";
    BuildTrigger["GIT_BASED_INTEGRATION"] = "GIT_BASED_INTEGRATION";
})(BuildTrigger || (exports.BuildTrigger = BuildTrigger = {}));
exports.ArchiveSourceSchema = joi_1.default.object({
    type: joi_1.default.string()
        .valid(...Object.values(ArchiveSourceType))
        .required(),
})
    .when(joi_1.default.object({ type: ArchiveSourceType.GCS }).unknown(), {
    then: joi_1.default.object({
        type: joi_1.default.string().valid(ArchiveSourceType.GCS).required(),
        bucketKey: joi_1.default.string().required(),
        metadataLocation: joi_1.default.string(),
    }),
})
    .when(joi_1.default.object({ type: ArchiveSourceType.URL }).unknown(), {
    then: joi_1.default.object({
        type: joi_1.default.string().valid(ArchiveSourceType.URL).required(),
        url: joi_1.default.string().uri().required(),
    }),
})
    .when(joi_1.default.object({ type: ArchiveSourceType.GIT }).unknown(), {
    then: joi_1.default.object({
        type: joi_1.default.string().valid(ArchiveSourceType.GIT).required(),
        repositoryUrl: joi_1.default.string().required(),
        gitCommitHash: joi_1.default.string().required(),
        gitRef: joi_1.default.string().allow(null).required(),
    }),
})
    .when(joi_1.default.object({ type: ArchiveSourceType.PATH }).unknown(), {
    then: joi_1.default.object({
        type: joi_1.default.string().valid(ArchiveSourceType.PATH).required(),
        path: joi_1.default.string().required(),
    }),
});
exports.ArchiveSourceSchemaZ = zod_1.z.discriminatedUnion('type', [
    zod_1.z.object({
        type: zod_1.z.literal(ArchiveSourceType.GIT),
        repositoryUrl: zod_1.z.string().url(),
        gitRef: zod_1.z.string().nullable(),
        gitCommitHash: zod_1.z.string(),
    }),
    zod_1.z.object({
        type: zod_1.z.literal(ArchiveSourceType.PATH),
        path: zod_1.z.string(),
    }),
    zod_1.z.object({
        type: zod_1.z.literal(ArchiveSourceType.URL),
        url: zod_1.z.string().url(),
    }),
    zod_1.z.object({
        type: zod_1.z.literal(ArchiveSourceType.GCS),
        bucketKey: zod_1.z.string(),
        metadataLocation: zod_1.z.string().optional(),
    }),
]);
exports.EnvSchema = joi_1.default.object().pattern(joi_1.default.string(), joi_1.default.string());
var EnvironmentSecretType;
(function (EnvironmentSecretType) {
    EnvironmentSecretType["STRING"] = "string";
    EnvironmentSecretType["FILE"] = "file";
})(EnvironmentSecretType || (exports.EnvironmentSecretType = EnvironmentSecretType = {}));
exports.EnvironmentSecretsSchema = joi_1.default.array().items(joi_1.default.object({
    name: joi_1.default.string().required(),
    value: joi_1.default.string().allow('').required(),
    type: joi_1.default.string()
        .valid(...Object.values(EnvironmentSecretType))
        .required(),
}));
exports.EnvironmentSecretZ = zod_1.z.object({
    name: zod_1.z.string(),
    value: zod_1.z.string(),
    type: zod_1.z.nativeEnum(EnvironmentSecretType),
});
exports.CacheSchema = joi_1.default.object({
    disabled: joi_1.default.boolean().default(false),
    clear: joi_1.default.boolean().default(false),
    key: joi_1.default.string().allow('').max(128),
    cacheDefaultPaths: joi_1.default.boolean(),
    customPaths: joi_1.default.array().items(joi_1.default.string()),
    paths: joi_1.default.array().items(joi_1.default.string()).default([]),
});
//# sourceMappingURL=common.js.map