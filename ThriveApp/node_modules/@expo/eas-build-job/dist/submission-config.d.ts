import { z } from 'zod';
/** Submission config as used by the submission worker. */
export declare namespace SubmissionConfig {
    type Ios = z.infer<typeof Ios.SchemaZ>;
    type Android = z.infer<typeof Android.SchemaZ>;
    namespace Ios {
        const SchemaZ: z.ZodIntersection<z.ZodObject<{
            /**
             * App Store Connect unique App ID
             */
            ascAppIdentifier: z.ZodString;
            isVerboseFastlaneEnabled: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            ascAppIdentifier: string;
            isVerboseFastlaneEnabled?: boolean | undefined;
        }, {
            ascAppIdentifier: string;
            isVerboseFastlaneEnabled?: boolean | undefined;
        }>, z.ZodUnion<[z.ZodObject<{
            appleIdUsername: z.ZodString;
            appleAppSpecificPassword: z.ZodString;
            ascApiJsonKey: z.ZodOptional<z.ZodNever>;
        }, "strip", z.ZodTypeAny, {
            appleIdUsername: string;
            appleAppSpecificPassword: string;
            ascApiJsonKey?: undefined;
        }, {
            appleIdUsername: string;
            appleAppSpecificPassword: string;
            ascApiJsonKey?: undefined;
        }>, z.ZodObject<{
            /**
             * ASC API JSON token example:
             * {
             *  key_id: "D383SF739",
             *  issuer_id: "6053b7fe-68a8-4acb-89be-165aa6465141",
             *  key: "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM\n-----END PRIVATE KEY--"
             * }
             */
            ascApiJsonKey: z.ZodString;
            appleIdUsername: z.ZodOptional<z.ZodNever>;
            appleAppSpecificPassword: z.ZodOptional<z.ZodNever>;
        }, "strip", z.ZodTypeAny, {
            ascApiJsonKey: string;
            appleIdUsername?: undefined;
            appleAppSpecificPassword?: undefined;
        }, {
            ascApiJsonKey: string;
            appleIdUsername?: undefined;
            appleAppSpecificPassword?: undefined;
        }>]>>;
    }
    namespace Android {
        enum ReleaseStatus {
            COMPLETED = "completed",
            DRAFT = "draft",
            HALTED = "halted",
            IN_PROGRESS = "inProgress"
        }
        enum ReleaseTrack {
            PRODUCTION = "production",
            BETA = "beta",
            ALPHA = "alpha",
            INTERNAL = "internal"
        }
        const SchemaZ: z.ZodIntersection<z.ZodObject<{
            track: z.ZodNativeEnum<typeof ReleaseTrack>;
            changesNotSentForReview: z.ZodDefault<z.ZodBoolean>;
            googleServiceAccountKeyJson: z.ZodString;
            isVerboseFastlaneEnabled: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            track: ReleaseTrack;
            changesNotSentForReview: boolean;
            googleServiceAccountKeyJson: string;
            isVerboseFastlaneEnabled?: boolean | undefined;
        }, {
            track: ReleaseTrack;
            googleServiceAccountKeyJson: string;
            isVerboseFastlaneEnabled?: boolean | undefined;
            changesNotSentForReview?: boolean | undefined;
        }>, z.ZodUnion<[z.ZodObject<{
            releaseStatus: z.ZodLiteral<ReleaseStatus.IN_PROGRESS>;
            rollout: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            releaseStatus: ReleaseStatus.IN_PROGRESS;
            rollout: number;
        }, {
            releaseStatus: ReleaseStatus.IN_PROGRESS;
            rollout?: number | undefined;
        }>, z.ZodObject<{
            releaseStatus: z.ZodOptional<z.ZodNativeEnum<typeof ReleaseStatus>>;
            rollout: z.ZodOptional<z.ZodNever>;
        }, "strip", z.ZodTypeAny, {
            releaseStatus?: ReleaseStatus | undefined;
            rollout?: undefined;
        }, {
            releaseStatus?: ReleaseStatus | undefined;
            rollout?: undefined;
        }>]>>;
    }
}
