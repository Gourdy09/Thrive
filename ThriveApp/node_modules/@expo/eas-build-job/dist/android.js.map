{"version":3,"file":"android.js","sourceRoot":"","sources":["../src/android.ts"],"names":[],"mappings":"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","sourcesContent":["import Joi from 'joi';\nimport { LoggerLevel } from '@expo/logger';\n\nimport {\n  ArchiveSource,\n  ArchiveSourceSchema,\n  Env,\n  EnvSchema,\n  Platform,\n  Workflow,\n  Cache,\n  CacheSchema,\n  EnvironmentSecretsSchema,\n  EnvironmentSecret,\n  BuildTrigger,\n  BuildMode,\n} from './common';\n\nexport interface Keystore {\n  dataBase64: string;\n  keystorePassword: string;\n  keyAlias: string;\n  keyPassword?: string;\n}\n\nconst KeystoreSchema = Joi.object({\n  dataBase64: Joi.string().required(),\n  keystorePassword: Joi.string().allow('').required(),\n  keyAlias: Joi.string().required(),\n  keyPassword: Joi.string().allow(''),\n});\n\nexport enum BuildType {\n  APK = 'apk',\n  APP_BUNDLE = 'app-bundle',\n}\n\nexport interface BuilderEnvironment {\n  image?: string;\n  node?: string;\n  pnpm?: string;\n  yarn?: string;\n  bun?: string;\n  ndk?: string;\n  env?: Env;\n}\n\nconst BuilderEnvironmentSchema = Joi.object({\n  image: Joi.string(),\n  node: Joi.string(),\n  yarn: Joi.string(),\n  pnpm: Joi.string(),\n  bun: Joi.string(),\n  ndk: Joi.string(),\n  env: EnvSchema,\n});\n\nexport interface BuildSecrets {\n  buildCredentials?: {\n    keystore: Keystore;\n  };\n  environmentSecrets?: EnvironmentSecret[];\n  robotAccessToken?: string;\n}\n\nexport interface Job {\n  mode: BuildMode;\n  type: Workflow;\n  triggeredBy: BuildTrigger;\n  projectArchive: ArchiveSource;\n  platform: Platform.ANDROID;\n  projectRootDirectory: string;\n  buildProfile?: string;\n  updates?: {\n    channel?: string;\n  };\n  secrets?: BuildSecrets;\n  builderEnvironment?: BuilderEnvironment;\n  cache: Cache;\n  developmentClient?: boolean;\n  version?: {\n    versionCode?: string;\n    /**\n     * support for this field is implemented, but specifying it is disabled on schema level\n     */\n    versionName?: string;\n    /**\n     * support for this field is implemented, but specifying it is disabled on schema level\n     */\n    runtimeVersion?: string;\n  };\n  buildArtifactPaths?: string[];\n\n  gradleCommand?: string;\n  applicationArchivePath?: string;\n\n  buildType?: BuildType;\n  username?: string;\n\n  customBuildConfig?: {\n    path: string;\n  };\n\n  experimental?: {\n    prebuildCommand?: string;\n  };\n  expoBuildUrl?: string;\n  githubTriggerOptions?: {\n    autoSubmit: boolean;\n    submitProfile?: string;\n  };\n  loggerLevel?: LoggerLevel;\n}\n\nconst SecretsSchema = Joi.object({\n  buildCredentials: Joi.object({ keystore: KeystoreSchema.required() }),\n  environmentSecrets: EnvironmentSecretsSchema,\n  robotAccessToken: Joi.string(),\n});\n\nexport const JobSchema = Joi.object({\n  mode: Joi.string()\n    .valid(BuildMode.BUILD, BuildMode.CUSTOM, BuildMode.REPACK)\n    .default(BuildMode.BUILD),\n  type: Joi.string()\n    .valid(...Object.values(Workflow))\n    .required(),\n  triggeredBy: Joi.string()\n    .valid(...Object.values(BuildTrigger))\n    .default(BuildTrigger.EAS_CLI),\n  projectArchive: ArchiveSourceSchema.required(),\n  platform: Joi.string().valid(Platform.ANDROID).required(),\n  projectRootDirectory: Joi.string().required(),\n  buildProfile: Joi.when('triggeredBy', {\n    is: BuildTrigger.GIT_BASED_INTEGRATION,\n    then: Joi.string().required(),\n    otherwise: Joi.string(),\n  }),\n  updates: Joi.object({\n    channel: Joi.string(),\n  }),\n  secrets: Joi.when('mode', {\n    is: Joi.string().valid(BuildMode.CUSTOM),\n    then: SecretsSchema,\n    otherwise: SecretsSchema.required(),\n  }),\n  builderEnvironment: BuilderEnvironmentSchema,\n  cache: CacheSchema.default(),\n  developmentClient: Joi.boolean(),\n  version: Joi.object({\n    versionCode: Joi.string().regex(/^\\d+$/),\n  }),\n  buildArtifactPaths: Joi.array().items(Joi.string()),\n\n  gradleCommand: Joi.string(),\n  applicationArchivePath: Joi.string(),\n\n  buildType: Joi.string().valid(...Object.values(BuildType)),\n  username: Joi.string(),\n\n  customBuildConfig: Joi.when('mode', {\n    is: Joi.string().valid(BuildMode.CUSTOM),\n    then: Joi.object({\n      path: Joi.string(),\n    }).required(),\n    otherwise: Joi.any().strip(),\n  }),\n\n  experimental: Joi.object({\n    prebuildCommand: Joi.string(),\n  }),\n  expoBuildUrl: Joi.string().uri().optional(),\n  githubTriggerOptions: Joi.object({\n    autoSubmit: Joi.boolean().default(false),\n    submitProfile: Joi.string(),\n  }),\n  loggerLevel: Joi.string().valid(...Object.values(LoggerLevel)),\n});\n"]}