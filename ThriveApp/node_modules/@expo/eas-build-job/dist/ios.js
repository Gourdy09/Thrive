"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobSchema = void 0;
const joi_1 = __importDefault(require("joi"));
const logger_1 = require("@expo/logger");
const common_1 = require("./common");
const TargetCredentialsSchema = joi_1.default.object().keys({
    provisioningProfileBase64: joi_1.default.string().required(),
    distributionCertificate: joi_1.default.object({
        dataBase64: joi_1.default.string().required(),
        password: joi_1.default.string().allow('').required(),
    }).required(),
});
const BuildCredentialsSchema = joi_1.default.object().pattern(joi_1.default.string().required(), TargetCredentialsSchema);
const BuilderEnvironmentSchema = joi_1.default.object({
    image: joi_1.default.string(),
    node: joi_1.default.string(),
    yarn: joi_1.default.string(),
    pnpm: joi_1.default.string(),
    bun: joi_1.default.string(),
    bundler: joi_1.default.string(),
    fastlane: joi_1.default.string(),
    cocoapods: joi_1.default.string(),
    env: common_1.EnvSchema,
});
const SecretsSchema = joi_1.default.object({
    buildCredentials: BuildCredentialsSchema,
    environmentSecrets: common_1.EnvironmentSecretsSchema,
    robotAccessToken: joi_1.default.string(),
});
exports.JobSchema = joi_1.default.object({
    mode: joi_1.default.string()
        .valid(...Object.values(common_1.BuildMode))
        .default(common_1.BuildMode.BUILD),
    type: joi_1.default.when('mode', {
        is: joi_1.default.string().valid(common_1.BuildMode.RESIGN),
        then: joi_1.default.string().valid(common_1.Workflow.UNKNOWN).default(common_1.Workflow.UNKNOWN),
        otherwise: joi_1.default.string()
            .valid(...Object.values(common_1.Workflow))
            .required(),
    }),
    triggeredBy: joi_1.default.string()
        .valid(...Object.values(common_1.BuildTrigger))
        .default(common_1.BuildTrigger.EAS_CLI),
    projectArchive: common_1.ArchiveSourceSchema.required(),
    resign: joi_1.default.when('mode', {
        is: joi_1.default.string().valid(common_1.BuildMode.RESIGN),
        then: joi_1.default.object({
            applicationArchiveSource: common_1.ArchiveSourceSchema.required(),
        }).required(),
        otherwise: joi_1.default.any().strip(),
    }),
    platform: joi_1.default.string().valid(common_1.Platform.IOS).required(),
    projectRootDirectory: joi_1.default.when('mode', {
        is: joi_1.default.string().valid(common_1.BuildMode.RESIGN),
        then: joi_1.default.any().strip(),
        otherwise: joi_1.default.string().required(),
    }),
    buildProfile: joi_1.default.when('mode', {
        is: joi_1.default.string().valid(common_1.BuildMode.BUILD),
        then: joi_1.default.when('triggeredBy', {
            is: joi_1.default.string().valid(common_1.BuildTrigger.GIT_BASED_INTEGRATION),
            then: joi_1.default.string().required(),
            otherwise: joi_1.default.string(),
        }),
        otherwise: joi_1.default.string(),
    }),
    updates: joi_1.default.object({
        channel: joi_1.default.string(),
    }),
    secrets: joi_1.default.when('mode', {
        is: joi_1.default.string().valid(common_1.BuildMode.CUSTOM),
        then: SecretsSchema,
        otherwise: SecretsSchema.required(),
    }),
    builderEnvironment: BuilderEnvironmentSchema,
    cache: common_1.CacheSchema.default(),
    developmentClient: joi_1.default.boolean(),
    simulator: joi_1.default.boolean(),
    version: joi_1.default.object({
        buildNumber: joi_1.default.string(),
    }),
    buildArtifactPaths: joi_1.default.array().items(joi_1.default.string()),
    scheme: joi_1.default.string(),
    buildConfiguration: joi_1.default.string(),
    applicationArchivePath: joi_1.default.string(),
    username: joi_1.default.string(),
    customBuildConfig: joi_1.default.when('mode', {
        is: joi_1.default.string().valid(common_1.BuildMode.CUSTOM),
        then: joi_1.default.object({
            path: joi_1.default.string(),
        }).required(),
        otherwise: joi_1.default.any().strip(),
    }),
    experimental: joi_1.default.object({
        prebuildCommand: joi_1.default.string(),
    }),
    expoBuildUrl: joi_1.default.string().uri().optional(),
    githubTriggerOptions: joi_1.default.object({
        autoSubmit: joi_1.default.boolean().default(false),
        submitProfile: joi_1.default.string(),
    }),
    loggerLevel: joi_1.default.string().valid(...Object.values(logger_1.LoggerLevel)),
});
//# sourceMappingURL=ios.js.map