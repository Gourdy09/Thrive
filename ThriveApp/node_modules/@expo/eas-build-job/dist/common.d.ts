import Joi from 'joi';
import { z } from 'zod';
import { BuildPhase, BuildPhaseResult } from './logs';
export declare enum BuildMode {
    BUILD = "build",
    RESIGN = "resign",
    CUSTOM = "custom",
    REPACK = "repack"
}
export declare enum Workflow {
    GENERIC = "generic",
    MANAGED = "managed",
    UNKNOWN = "unknown"
}
export declare enum Platform {
    ANDROID = "android",
    IOS = "ios"
}
export declare enum ArchiveSourceType {
    NONE = "NONE",
    URL = "URL",
    PATH = "PATH",
    GCS = "GCS",
    GIT = "GIT"
}
export declare enum BuildTrigger {
    EAS_CLI = "EAS_CLI",
    GIT_BASED_INTEGRATION = "GIT_BASED_INTEGRATION"
}
export type ArchiveSource = {
    type: ArchiveSourceType.NONE;
} | {
    type: ArchiveSourceType.GCS;
    bucketKey: string;
    metadataLocation?: string;
} | {
    type: ArchiveSourceType.URL;
    url: string;
} | {
    type: ArchiveSourceType.PATH;
    path: string;
} | {
    type: ArchiveSourceType.GIT;
    /**
     * Url that can be used to clone repository.
     * It should contain embedded credentials for private registries.
     */
    repositoryUrl: string;
    /** A Git ref - points to a branch head, tag head or a branch name. */
    gitRef: string | null;
    /**
     * Git commit hash.
     */
    gitCommitHash: string;
};
export declare const ArchiveSourceSchema: Joi.ObjectSchema<ArchiveSource>;
export declare const ArchiveSourceSchemaZ: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<ArchiveSourceType.GIT>;
    repositoryUrl: z.ZodString;
    gitRef: z.ZodNullable<z.ZodString>;
    gitCommitHash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: ArchiveSourceType.GIT;
    repositoryUrl: string;
    gitRef: string | null;
    gitCommitHash: string;
}, {
    type: ArchiveSourceType.GIT;
    repositoryUrl: string;
    gitRef: string | null;
    gitCommitHash: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<ArchiveSourceType.PATH>;
    path: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: ArchiveSourceType.PATH;
    path: string;
}, {
    type: ArchiveSourceType.PATH;
    path: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<ArchiveSourceType.URL>;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: ArchiveSourceType.URL;
    url: string;
}, {
    type: ArchiveSourceType.URL;
    url: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<ArchiveSourceType.GCS>;
    bucketKey: z.ZodString;
    metadataLocation: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: ArchiveSourceType.GCS;
    bucketKey: string;
    metadataLocation?: string | undefined;
}, {
    type: ArchiveSourceType.GCS;
    bucketKey: string;
    metadataLocation?: string | undefined;
}>]>;
export type Env = Record<string, string>;
export declare const EnvSchema: Joi.ObjectSchema<any>;
export type EnvironmentSecret = {
    name: string;
    type: EnvironmentSecretType;
    value: string;
};
export declare enum EnvironmentSecretType {
    STRING = "string",
    FILE = "file"
}
export declare const EnvironmentSecretsSchema: Joi.ArraySchema<any[]>;
export declare const EnvironmentSecretZ: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
    type: z.ZodNativeEnum<typeof EnvironmentSecretType>;
}, "strip", z.ZodTypeAny, {
    type: EnvironmentSecretType;
    value: string;
    name: string;
}, {
    type: EnvironmentSecretType;
    value: string;
    name: string;
}>;
export interface Cache {
    disabled: boolean;
    clear: boolean;
    key?: string;
    /**
     * @deprecated We don't cache anything by default anymore.
     */
    cacheDefaultPaths?: boolean;
    /**
     * @deprecated We use paths now since there is no default caching anymore.
     */
    customPaths?: string[];
    paths: string[];
}
export declare const CacheSchema: Joi.ObjectSchema<any>;
export interface BuildPhaseStats {
    buildPhase: BuildPhase;
    result: BuildPhaseResult;
    durationMs: number;
}
