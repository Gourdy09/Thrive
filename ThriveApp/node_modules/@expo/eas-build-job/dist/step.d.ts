import { z } from 'zod';
export declare const FunctionStepZ: z.ZodObject<z.objectUtil.extendShape<{
    /**
     * Unique identifier for the step.
     *
     * @example
     * id: step1
     */
    id: z.ZodOptional<z.ZodString>;
    /**
     * Expression that determines whether the step should run.
     * Based on the GitHub Actions job step `if` field (https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsif).
     */
    if: z.ZodOptional<z.ZodString>;
    /**
     * The name of the step.
     *
     * @example
     * name: 'Step 1'
     */
    name: z.ZodOptional<z.ZodString>;
    /**
     * The working directory to run the step in.
     *
     * @example
     * working_directory: ./my-working-directory
     *
     * @default depends on the project settings
     */
    working_directory: z.ZodOptional<z.ZodString>;
    /**
     * Env variables override for the step.
     *
     * @example
     * env:
     *   MY_ENV_VAR: my-value
     *   ANOTHER_ENV_VAR: another-value
     */
    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, {
    /**
     * The custom EAS function to run as a step.
     * It can be a function provided by EAS or a custom function defined by the user.
     *
     * @example
     * uses: eas/build
     *
     * @example
     * uses: my-custom-function
     */
    uses: z.ZodString;
    /**
     * The arguments to pass to the function.
     *
     * @example
     * with:
     *   arg1: value1
     *   arg2: ['ala', 'ma', 'kota']
     *   arg3:
     *     key1: value1
     *     key2:
     *      - value1
     *   arg4: ${{ steps.step1.outputs.test }}
     */
    with: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodRecord<z.ZodString, z.ZodAny>]>>>;
    run: z.ZodOptional<z.ZodNever>;
    shell: z.ZodOptional<z.ZodNever>;
    outputs: z.ZodOptional<z.ZodNever>;
}>, "strip", z.ZodTypeAny, {
    uses: string;
    name?: string | undefined;
    env?: Record<string, string> | undefined;
    id?: string | undefined;
    if?: string | undefined;
    working_directory?: string | undefined;
    with?: Record<string, string | number | Record<string, any>> | undefined;
    run?: undefined;
    shell?: undefined;
    outputs?: undefined;
}, {
    uses: string;
    name?: string | undefined;
    env?: Record<string, string> | undefined;
    id?: string | undefined;
    if?: string | undefined;
    working_directory?: string | undefined;
    with?: Record<string, string | number | Record<string, any>> | undefined;
    run?: undefined;
    shell?: undefined;
    outputs?: undefined;
}>;
export type FunctionStep = z.infer<typeof FunctionStepZ>;
export declare const ShellStepZ: z.ZodObject<z.objectUtil.extendShape<{
    /**
     * Unique identifier for the step.
     *
     * @example
     * id: step1
     */
    id: z.ZodOptional<z.ZodString>;
    /**
     * Expression that determines whether the step should run.
     * Based on the GitHub Actions job step `if` field (https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsif).
     */
    if: z.ZodOptional<z.ZodString>;
    /**
     * The name of the step.
     *
     * @example
     * name: 'Step 1'
     */
    name: z.ZodOptional<z.ZodString>;
    /**
     * The working directory to run the step in.
     *
     * @example
     * working_directory: ./my-working-directory
     *
     * @default depends on the project settings
     */
    working_directory: z.ZodOptional<z.ZodString>;
    /**
     * Env variables override for the step.
     *
     * @example
     * env:
     *   MY_ENV_VAR: my-value
     *   ANOTHER_ENV_VAR: another-value
     */
    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, {
    /**
     * The command-line programs to run as a step.
     *
     * @example
     * run: echo Hello, world!
     *
     * @example
     * run: |
     *  npm install
     *  npx expo prebuild
     *  pod install
     */
    run: z.ZodString;
    /**
     * The shell to run the "run" command with.
     *
     * @example
     * shell: 'sh'
     *
     * @default 'bash'
     */
    shell: z.ZodOptional<z.ZodString>;
    /**
     * The outputs of the step.
     *
     * @example
     * outputs:
     *  - name: my_output
     *    required: true
     *  - name: my_optional_output
     *    required: false
     *  - name: my_optional_output_without_required
     */
    outputs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        required: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        required?: boolean | undefined;
    }, {
        name: string;
        required?: boolean | undefined;
    }>, "many">>;
    uses: z.ZodOptional<z.ZodNever>;
    with: z.ZodOptional<z.ZodNever>;
}>, "strip", z.ZodTypeAny, {
    run: string;
    name?: string | undefined;
    env?: Record<string, string> | undefined;
    id?: string | undefined;
    if?: string | undefined;
    working_directory?: string | undefined;
    uses?: undefined;
    with?: undefined;
    shell?: string | undefined;
    outputs?: {
        name: string;
        required?: boolean | undefined;
    }[] | undefined;
}, {
    run: string;
    name?: string | undefined;
    env?: Record<string, string> | undefined;
    id?: string | undefined;
    if?: string | undefined;
    working_directory?: string | undefined;
    uses?: undefined;
    with?: undefined;
    shell?: string | undefined;
    outputs?: {
        name: string;
        required?: boolean | undefined;
    }[] | undefined;
}>;
export type ShellStep = z.infer<typeof ShellStepZ>;
export declare const StepZ: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    /**
     * Unique identifier for the step.
     *
     * @example
     * id: step1
     */
    id: z.ZodOptional<z.ZodString>;
    /**
     * Expression that determines whether the step should run.
     * Based on the GitHub Actions job step `if` field (https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsif).
     */
    if: z.ZodOptional<z.ZodString>;
    /**
     * The name of the step.
     *
     * @example
     * name: 'Step 1'
     */
    name: z.ZodOptional<z.ZodString>;
    /**
     * The working directory to run the step in.
     *
     * @example
     * working_directory: ./my-working-directory
     *
     * @default depends on the project settings
     */
    working_directory: z.ZodOptional<z.ZodString>;
    /**
     * Env variables override for the step.
     *
     * @example
     * env:
     *   MY_ENV_VAR: my-value
     *   ANOTHER_ENV_VAR: another-value
     */
    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, {
    /**
     * The command-line programs to run as a step.
     *
     * @example
     * run: echo Hello, world!
     *
     * @example
     * run: |
     *  npm install
     *  npx expo prebuild
     *  pod install
     */
    run: z.ZodString;
    /**
     * The shell to run the "run" command with.
     *
     * @example
     * shell: 'sh'
     *
     * @default 'bash'
     */
    shell: z.ZodOptional<z.ZodString>;
    /**
     * The outputs of the step.
     *
     * @example
     * outputs:
     *  - name: my_output
     *    required: true
     *  - name: my_optional_output
     *    required: false
     *  - name: my_optional_output_without_required
     */
    outputs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        required: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        required?: boolean | undefined;
    }, {
        name: string;
        required?: boolean | undefined;
    }>, "many">>;
    uses: z.ZodOptional<z.ZodNever>;
    with: z.ZodOptional<z.ZodNever>;
}>, "strip", z.ZodTypeAny, {
    run: string;
    name?: string | undefined;
    env?: Record<string, string> | undefined;
    id?: string | undefined;
    if?: string | undefined;
    working_directory?: string | undefined;
    uses?: undefined;
    with?: undefined;
    shell?: string | undefined;
    outputs?: {
        name: string;
        required?: boolean | undefined;
    }[] | undefined;
}, {
    run: string;
    name?: string | undefined;
    env?: Record<string, string> | undefined;
    id?: string | undefined;
    if?: string | undefined;
    working_directory?: string | undefined;
    uses?: undefined;
    with?: undefined;
    shell?: string | undefined;
    outputs?: {
        name: string;
        required?: boolean | undefined;
    }[] | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    /**
     * Unique identifier for the step.
     *
     * @example
     * id: step1
     */
    id: z.ZodOptional<z.ZodString>;
    /**
     * Expression that determines whether the step should run.
     * Based on the GitHub Actions job step `if` field (https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsif).
     */
    if: z.ZodOptional<z.ZodString>;
    /**
     * The name of the step.
     *
     * @example
     * name: 'Step 1'
     */
    name: z.ZodOptional<z.ZodString>;
    /**
     * The working directory to run the step in.
     *
     * @example
     * working_directory: ./my-working-directory
     *
     * @default depends on the project settings
     */
    working_directory: z.ZodOptional<z.ZodString>;
    /**
     * Env variables override for the step.
     *
     * @example
     * env:
     *   MY_ENV_VAR: my-value
     *   ANOTHER_ENV_VAR: another-value
     */
    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, {
    /**
     * The custom EAS function to run as a step.
     * It can be a function provided by EAS or a custom function defined by the user.
     *
     * @example
     * uses: eas/build
     *
     * @example
     * uses: my-custom-function
     */
    uses: z.ZodString;
    /**
     * The arguments to pass to the function.
     *
     * @example
     * with:
     *   arg1: value1
     *   arg2: ['ala', 'ma', 'kota']
     *   arg3:
     *     key1: value1
     *     key2:
     *      - value1
     *   arg4: ${{ steps.step1.outputs.test }}
     */
    with: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodRecord<z.ZodString, z.ZodAny>]>>>;
    run: z.ZodOptional<z.ZodNever>;
    shell: z.ZodOptional<z.ZodNever>;
    outputs: z.ZodOptional<z.ZodNever>;
}>, "strip", z.ZodTypeAny, {
    uses: string;
    name?: string | undefined;
    env?: Record<string, string> | undefined;
    id?: string | undefined;
    if?: string | undefined;
    working_directory?: string | undefined;
    with?: Record<string, string | number | Record<string, any>> | undefined;
    run?: undefined;
    shell?: undefined;
    outputs?: undefined;
}, {
    uses: string;
    name?: string | undefined;
    env?: Record<string, string> | undefined;
    id?: string | undefined;
    if?: string | undefined;
    working_directory?: string | undefined;
    with?: Record<string, string | number | Record<string, any>> | undefined;
    run?: undefined;
    shell?: undefined;
    outputs?: undefined;
}>]>;
/**
 * Structure of a custom EAS job step.
 *
 * GHA step fields skipped here:
 * - `with.entrypoint`
 * - `continue-on-error`
 * - `timeout-minutes`
 *
 * * @example
 * steps:
 *  - uses: eas/maestro-test
 *    id: step1
 *    name: Step 1
 *    with:
 *      flow_path: |
 *        maestro/sign_in.yaml
 *        maestro/create_post.yaml
 *        maestro/sign_out.yaml
 *  - run: echo Hello, world!
 */
export type Step = z.infer<typeof StepZ>;
export declare function validateSteps(maybeSteps: unknown): Step[];
export declare function isStepShellStep(step: Step): step is ShellStep;
export declare function isStepFunctionStep(step: Step): step is FunctionStep;
