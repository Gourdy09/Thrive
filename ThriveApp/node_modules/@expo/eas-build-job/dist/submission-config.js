"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubmissionConfig = void 0;
const zod_1 = require("zod");
/** Submission config as used by the submission worker. */
var SubmissionConfig;
(function (SubmissionConfig) {
    let Ios;
    (function (Ios) {
        Ios.SchemaZ = zod_1.z
            .object({
            /**
             * App Store Connect unique App ID
             */
            ascAppIdentifier: zod_1.z.string(),
            isVerboseFastlaneEnabled: zod_1.z.boolean().optional(),
        })
            .and(zod_1.z.union([
            zod_1.z.object({
                // The `appleIdUsername` & `appleAppSpecificPassword` pair is mutually exclusive with `ascApiJsonKey`
                appleIdUsername: zod_1.z.string(),
                appleAppSpecificPassword: zod_1.z.string(),
                ascApiJsonKey: zod_1.z.never().optional(),
            }),
            zod_1.z.object({
                /**
                 * ASC API JSON token example:
                 * {
                 *  key_id: "D383SF739",
                 *  issuer_id: "6053b7fe-68a8-4acb-89be-165aa6465141",
                 *  key: "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM\n-----END PRIVATE KEY--"
                 * }
                 */
                ascApiJsonKey: zod_1.z.string(),
                appleIdUsername: zod_1.z.never().optional(),
                appleAppSpecificPassword: zod_1.z.never().optional(),
            }),
        ]));
    })(Ios = SubmissionConfig.Ios || (SubmissionConfig.Ios = {}));
    let Android;
    (function (Android) {
        let ReleaseStatus;
        (function (ReleaseStatus) {
            ReleaseStatus["COMPLETED"] = "completed";
            ReleaseStatus["DRAFT"] = "draft";
            ReleaseStatus["HALTED"] = "halted";
            ReleaseStatus["IN_PROGRESS"] = "inProgress";
        })(ReleaseStatus = Android.ReleaseStatus || (Android.ReleaseStatus = {}));
        let ReleaseTrack;
        (function (ReleaseTrack) {
            ReleaseTrack["PRODUCTION"] = "production";
            ReleaseTrack["BETA"] = "beta";
            ReleaseTrack["ALPHA"] = "alpha";
            ReleaseTrack["INTERNAL"] = "internal";
        })(ReleaseTrack = Android.ReleaseTrack || (Android.ReleaseTrack = {}));
        Android.SchemaZ = zod_1.z
            .object({
            track: zod_1.z.nativeEnum(ReleaseTrack),
            changesNotSentForReview: zod_1.z.boolean().default(false),
            googleServiceAccountKeyJson: zod_1.z.string(),
            isVerboseFastlaneEnabled: zod_1.z.boolean().optional(),
        })
            .and(zod_1.z.union([
            zod_1.z.object({
                releaseStatus: zod_1.z.literal(ReleaseStatus.IN_PROGRESS),
                rollout: zod_1.z.number().gte(0).lte(1).default(1),
            }),
            zod_1.z.object({
                releaseStatus: zod_1.z.nativeEnum(ReleaseStatus).optional(),
                rollout: zod_1.z.never().optional(),
            }),
        ]));
    })(Android = SubmissionConfig.Android || (SubmissionConfig.Android = {}));
})(SubmissionConfig || (exports.SubmissionConfig = SubmissionConfig = {}));
//# sourceMappingURL=submission-config.js.map