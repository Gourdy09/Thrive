{"version":3,"file":"urql-exchange-retry.js","sources":["../src/retryExchange.ts"],"sourcesContent":["import {\n  makeSubject,\n  pipe,\n  merge,\n  filter,\n  fromValue,\n  debounce,\n  mergeMap,\n  takeUntil,\n} from 'wonka';\n\nimport { makeOperation, Exchange, Operation, CombinedError } from '@urql/core';\n\n/** Input parameters for the {@link retryExchange}. */\nexport interface RetryExchangeOptions {\n  /** Specify the minimum time to wait until retrying.\n   *\n   * @remarks\n   * `initialDelayMs` specifies the minimum time (in milliseconds) to wait\n   * until a failed operation is retried.\n   *\n   * @defaultValue `1_000` - one second\n   */\n  initialDelayMs?: number;\n  /** Specifies the maximum time to wait until retrying.\n   *\n   * @remarks\n   * `maxDelayMs` specifies the maximum time (in milliseconds) to wait\n   * until a failed operation is retried. While `initialDelayMs`\n   * specifies the minimum amount of time, `randomDelay` may cause\n   * the delay to increase over multiple attempts.\n   *\n   * @defaultValue `15_000` - 15 seconds\n   */\n  maxDelayMs?: number;\n  /** Enables a random exponential backoff to increase the delay over multiple retries.\n   *\n   * @remarks\n   * `randomDelay`, unless disabled, increases the time until a failed\n   * operation is retried over multiple attempts. It increases the time\n   * starting at `initialDelayMs` by 1.5x with an added factor of 0â€“1,\n   * until `maxDelayMs` is reached.\n   *\n   * @defaultValue `true` - enables random exponential backoff\n   */\n  randomDelay?: boolean;\n  /** Specifies the maximum times an operation should be sent to the API.\n   *\n   * @remarks\n   * `maxNumberAttempts` defines the number of attempts an operation should\n   * be retried until it's considered failed.\n   *\n   * @defaultValue `2` - Retry once, i.e. two attempts\n   */\n  maxNumberAttempts?: number;\n  /** Predicate allowing you to selectively not retry `Operation`s.\n   *\n   * @remarks\n   * `retryIf` is called with a {@link CombinedError} and the {@link Operation} that\n   * failed. If this function returns false the failed `Operation` is not retried.\n   *\n   * @defaultValue `(error) => !!error.networkError` - retries only on network errors.\n   */\n  retryIf?(error: CombinedError, operation: Operation): boolean;\n  /** Transform function allowing you to selectively replace a retried `Operation` or return nullish value.\n   *\n   * @remarks\n   * `retryWhen` is called with a {@link CombinedError} and the {@link Operation} that\n   * failed. If this function returns an `Operation`, `retryExchange` will replace the\n   * failed `Operation` and retry. It won't retry the `Operation` if a nullish value\n   * is returned.\n   *\n   * The `retryIf` function, if defined, takes precedence and overrides this option.\n   */\n  retryWith?(\n    error: CombinedError,\n    operation: Operation\n  ): Operation | null | undefined;\n}\n\ninterface RetryState {\n  count: number;\n  delay: number | null;\n}\n\n/** Exchange factory that retries failed operations.\n *\n * @param options - A {@link RetriesExchangeOptions} configuration object.\n * @returns the created retry {@link Exchange}.\n *\n * @remarks\n * The `retryExchange` retries failed operations with specified delays\n * and exponential backoff.\n *\n * You may define a {@link RetryExchangeOptions.retryIf} or\n * {@link RetryExchangeOptions.retryWhen} function to only retry\n * certain kinds of operations, e.g. only queries.\n *\n * @example\n * ```ts\n * retryExchange({\n *   initialDelayMs: 1000,\n *   maxDelayMs: 15000,\n *   randomDelay: true,\n *   maxNumberAttempts: 2,\n *   retryIf: err => err && err.networkError,\n * });\n * ```\n */\nexport const retryExchange = (options: RetryExchangeOptions): Exchange => {\n  const { retryIf, retryWith } = options;\n  const MIN_DELAY = options.initialDelayMs || 1000;\n  const MAX_DELAY = options.maxDelayMs || 15000;\n  const MAX_ATTEMPTS = options.maxNumberAttempts || 2;\n  const RANDOM_DELAY =\n    options.randomDelay != null ? !!options.randomDelay : true;\n\n  return ({ forward, dispatchDebug }) =>\n    operations$ => {\n      const { source: retry$, next: nextRetryOperation } =\n        makeSubject<Operation>();\n\n      const retryWithBackoff$ = pipe(\n        retry$,\n        mergeMap((operation: Operation) => {\n          const retry: RetryState = operation.context.retry || {\n            count: 0,\n            delay: null,\n          };\n\n          const retryCount = ++retry.count;\n          let delayAmount = retry.delay || MIN_DELAY;\n\n          const backoffFactor = Math.random() + 1.5;\n          // if randomDelay is enabled and it won't exceed the max delay, apply a random\n          // amount to the delay to avoid thundering herd problem\n          if (RANDOM_DELAY && delayAmount * backoffFactor < MAX_DELAY) {\n            delayAmount *= backoffFactor;\n          }\n\n          // We stop the retries if a teardown event for this operation comes in\n          // But if this event comes through regularly we also stop the retries, since it's\n          // basically the query retrying itself, no backoff should be added!\n          const teardown$ = pipe(\n            operations$,\n            filter(op => {\n              return (\n                (op.kind === 'query' || op.kind === 'teardown') &&\n                op.key === operation.key\n              );\n            })\n          );\n\n          dispatchDebug({\n            type: 'retryAttempt',\n            message: `The operation has failed and a retry has been triggered (${retryCount} / ${MAX_ATTEMPTS})`,\n            operation,\n            data: {\n              retryCount,\n            },\n          });\n\n          // Add new retryDelay and retryCount to operation\n          return pipe(\n            fromValue(\n              makeOperation(operation.kind, operation, {\n                ...operation.context,\n                retry,\n              })\n            ),\n            debounce(() => delayAmount),\n            // Stop retry if a teardown comes in\n            takeUntil(teardown$)\n          );\n        })\n      );\n\n      return pipe(\n        merge([operations$, retryWithBackoff$]),\n        forward,\n        filter(res => {\n          const retry = res.operation.context.retry as RetryState | undefined;\n          // Only retry if the error passes the conditional retryIf function (if passed)\n          // or if the error contains a networkError\n          if (\n            !res.error ||\n            (retryIf\n              ? !retryIf(res.error, res.operation)\n              : !retryWith && !res.error.networkError)\n          ) {\n            // Reset the delay state for a successful operation\n            if (retry) {\n              retry.count = 0;\n              retry.delay = null;\n            }\n            return true;\n          }\n\n          const maxNumberAttemptsExceeded =\n            ((retry && retry.count) || 0) >= MAX_ATTEMPTS - 1;\n          if (!maxNumberAttemptsExceeded) {\n            const operation = retryWith\n              ? retryWith(res.error, res.operation)\n              : res.operation;\n            if (!operation) return true;\n\n            // Send failed responses to be retried by calling next on the retry$ subject\n            // Exclude operations that have been retried more than the specified max\n            nextRetryOperation(operation);\n            return false;\n          }\n\n          dispatchDebug({\n            type: 'retryExhausted',\n            message:\n              'Maximum number of retries has been reached. No further retries will be performed.',\n            operation: res.operation,\n          });\n\n          return true;\n        })\n      );\n    };\n};\n"],"names":["retryExchange","options","retryIf","retryWith","MIN_DELAY","initialDelayMs","MAX_DELAY","maxDelayMs","MAX_ATTEMPTS","maxNumberAttempts","RANDOM_DELAY","randomDelay","forward","dispatchDebug","operations$","source","retry$","next","nextRetryOperation","makeSubject","retryWithBackoff$","mergeMap","operation","retry","context","count","delay","retryCount","delayAmount","backoffFactor","Math","random","teardown$","filter","op","kind","key","process","env","NODE_ENV","type","message","data","undefined","takeUntil","debounce","fromValue","makeOperation","res","error","networkError","maxNumberAttemptsExceeded","merge"],"mappings":"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"}