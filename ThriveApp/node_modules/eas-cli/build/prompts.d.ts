import { Answers, Choice, Options, PromptType } from 'prompts';
import { Question } from './easMultiselect';
export { PromptType, Question, Choice };
export interface ExpoChoice<T> extends Choice {
    value: T;
}
type NamelessQuestion = Omit<Question<'value'>, 'name' | 'type'>;
export declare function promptAsync<T extends string = string>(questions: Question<T> | Question<T>[], options?: Options): Promise<Answers<T>>;
export declare function confirmAsync(question: NamelessQuestion, options?: Options): Promise<boolean>;
export declare function selectAsync<T>(message: string, choices: ExpoChoice<T>[], config?: {
    options?: Options;
    warningMessageForDisabledEntries?: string;
}): Promise<T>;
/**
 * Create a more dynamic yes/no confirmation that can be cancelled.
 *
 * @param questions
 * @param options
 */
export declare function toggleConfirmAsync(questions: NamelessQuestion, options?: Options): Promise<boolean>;
export declare function pressAnyKeyToContinueAsync(): Promise<void>;
