import { ChannelBasicInfo } from './utils';
import { ExpoGraphqlClient } from '../commandUtils/context/contextUtils/createGraphqlClient';
import { PaginatedQueryOptions } from '../commandUtils/pagination';
import { CreateUpdateChannelOnAppMutation } from '../graphql/generated';
import { UpdateChannelObject } from '../graphql/queries/ChannelQuery';
export declare const CHANNELS_LIMIT = 25;
export declare function selectChannelOnAppAsync(graphqlClient: ExpoGraphqlClient, { projectId, selectionPromptTitle, paginatedQueryOptions, }: {
    projectId: string;
    selectionPromptTitle: string;
    paginatedQueryOptions: PaginatedQueryOptions;
}): Promise<UpdateChannelObject>;
export declare function listAndRenderChannelsOnAppAsync(graphqlClient: ExpoGraphqlClient, { projectId, paginatedQueryOptions, }: {
    projectId: string;
    paginatedQueryOptions: PaginatedQueryOptions;
}): Promise<void>;
export declare function listAndRenderBranchesAndUpdatesOnChannelAsync(graphqlClient: ExpoGraphqlClient, { projectId: appId, channelName, paginatedQueryOptions, }: {
    projectId: string;
    channelName: string;
    paginatedQueryOptions: PaginatedQueryOptions;
}): Promise<void>;
export declare function createChannelOnAppAsync(graphqlClient: ExpoGraphqlClient, { appId, branchId, channelName, }: {
    appId: string;
    branchId: string;
    channelName: string;
}): Promise<CreateUpdateChannelOnAppMutation>;
export declare function ensureChannelExistsAsync(graphqlClient: ExpoGraphqlClient, { appId, branchId, channelName }: {
    appId: string;
    branchId: string;
    channelName: string;
}): Promise<void>;
export declare function doesChannelExistAsync(graphqlClient: ExpoGraphqlClient, { appId, channelName }: {
    appId: string;
    channelName: string;
}): Promise<boolean>;
/**
 *
 * Creates a channel and links it to a branch with the same name.
 *
 * @param appId the app ID, also known as the project ID
 * @param channelName the name of the channel to create
 * @param shouldPrintJson print only the JSON output
 */
export declare function createAndLinkChannelAsync(graphqlClient: ExpoGraphqlClient, { appId, channelName, shouldPrintJson, }: {
    appId: string;
    channelName: string;
    shouldPrintJson?: boolean;
}): Promise<ChannelBasicInfo>;
