import { ExpoConfig } from '@expo/config';
import { Robot, SsoUser, Update, UpdateBranchFragment, UpdateFragment, User } from '../graphql/generated';
import { RequestedPlatform } from '../platform';
export type FormatUpdateParameter = Pick<Update, 'id' | 'createdAt' | 'message'> & {
    actor?: Pick<Robot, '__typename' | 'firstName'> | Pick<User, '__typename' | 'username'> | Pick<SsoUser, '__typename' | 'username'> | null;
};
export type UpdateJsonInfo = {
    branch: string;
} & Pick<UpdateFragment, 'id' | 'createdAt' | 'group' | 'message' | 'runtimeVersion' | 'platform' | 'manifestPermalink' | 'gitCommitHash'>;
export type UpdateGroupDescription = FormatUpdateParameter & {
    branch: string;
    group: string;
    platforms: string;
    runtimeVersion: string;
};
export type FormattedUpdateGroupDescription = {
    message: string;
    group: string;
    platforms: string;
    runtimeVersion: string;
    codeSigningKey: string | undefined;
    isRollBackToEmbedded: boolean;
    rolloutPercentage: number | undefined;
};
export type FormattedBranchDescription = {
    branch: string;
    branchRolloutPercentage?: number;
    update?: FormattedUpdateGroupDescription;
};
export type FormattedUpdateGroupDescriptionWithBranch = FormattedUpdateGroupDescription & {
    branch: string;
};
export declare const UPDATE_COLUMNS: string[];
export declare const UPDATE_COLUMNS_WITH_BRANCH: string[];
export declare function formatUpdateGroup(update: FormattedUpdateGroupDescription): string;
export declare function formatBranch({ branch, branchRolloutPercentage, update, }: FormattedBranchDescription): string;
export declare function getPlatformsForGroup({ group, updates, }: {
    group: string | undefined;
    updates: {
        group: string;
        platform: string;
    }[] | undefined;
}): string;
export declare function formatPlatformForUpdateGroup(updateGroup: {
    group: string;
    platform: string;
}[] | undefined): string;
export declare function truncateString(originalMessage: string, length?: number): string;
export declare function formatUpdateMessage(update: FormatUpdateParameter): string;
export declare function ensureValidVersions(exp: ExpoConfig, platform: RequestedPlatform): void;
export declare function formatUpdateTitle(update: UpdateFragment): string;
export declare function getUpdateJsonInfosForUpdates(updates: UpdateFragment[]): UpdateJsonInfo[];
export declare function getUpdateGroupDescriptions(updateGroups: UpdateFragment[][]): FormattedUpdateGroupDescription[];
export declare function getUpdateGroupDescriptionsWithBranch(updateGroups: UpdateFragment[][]): FormattedUpdateGroupDescriptionWithBranch[];
export declare function getBranchDescription(branch: UpdateBranchFragment): FormattedBranchDescription;
export declare function checkEASUpdateURLIsSetAsync(exp: ExpoConfig, projectId: string): Promise<boolean>;
