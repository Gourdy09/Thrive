"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNativeTargetEntitlementsAsync = exports.getManagedApplicationTargetEntitlementsAsync = void 0;
const config_plugins_1 = require("@expo/config-plugins");
const prebuild_config_1 = require("@expo/prebuild-config");
const plist_1 = require("../../utils/plist");
const workflow_1 = require("../workflow");
async function getManagedApplicationTargetEntitlementsAsync(projectDir, env, vcsClient) {
    const originalProcessEnv = process.env;
    try {
        process.env = {
            ...process.env,
            ...env,
        };
        const { exp } = await (0, prebuild_config_1.getPrebuildConfigAsync)(projectDir, { platforms: ['ios'] });
        const expWithMods = await (0, config_plugins_1.compileModsAsync)(exp, {
            projectRoot: projectDir,
            platforms: ['ios'],
            introspect: true,
            ignoreExistingNativeFiles: await (0, workflow_1.hasIgnoredIosProjectAsync)(projectDir, vcsClient),
        });
        return expWithMods.ios?.entitlements ?? {};
    }
    finally {
        process.env = originalProcessEnv;
    }
}
exports.getManagedApplicationTargetEntitlementsAsync = getManagedApplicationTargetEntitlementsAsync;
async function getNativeTargetEntitlementsAsync(projectDir, target) {
    const entitlementsPath = config_plugins_1.IOSConfig.Entitlements.getEntitlementsPath(projectDir, target);
    if (entitlementsPath) {
        const plist = await (0, plist_1.readPlistAsync)(entitlementsPath);
        return plist ? plist : null;
    }
    else {
        return null;
    }
}
exports.getNativeTargetEntitlementsAsync = getNativeTargetEntitlementsAsync;
