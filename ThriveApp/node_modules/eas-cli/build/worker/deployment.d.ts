import { DeploymentsMutation } from './mutations';
import { ExpoGraphqlClient } from '../commandUtils/context/contextUtils/createGraphqlClient';
import { WorkerDeploymentFragment } from '../graphql/generated';
import { selectPaginatedAsync } from '../utils/relay';
export declare function getSignedDeploymentUrlAsync(graphqlClient: ExpoGraphqlClient, options: {
    appId: string;
    deploymentIdentifier?: string | null;
    /** Callback which is invoked when the project is going to setup the dev domain */
    onSetupDevDomain?: () => any;
    /** If the terminal is running in non interactive mode or not */
    nonInteractive?: boolean;
}): Promise<string>;
/**
 * Assign a dev domain name to a project.
 *   - When running in interactive mode, it will prompt the user with a suggested domain name.
 *   - When running in non interactive mode, it will auto-assign the suggested domain name.
 */
export declare function assignDevDomainNameAsync({ graphqlClient, appId, nonInteractive, }: {
    graphqlClient: ExpoGraphqlClient;
    appId: string;
    nonInteractive?: boolean;
}): ReturnType<typeof DeploymentsMutation.assignDevDomainNameAsync>;
export declare function assignWorkerDeploymentAliasAsync({ graphqlClient, appId, deploymentId, aliasName, }: {
    graphqlClient: ExpoGraphqlClient;
    appId: string;
    deploymentId: string;
    aliasName: string;
}): ReturnType<typeof DeploymentsMutation.assignAliasAsync>;
export declare function assignWorkerDeploymentProductionAsync({ graphqlClient, appId, deploymentId, }: {
    graphqlClient: ExpoGraphqlClient;
    appId: string;
    deploymentId: string;
}): ReturnType<typeof DeploymentsMutation.assignAliasAsync>;
export declare function selectWorkerDeploymentOnAppAsync({ graphqlClient, appId, selectTitle, pageSize, }: {
    graphqlClient: ExpoGraphqlClient;
    appId: string;
    selectTitle?: string;
    pageSize?: number;
}): ReturnType<typeof selectPaginatedAsync<WorkerDeploymentFragment>>;
