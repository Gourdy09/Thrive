import { ExpoGraphqlClient } from '../../commandUtils/context/contextUtils/createGraphqlClient';
import { EASUpdateAction, EASUpdateContext } from '../../eas-update/utils';
import { RuntimeFragment, UpdateBranchBasicInfoFragment } from '../../graphql/generated';
import { Connection } from '../../utils/relay';
/**
 * Select a runtime from a branch
 */
export declare class SelectRuntime implements EASUpdateAction<string | null> {
    private readonly branchInfo;
    private readonly options;
    private readonly printedType;
    constructor(branchInfo: UpdateBranchBasicInfoFragment, options?: {
        anotherBranchToIntersectRuntimesBy?: UpdateBranchBasicInfoFragment;
    });
    warnNoRuntime(): void;
    formatCantFindRuntime(): string;
    runAsync(ctx: EASUpdateContext): Promise<string | null>;
    getNewestRuntimeAsync(graphqlClient: ExpoGraphqlClient, { appId, branchName, anotherBranchIdToIntersectRuntimesBy, }: {
        appId: string;
        branchName: string;
        anotherBranchIdToIntersectRuntimesBy?: string;
    }): Promise<Connection<RuntimeFragment>>;
    displayLatestUpdateGroupAsync({ graphqlClient, appId, branchName, runtime, }: {
        graphqlClient: ExpoGraphqlClient;
        appId: string;
        branchName: string;
        runtime: RuntimeFragment;
    }): Promise<string>;
    selectRuntimesAsync(graphqlClient: ExpoGraphqlClient, { appId, batchSize, }: {
        appId: string;
        batchSize?: number;
    }): Promise<RuntimeFragment | null>;
}
