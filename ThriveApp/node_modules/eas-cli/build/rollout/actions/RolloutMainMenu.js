"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolloutMainMenu = exports.MainMenuActions = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const CreateRollout_1 = require("./CreateRollout");
const ManageRollout_1 = require("./ManageRollout");
const SelectRollout_1 = require("./SelectRollout");
const SelectChannel_1 = require("../../channel/actions/SelectChannel");
const ChannelQuery_1 = require("../../graphql/queries/ChannelQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const prompts_1 = require("../../prompts");
const branch_mapping_1 = require("../branch-mapping");
var MainMenuActions;
(function (MainMenuActions) {
    MainMenuActions["CREATE_NEW"] = "Create a new rollout";
    MainMenuActions["MANAGE_EXISTING"] = "Manage an existing rollout";
})(MainMenuActions || (exports.MainMenuActions = MainMenuActions = {}));
/**
 * Manage a rollout for the project.
 */
class RolloutMainMenu {
    constructor(options) {
        this.options = options;
    }
    async runAsync(ctx) {
        const { action } = this.options;
        const { nonInteractive } = ctx;
        if (nonInteractive) {
            throw new Error(`rollout main menu cannot be run in non-interactive mode.`);
        }
        const menuOption = action ? this.toMainMenuAction(action) : await this.promptMenuActionAsync();
        await this.runActionAsync(ctx, menuOption);
    }
    async runActionAsync(ctx, menuAction) {
        const { channelName } = this.options;
        switch (menuAction) {
            case MainMenuActions.CREATE_NEW: {
                const channelInfo = channelName
                    ? await this.resolveChannelNameAsync(ctx, channelName)
                    : await this.selectChannelToRolloutAsync(ctx);
                await new CreateRollout_1.CreateRollout(channelInfo, this.options).runAsync(ctx);
                return null;
            }
            case MainMenuActions.MANAGE_EXISTING: {
                const channelInfo = channelName
                    ? await this.resolveChannelNameAsync(ctx, channelName)
                    : await this.selectRolloutAsync(ctx);
                if (!channelInfo) {
                    log_1.default.log('You dont have any rollouts.');
                }
                else {
                    (0, assert_1.default)(this.options.action !== MainMenuActions.CREATE_NEW, 'Invalid route for create action');
                    const manageAction = await new ManageRollout_1.ManageRollout(channelInfo, {
                        ...this.options,
                        action: this.options.action,
                        callingAction: this,
                    }).runAsync(ctx);
                    await manageAction.runAsync(ctx);
                }
                return null;
            }
        }
    }
    async selectRolloutAsync(ctx) {
        const selectRollout = new SelectRollout_1.SelectRollout();
        const channelInfo = await selectRollout.runAsync(ctx);
        return channelInfo;
    }
    async selectChannelToRolloutAsync(ctx) {
        let hasSomeChannel = false;
        const selectChannelAction = new SelectChannel_1.SelectChannel({
            filterPredicate: (channelInfo) => {
                hasSomeChannel = true;
                return !(0, branch_mapping_1.isRollout)(channelInfo);
            },
        });
        const channelInfo = await selectChannelAction.runAsync(ctx);
        if (!channelInfo) {
            const error = hasSomeChannel
                ? new Error('All your channels are already part of a rollout.')
                : new Error(`You dont have any channels. Create one with \`eas channel:create\``);
            throw error;
        }
        return channelInfo;
    }
    async resolveChannelNameAsync(ctx, channelName) {
        const { graphqlClient, app } = ctx;
        return await ChannelQuery_1.ChannelQuery.viewUpdateChannelAsync(graphqlClient, {
            appId: app.projectId,
            channelName,
        });
    }
    toMainMenuAction(action) {
        if (action === MainMenuActions.CREATE_NEW) {
            return MainMenuActions.CREATE_NEW;
        }
        else if (action === ManageRollout_1.ManageRolloutActions.EDIT ||
            action === ManageRollout_1.ManageRolloutActions.END ||
            action === ManageRollout_1.ManageRolloutActions.VIEW) {
            return MainMenuActions.MANAGE_EXISTING;
        }
        else {
            throw new Error(`Action not supported yet: ` + action);
        }
    }
    async promptMenuActionAsync() {
        const menuOptions = [MainMenuActions.CREATE_NEW, MainMenuActions.MANAGE_EXISTING];
        const { menuOption: selectedMenuOption } = await (0, prompts_1.promptAsync)({
            type: 'select',
            name: 'menuOption',
            message: `What would you like to do?`,
            choices: menuOptions.map(menuOption => ({
                value: menuOption,
                title: menuOption,
            })),
        });
        return selectedMenuOption;
    }
}
exports.RolloutMainMenu = RolloutMainMenu;
