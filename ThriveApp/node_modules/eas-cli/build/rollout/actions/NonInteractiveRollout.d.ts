import { NonInteractiveOptions as CreateRolloutNonInteractiveOptions } from './CreateRollout';
import { NonInteractiveOptions as EditRolloutNonInteractiveOptions } from './EditRollout';
import { GeneralOptions as EndRolloutGeneralOptions, NonInteractiveOptions as EndRolloutNonInteractiveOptions } from './EndRollout';
import { RolloutActions } from './RolloutMainMenu';
import { EASUpdateAction, EASUpdateContext } from '../../eas-update/utils';
import { UpdateChannelBasicInfoFragment } from '../../graphql/generated';
import { UpdateBranchObject, UpdateChannelObject } from '../../graphql/queries/ChannelQuery';
type JSONRolloutOutput = {
    defaultBranch: UpdateBranchObject;
    rolledOutBranch: UpdateBranchObject;
    percentRolledOut: number;
    runtimeVersion?: string;
    updatedAt: Date;
};
type JSONOutput = {
    hasRollout: boolean;
    originalRolloutInfo?: JSONRolloutOutput;
    currentRolloutInfo?: JSONRolloutOutput;
};
/**
 * Control a rollout in non interactive mode.
 */
export declare class NonInteractiveRollout implements EASUpdateAction<void> {
    private readonly options;
    constructor(options: {
        channelName?: string;
        json?: boolean;
        action?: RolloutActions;
    } & Partial<EditRolloutNonInteractiveOptions> & Partial<EndRolloutNonInteractiveOptions> & EndRolloutGeneralOptions & Partial<CreateRolloutNonInteractiveOptions>);
    runAsync(ctx: EASUpdateContext): Promise<void>;
    runActionAsync(ctx: EASUpdateContext, action: RolloutActions, channelObject: UpdateChannelObject): Promise<UpdateChannelBasicInfoFragment>;
    viewRollout(channelObject: UpdateChannelObject): UpdateChannelObject;
    getJsonAsync({ originalChannelObject, updatedChannelObject, }: {
        originalChannelObject: UpdateChannelObject;
        updatedChannelObject: UpdateChannelObject;
    }): Promise<JSONOutput>;
    getRolloutJsonAsync(channelObject: UpdateChannelObject): Promise<JSONRolloutOutput>;
    getRuntimeVersion(channelInfo: UpdateChannelBasicInfoFragment): string | undefined;
    getChannelObjectAsync(ctx: EASUpdateContext, { channelName, runtimeVersion }: {
        channelName: string;
        runtimeVersion?: string;
    }): Promise<UpdateChannelObject>;
}
export {};
