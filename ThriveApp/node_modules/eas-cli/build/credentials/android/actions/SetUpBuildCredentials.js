"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpBuildCredentials = void 0;
const tslib_1 = require("tslib");
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const BuildCredentialsUtils_1 = require("./BuildCredentialsUtils");
const CreateKeystore_1 = require("./CreateKeystore");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const ora_1 = require("../../../ora");
const errors_1 = require("../../errors");
/**
 * Sets up Build Credentials for Android
 * @name: sets up build credentials for the specified configuration. If no name is specified, the default configuration is setup
 */
class SetUpBuildCredentials {
    constructor(options) {
        this.options = options;
    }
    async runAsync(ctx) {
        const { app, name: maybeName } = this.options;
        if (!ctx.nonInteractive) {
            const canCopyLegacyCredentials = await (0, BuildCredentialsUtils_1.canCopyLegacyCredentialsAsync)(ctx, app);
            if (canCopyLegacyCredentials) {
                await (0, BuildCredentialsUtils_1.promptUserAndCopyLegacyCredentialsAsync)(ctx, app);
            }
        }
        const alreadySetupBuildCredentials = await this.getFullySetupBuildCredentialsAsync({
            ctx,
            app,
            name: maybeName,
        });
        if (alreadySetupBuildCredentials) {
            return alreadySetupBuildCredentials;
        }
        if (ctx.nonInteractive) {
            throw new errors_1.MissingCredentialsNonInteractiveError('Generating a new Keystore is not supported in --non-interactive mode');
        }
        const keystore = await new CreateKeystore_1.CreateKeystore(app.account).runAsync(ctx);
        return await this.assignBuildCredentialsAsync({ ctx, app, name: maybeName, keystore });
    }
    async assignBuildCredentialsAsync({ ctx, app, name, keystore, }) {
        if (name) {
            return await ctx.android.createOrUpdateAndroidAppBuildCredentialsByNameAsync(ctx.graphqlClient, app, name, {
                androidKeystoreId: keystore.id,
            });
        }
        return await (0, BuildCredentialsUtils_1.createOrUpdateDefaultAndroidAppBuildCredentialsAsync)(ctx, app, {
            androidKeystoreId: keystore.id,
        });
    }
    async getFullySetupBuildCredentialsAsync({ ctx, app, name, }) {
        if (name) {
            return await this.getFullySetupBuildCredentialsByNameAsync({ ctx, app, name });
        }
        const defaultBuildCredentials = await ctx.android.getDefaultAndroidAppBuildCredentialsAsync(ctx.graphqlClient, app);
        const defaultKeystore = defaultBuildCredentials?.androidKeystore ?? null;
        if (defaultKeystore) {
            (0, ora_1.ora)(`Using Keystore from configuration: ${(0, nullthrows_1.default)(defaultBuildCredentials).name} (default)`).succeed();
            return defaultBuildCredentials;
        }
        return null;
    }
    async getFullySetupBuildCredentialsByNameAsync({ ctx, app, name, }) {
        const maybeBuildCredentials = await ctx.android.getAndroidAppBuildCredentialsByNameAsync(ctx.graphqlClient, app, name);
        const keystore = maybeBuildCredentials?.androidKeystore ?? null;
        if (keystore) {
            const buildCredentials = (0, nullthrows_1.default)(maybeBuildCredentials);
            (0, ora_1.ora)(`Using Keystore from configuration: ${buildCredentials.name}${buildCredentials.isDefault ? ' (default)' : ''}`).succeed();
            return buildCredentials;
        }
        log_1.default.log(`No Keystore found for configuration: ${name}${maybeBuildCredentials?.isDefault ? ' (default)' : ''}`);
        return null;
    }
}
exports.SetUpBuildCredentials = SetUpBuildCredentials;
