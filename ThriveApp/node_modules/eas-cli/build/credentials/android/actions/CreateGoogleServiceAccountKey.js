"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateGoogleServiceAccountKey = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const log_1 = tslib_1.__importStar(require("../../../log"));
const prompts_1 = require("../../../prompts");
const googleServiceAccountKey_1 = require("../utils/googleServiceAccountKey");
class CreateGoogleServiceAccountKey {
    constructor(account) {
        this.account = account;
    }
    async runAsync(ctx) {
        if (ctx.nonInteractive) {
            throw new Error(`New Google Service Account Key cannot be created in non-interactive mode.`);
        }
        const jsonKeyObject = await this.provideAsync(ctx);
        const gsaKeyFragment = await ctx.android.createGoogleServiceAccountKeyAsync(ctx.graphqlClient, this.account, jsonKeyObject);
        log_1.default.succeed('Uploaded Google Service Account Key.');
        return gsaKeyFragment;
    }
    async provideAsync(ctx) {
        try {
            const keyJsonPath = await this.provideKeyJsonPathAsync(ctx);
            return (0, googleServiceAccountKey_1.readAndValidateServiceAccountKey)(keyJsonPath);
        }
        catch (e) {
            log_1.default.error(e);
            return await this.provideAsync(ctx);
        }
    }
    async provideKeyJsonPathAsync(ctx) {
        const detectedPath = await (0, googleServiceAccountKey_1.detectGoogleServiceAccountKeyPathAsync)(ctx.projectDir);
        if (detectedPath) {
            return detectedPath;
        }
        log_1.default.log(`${chalk_1.default.bold('A Google Service Account JSON key is required for uploading your app to Google Play Store, and for sending Android Notifications via FCM V1.')}.\n` +
            `If you're not sure what this is or how to create one, ${(0, log_1.learnMore)('https://expo.fyi/creating-google-service-account', { learnMoreMessage: 'learn more' })}`);
        const { filePath } = await (0, prompts_1.promptAsync)({
            name: 'filePath',
            message: 'Path to Google Service Account file:',
            initial: 'api-0000000000000000000-111111-aaaaaabbbbbb.json',
            type: 'text',
            // eslint-disable-next-line async-protect/async-suffix
            validate: async (filePath) => {
                try {
                    const stats = await fs_extra_1.default.stat(filePath);
                    if (stats.isFile()) {
                        return true;
                    }
                    return 'Input is not a file.';
                }
                catch {
                    return 'File does not exist.';
                }
            },
        });
        return filePath;
    }
}
exports.CreateGoogleServiceAccountKey = CreateGoogleServiceAccountKey;
