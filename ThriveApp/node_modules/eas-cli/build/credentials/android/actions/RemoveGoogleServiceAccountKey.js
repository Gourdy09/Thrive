"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveGoogleServiceAccountKey = exports.SelectAndRemoveGoogleServiceAccountKey = void 0;
const tslib_1 = require("tslib");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const prompts_1 = require("../../../prompts");
const googleServiceAccountKey_1 = require("../utils/googleServiceAccountKey");
class SelectAndRemoveGoogleServiceAccountKey {
    constructor(account) {
        this.account = account;
    }
    async runAsync(ctx) {
        if (ctx.nonInteractive) {
            throw new Error(`Cannot select and remove Google Service Account Keys in non-interactive mode.`);
        }
        const gsaKeyFragments = await ctx.android.getGoogleServiceAccountKeysForAccountAsync(ctx.graphqlClient, this.account);
        if (gsaKeyFragments.length === 0) {
            log_1.default.warn("There aren't any Google Service Account Keys associated with your account.");
            return;
        }
        const selected = await (0, googleServiceAccountKey_1.selectGoogleServiceAccountKeyAsync)(gsaKeyFragments);
        await new RemoveGoogleServiceAccountKey(selected).runAsync(ctx);
        log_1.default.succeed('Removed Google Service Account Key.');
        log_1.default.newLine();
    }
}
exports.SelectAndRemoveGoogleServiceAccountKey = SelectAndRemoveGoogleServiceAccountKey;
class RemoveGoogleServiceAccountKey {
    constructor(googleServiceAccountKey) {
        this.googleServiceAccountKey = googleServiceAccountKey;
    }
    async runAsync(ctx) {
        if (ctx.nonInteractive) {
            throw new Error(`Cannot remove Google Service Account Keys in non-interactive mode`);
        }
        // TODO(quin): add an extra edge on GoogleServiceAccountKey to find the apps using it
        const confirm = await (0, prompts_1.confirmAsync)({
            message: `Deleting this Google Service Account Key may affect your projects that rely on it. Do you want to continue?`,
        });
        if (!confirm) {
            log_1.default.log('Aborting');
            return;
        }
        log_1.default.log('Removing Google Service Account Key.');
        await ctx.android.deleteGoogleServiceAccountKeyAsync(ctx.graphqlClient, this.googleServiceAccountKey);
    }
}
exports.RemoveGoogleServiceAccountKey = RemoveGoogleServiceAccountKey;
