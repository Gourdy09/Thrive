"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpGoogleServiceAccountKeyForFcmV1 = void 0;
const tslib_1 = require("tslib");
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const AssignGoogleServiceAccountKeyForFcmV1_1 = require("./AssignGoogleServiceAccountKeyForFcmV1");
const CreateGoogleServiceAccountKey_1 = require("./CreateGoogleServiceAccountKey");
const UseExistingGoogleServiceAccountKey_1 = require("./UseExistingGoogleServiceAccountKey");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const prompts_1 = require("../../../prompts");
const errors_1 = require("../../errors");
class SetUpGoogleServiceAccountKeyForFcmV1 {
    constructor(app) {
        this.app = app;
    }
    async runAsync(ctx) {
        const isKeySetup = await this.isGoogleServiceAccountKeySetupAsync(ctx);
        if (isKeySetup) {
            log_1.default.succeed('Google Service Account Key for FCM V1 already set up.');
            return (0, nullthrows_1.default)(await ctx.android.getAndroidAppCredentialsWithCommonFieldsAsync(ctx.graphqlClient, this.app), 'androidAppCredentials cannot be null if google service account key is already set up');
        }
        if (ctx.nonInteractive) {
            throw new errors_1.MissingCredentialsNonInteractiveError('Google Service Account Keys cannot be set up in --non-interactive mode.');
        }
        const keysForAccount = await ctx.android.getGoogleServiceAccountKeysForAccountAsync(ctx.graphqlClient, this.app.account);
        let googleServiceAccountKey = null;
        if (keysForAccount.length === 0) {
            googleServiceAccountKey = await new CreateGoogleServiceAccountKey_1.CreateGoogleServiceAccountKey(this.app.account).runAsync(ctx);
        }
        else {
            googleServiceAccountKey = await this.createOrUseExistingKeyAsync(ctx);
        }
        return await new AssignGoogleServiceAccountKeyForFcmV1_1.AssignGoogleServiceAccountKeyForFcmV1(this.app).runAsync(ctx, googleServiceAccountKey);
    }
    async isGoogleServiceAccountKeySetupAsync(ctx) {
        const appCredentials = await ctx.android.getAndroidAppCredentialsWithCommonFieldsAsync(ctx.graphqlClient, this.app);
        return !!appCredentials?.googleServiceAccountKeyForFcmV1;
    }
    async createOrUseExistingKeyAsync(ctx) {
        const { action } = await (0, prompts_1.promptAsync)({
            type: 'select',
            name: 'action',
            message: 'Select the Google Service Account Key to use for FCM V1:',
            choices: [
                {
                    title: '[Choose an existing key]',
                    value: 'CHOOSE_EXISTING',
                },
                { title: '[Upload a new service account key]', value: 'GENERATE' },
            ],
        });
        if (action === 'GENERATE') {
            return await new CreateGoogleServiceAccountKey_1.CreateGoogleServiceAccountKey(this.app.account).runAsync(ctx);
        }
        return ((await new UseExistingGoogleServiceAccountKey_1.UseExistingGoogleServiceAccountKey(this.app.account).runAsync(ctx)) ??
            (await this.createOrUseExistingKeyAsync(ctx)));
    }
}
exports.SetUpGoogleServiceAccountKeyForFcmV1 = SetUpGoogleServiceAccountKeyForFcmV1;
