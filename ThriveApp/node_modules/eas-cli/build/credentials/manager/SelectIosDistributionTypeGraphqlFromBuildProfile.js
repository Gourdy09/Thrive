"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectIosDistributionTypeGraphqlFromBuildProfile = void 0;
const generated_1 = require("../../graphql/generated");
const prompts_1 = require("../../prompts");
class SelectIosDistributionTypeGraphqlFromBuildProfile {
    constructor(buildProfile) {
        this.buildProfile = buildProfile;
    }
    async runAsync(ctx) {
        const { distribution, simulator } = this.buildProfile;
        if (simulator) {
            throw new Error('A simulator distribution does not require credentials to be configured.');
        }
        else if (distribution === 'store') {
            return generated_1.IosDistributionType.AppStore;
        }
        else {
            return await this.resolveInternalDistributionAsync(ctx);
        }
    }
    async resolveInternalDistributionAsync(ctx) {
        // check if the type is specified in eas config
        const maybeEnterpriseProvisioning = this.buildProfile.enterpriseProvisioning;
        if (maybeEnterpriseProvisioning) {
            switch (maybeEnterpriseProvisioning) {
                case 'universal':
                    return generated_1.IosDistributionType.Enterprise;
                case 'adhoc':
                    return generated_1.IosDistributionType.AdHoc;
                default:
                    throw new Error(`Unsupported Enterprise Provisioning type: ${maybeEnterpriseProvisioning}`);
            }
        }
        // only enterprise accounts support enterprise distributions
        const isDefinitelyNotAnEnterpriseAccount = ctx.appStore.authCtx?.team.inHouse === false;
        if (isDefinitelyNotAnEnterpriseAccount) {
            return generated_1.IosDistributionType.AdHoc;
        }
        if (ctx.nonInteractive) {
            throw new Error('Unable to determine type of internal distribution. Run this command in interactive mode.');
        }
        // ask the user as a last resort
        const { iosDistributionTypeGraphql } = await (0, prompts_1.promptAsync)({
            type: 'select',
            name: 'iosDistributionTypeGraphql',
            message: 'Which type of internal distribution would you like to configure?',
            choices: [
                {
                    value: generated_1.IosDistributionType.AdHoc,
                    title: 'Adhoc: distribution to a small number of test users',
                },
                {
                    value: generated_1.IosDistributionType.Enterprise,
                    title: 'Enterprise: distribution to members of your company. Restricted to Apple Enterprise Accounts.',
                },
            ],
        });
        return iosDistributionTypeGraphql;
    }
}
exports.SelectIosDistributionTypeGraphqlFromBuildProfile = SelectIosDistributionTypeGraphqlFromBuildProfile;
