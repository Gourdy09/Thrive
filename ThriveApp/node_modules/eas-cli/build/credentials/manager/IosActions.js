"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBuildCredentialsActions = exports.getAscApiKeyActions = exports.getPushKeyActions = exports.credentialsJsonActions = exports.highLevelActions = void 0;
const Actions_1 = require("./Actions");
exports.highLevelActions = [
    {
        value: Actions_1.IosActionType.ManageBuildCredentials,
        title: 'Build Credentials: Manage everything needed to build your project',
        scope: Actions_1.Scope.Manager,
    },
    {
        value: Actions_1.IosActionType.ManagePushKey,
        title: 'Push Notifications: Manage your Apple Push Notifications Key',
        scope: Actions_1.Scope.Manager,
    },
    {
        value: Actions_1.IosActionType.ManageAscApiKey,
        title: 'App Store Connect: Manage your API Key',
        scope: Actions_1.Scope.Manager,
    },
    {
        value: Actions_1.IosActionType.ManageCredentialsJson,
        title: 'credentials.json: Upload/Download credentials between EAS servers and your local json ',
        scope: Actions_1.Scope.Manager,
    },
    {
        value: Actions_1.IosActionType.GoBackToCaller,
        title: 'Go back',
        scope: Actions_1.Scope.Manager,
    },
    {
        value: Actions_1.IosActionType.Exit,
        title: 'Exit',
        scope: Actions_1.Scope.Manager,
    },
];
exports.credentialsJsonActions = [
    {
        value: Actions_1.IosActionType.UpdateCredentialsJson,
        title: 'Download credentials from EAS to credentials.json',
        scope: Actions_1.Scope.Project,
    },
    {
        value: Actions_1.IosActionType.SetUpBuildCredentialsFromCredentialsJson,
        title: 'Upload credentials from credentials.json to EAS',
        scope: Actions_1.Scope.Project,
    },
    {
        value: Actions_1.IosActionType.GoBackToHighLevelActions,
        title: 'Go back',
        scope: Actions_1.Scope.Manager,
    },
];
function getPushKeyActions(ctx) {
    return [
        {
            value: Actions_1.IosActionType.SetUpPushKey,
            title: 'Set up your project to use Push Notifications',
            scope: Actions_1.Scope.Project,
        },
        {
            value: Actions_1.IosActionType.CreatePushKey,
            title: 'Add a new push key',
            scope: ctx.hasProjectContext ? Actions_1.Scope.Project : Actions_1.Scope.Account,
        },
        {
            value: Actions_1.IosActionType.UseExistingPushKey,
            title: 'Use an existing push key',
            scope: Actions_1.Scope.Project,
        },
        {
            value: Actions_1.IosActionType.RemovePushKey,
            title: 'Remove a push key from your account',
            scope: Actions_1.Scope.Account,
        },
        {
            value: Actions_1.IosActionType.GoBackToHighLevelActions,
            title: 'Go back',
            scope: Actions_1.Scope.Manager,
        },
    ];
}
exports.getPushKeyActions = getPushKeyActions;
function getAscApiKeyActions(ctx) {
    return [
        {
            value: Actions_1.IosActionType.SetUpAscApiKeyForSubmissions,
            title: 'Set up your project to use an API Key for EAS Submit',
            scope: Actions_1.Scope.Project,
        },
        {
            value: Actions_1.IosActionType.UseExistingAscApiKeyForSubmissions,
            title: 'Use an existing API Key for EAS Submit',
            scope: Actions_1.Scope.Project,
        },
        {
            value: Actions_1.IosActionType.CreateAscApiKeyForSubmissions,
            title: 'Add a new API Key For EAS Submit',
            scope: ctx.hasProjectContext ? Actions_1.Scope.Project : Actions_1.Scope.Account,
        },
        {
            value: Actions_1.IosActionType.RemoveAscApiKey,
            title: 'Delete an API Key',
            scope: Actions_1.Scope.Account,
        },
        {
            value: Actions_1.IosActionType.GoBackToHighLevelActions,
            title: 'Go back',
            scope: Actions_1.Scope.Manager,
        },
    ];
}
exports.getAscApiKeyActions = getAscApiKeyActions;
function getBuildCredentialsActions(ctx) {
    return [
        {
            // This command will be triggered during build to ensure all credentials are ready
            // I'm leaving it here for now to simplify testing
            value: Actions_1.IosActionType.SetUpBuildCredentials,
            title: 'All: Set up all the required credentials to build your project',
            scope: Actions_1.Scope.Project,
        },
        {
            value: Actions_1.IosActionType.UseExistingDistributionCertificate,
            title: 'Distribution Certificate: Use an existing one for your project',
            scope: Actions_1.Scope.Project,
        },
        {
            value: Actions_1.IosActionType.CreateDistributionCertificate,
            title: `Distribution Certificate: Add a new one to your account`,
            scope: ctx.hasProjectContext ? Actions_1.Scope.Project : Actions_1.Scope.Account,
        },
        {
            value: Actions_1.IosActionType.RemoveDistributionCertificate,
            title: 'Distribution Certificate: Delete one from your account',
            scope: Actions_1.Scope.Account,
        },
        {
            value: Actions_1.IosActionType.RemoveProvisioningProfile,
            title: 'Provisioning Profile: Delete one from your project',
            scope: Actions_1.Scope.Project,
        },
        {
            value: Actions_1.IosActionType.GoBackToHighLevelActions,
            title: 'Go back',
            scope: Actions_1.Scope.Manager,
        },
    ];
}
exports.getBuildCredentialsActions = getBuildCredentialsActions;
