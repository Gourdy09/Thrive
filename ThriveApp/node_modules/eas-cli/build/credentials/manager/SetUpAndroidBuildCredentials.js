"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpAndroidBuildCredentials = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const assert_1 = tslib_1.__importDefault(require("assert"));
const Actions_1 = require("./Actions");
const CheckBuildProfileFlagAgainstEasJson_1 = require("./CheckBuildProfileFlagAgainstEasJson");
const ManageAndroid_1 = require("./ManageAndroid");
const context_1 = require("../context");
class SetUpAndroidBuildCredentials extends ManageAndroid_1.ManageAndroid {
    constructor(callingAction, projectDir, setUpBuildCredentialsWithProfileNameFromFlag) {
        super(callingAction, projectDir);
        this.setUpBuildCredentialsWithProfileNameFromFlag = setUpBuildCredentialsWithProfileNameFromFlag;
    }
    async runAsync() {
        const hasProjectContext = !!this.callingAction.projectInfo;
        const buildProfile = hasProjectContext
            ? await new CheckBuildProfileFlagAgainstEasJson_1.CheckBuildProfileFlagAgainstEasJson(this.projectDir, eas_build_job_1.Platform.ANDROID, this.setUpBuildCredentialsWithProfileNameFromFlag).runAsync()
            : null;
        let projectInfo = null;
        if (hasProjectContext) {
            const { exp, projectId } = await this.callingAction.getDynamicPrivateProjectConfigAsync({
                env: buildProfile?.env,
            });
            projectInfo = { exp, projectId };
        }
        const ctx = new context_1.CredentialsContext({
            projectDir: process.cwd(),
            projectInfo,
            user: this.callingAction.actor,
            graphqlClient: this.callingAction.graphqlClient,
            analytics: this.callingAction.analytics,
            env: buildProfile?.env,
            nonInteractive: false,
            vcsClient: this.callingAction.vcsClient,
        });
        let gradleContext;
        if (ctx.hasProjectContext) {
            (0, assert_1.default)(buildProfile, 'buildProfile must be defined in a project context');
            gradleContext = await this.createProjectContextAsync(ctx, buildProfile);
        }
        if (this.setUpBuildCredentialsWithProfileNameFromFlag) {
            await this.runProjectSpecificActionAsync(ctx, Actions_1.AndroidActionType.SetUpBuildCredentials, gradleContext);
        }
    }
}
exports.SetUpAndroidBuildCredentials = SetUpAndroidBuildCredentials;
