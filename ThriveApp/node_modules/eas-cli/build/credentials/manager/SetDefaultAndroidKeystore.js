"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetDefaultAndroidKeystore = void 0;
const tslib_1 = require("tslib");
const log_1 = tslib_1.__importDefault(require("../../log"));
const prompts_1 = require("../../prompts");
const BuildCredentialsUtils_1 = require("../android/actions/BuildCredentialsUtils");
class SetDefaultAndroidKeystore {
    constructor(app) {
        this.app = app;
    }
    async runAsync(ctx) {
        const buildCredentialsList = await ctx.android.getAndroidAppBuildCredentialsListAsync(ctx.graphqlClient, this.app);
        if (buildCredentialsList.length === 0) {
            log_1.default.log(`You don't have any Android build credentials`);
            return;
        }
        const sortedBuildCredentialsList = (0, BuildCredentialsUtils_1.sortBuildCredentials)(buildCredentialsList);
        const sortedBuildCredentialsChoices = sortedBuildCredentialsList.map(buildCredentials => ({
            title: buildCredentials.isDefault
                ? `${buildCredentials.name} (Default)`
                : buildCredentials.name,
            value: buildCredentials,
        }));
        const { buildCredentialsResult } = await (0, prompts_1.promptAsync)({
            type: 'select',
            name: 'buildCredentialsResult',
            message: 'Select build credentials',
            choices: [...sortedBuildCredentialsChoices, { title: 'Cancel', value: null }],
        });
        if (!buildCredentialsResult?.androidKeystore) {
            return;
        }
        log_1.default.log('Updating the default build credentials for this project...');
        return await ctx.android.setDefaultAndroidAppBuildCredentialsAsync(ctx.graphqlClient, {
            ...buildCredentialsResult,
            isDefault: true,
        });
    }
}
exports.SetDefaultAndroidKeystore = SetDefaultAndroidKeystore;
