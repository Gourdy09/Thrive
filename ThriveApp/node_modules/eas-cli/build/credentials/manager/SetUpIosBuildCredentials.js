"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpIosBuildCredentials = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const assert_1 = tslib_1.__importDefault(require("assert"));
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const Actions_1 = require("./Actions");
const CheckBuildProfileFlagAgainstEasJson_1 = require("./CheckBuildProfileFlagAgainstEasJson");
const ManageIos_1 = require("./ManageIos");
const projectUtils_1 = require("../../project/projectUtils");
const actions_1 = require("../../user/actions");
const context_1 = require("../context");
class SetUpIosBuildCredentials extends ManageIos_1.ManageIos {
    constructor(callingAction, projectDir, setUpBuildCredentialsWithProfileNameFromFlag) {
        super(callingAction, projectDir);
        this.setUpBuildCredentialsWithProfileNameFromFlag = setUpBuildCredentialsWithProfileNameFromFlag;
    }
    async runAsync() {
        const buildProfile = this.callingAction.projectInfo
            ? await new CheckBuildProfileFlagAgainstEasJson_1.CheckBuildProfileFlagAgainstEasJson(this.projectDir, eas_build_job_1.Platform.IOS, this.setUpBuildCredentialsWithProfileNameFromFlag).runAsync()
            : null;
        let projectInfo = null;
        if (this.callingAction.projectInfo) {
            const { exp, projectId } = await this.callingAction.getDynamicPrivateProjectConfigAsync({
                env: buildProfile?.env,
            });
            projectInfo = { exp, projectId };
        }
        const ctx = new context_1.CredentialsContext({
            projectDir: this.projectDir,
            projectInfo,
            user: this.callingAction.actor,
            graphqlClient: this.callingAction.graphqlClient,
            analytics: this.callingAction.analytics,
            env: buildProfile?.env,
            nonInteractive: false,
            vcsClient: this.callingAction.vcsClient,
        });
        await ctx.bestEffortAppStoreAuthenticateAsync();
        const getAccountForProjectAsync = async (projectId) => {
            return await (0, projectUtils_1.getOwnerAccountForProjectIdAsync)(ctx.graphqlClient, projectId);
        };
        const account = ctx.hasProjectContext
            ? await getAccountForProjectAsync(ctx.projectId)
            : (0, actions_1.ensureActorHasPrimaryAccount)(ctx.user);
        let app = null;
        let targets = null;
        if (ctx.hasProjectContext) {
            (0, assert_1.default)(buildProfile, 'buildProfile must be defined in project context');
            const projectContext = await this.createProjectContextAsync(ctx, account, buildProfile);
            app = projectContext.app;
            targets = projectContext.targets;
        }
        await this.runProjectSpecificActionAsync(ctx, (0, nullthrows_1.default)(app, 'app must be defined in project context'), (0, nullthrows_1.default)(targets, 'targets must be defined in project context'), (0, nullthrows_1.default)(buildProfile, 'buildProfile must be defined in project context'), Actions_1.IosActionType.SetUpBuildCredentials);
    }
}
exports.SetUpIosBuildCredentials = SetUpIosBuildCredentials;
