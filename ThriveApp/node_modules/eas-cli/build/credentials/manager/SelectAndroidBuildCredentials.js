"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectExistingAndroidBuildCredentials = exports.SelectAndroidBuildCredentials = exports.SelectAndroidBuildCredentialsResultType = void 0;
const tslib_1 = require("tslib");
const log_1 = tslib_1.__importDefault(require("../../log"));
const prompts_1 = require("../../prompts");
const BuildCredentialsUtils_1 = require("../android/actions/BuildCredentialsUtils");
var SelectAndroidBuildCredentialsResultType;
(function (SelectAndroidBuildCredentialsResultType) {
    SelectAndroidBuildCredentialsResultType[SelectAndroidBuildCredentialsResultType["CREATE_REQUEST"] = 0] = "CREATE_REQUEST";
    SelectAndroidBuildCredentialsResultType[SelectAndroidBuildCredentialsResultType["EXISTING_CREDENTIALS"] = 1] = "EXISTING_CREDENTIALS";
})(SelectAndroidBuildCredentialsResultType || (exports.SelectAndroidBuildCredentialsResultType = SelectAndroidBuildCredentialsResultType = {}));
/**
 * Return a selected Android Build Credential, or a request to make a new one
 */
class SelectAndroidBuildCredentials {
    constructor(app) {
        this.app = app;
    }
    async runAsync(ctx) {
        const buildCredentialsList = await ctx.android.getAndroidAppBuildCredentialsListAsync(ctx.graphqlClient, this.app);
        if (buildCredentialsList.length === 0) {
            return {
                resultType: SelectAndroidBuildCredentialsResultType.CREATE_REQUEST,
                result: {
                    isDefault: true,
                    name: await (0, BuildCredentialsUtils_1.promptForNameAsync)(),
                },
            };
        }
        const sortedBuildCredentialsList = (0, BuildCredentialsUtils_1.sortBuildCredentials)(buildCredentialsList);
        const sortedBuildCredentialsChoices = sortedBuildCredentialsList.map(buildCredentials => ({
            title: buildCredentials.isDefault
                ? `${buildCredentials.name} (Default)`
                : buildCredentials.name,
            value: buildCredentials,
        }));
        const buildCredentialsResultOrRequestToCreateNew = (await (0, prompts_1.promptAsync)({
            type: 'select',
            name: 'buildCredentialsResultOrRequestToCreateNew',
            message: 'Select build credentials',
            choices: [
                ...sortedBuildCredentialsChoices,
                {
                    title: 'Create A New Build Credential Configuration',
                    value: SelectAndroidBuildCredentialsResultType.CREATE_REQUEST,
                },
            ],
        })).buildCredentialsResultOrRequestToCreateNew;
        if (buildCredentialsResultOrRequestToCreateNew !==
            SelectAndroidBuildCredentialsResultType.CREATE_REQUEST) {
            return {
                resultType: SelectAndroidBuildCredentialsResultType.EXISTING_CREDENTIALS,
                result: buildCredentialsResultOrRequestToCreateNew,
            };
        }
        const defaultCredentialsExists = buildCredentialsList.some(buildCredentials => buildCredentials.isDefault);
        return {
            resultType: SelectAndroidBuildCredentialsResultType.CREATE_REQUEST,
            result: {
                isDefault: !defaultCredentialsExists, // make default if there isn't one
                name: await (0, BuildCredentialsUtils_1.promptForNameAsync)(),
            },
        };
    }
}
exports.SelectAndroidBuildCredentials = SelectAndroidBuildCredentials;
class SelectExistingAndroidBuildCredentials {
    constructor(app) {
        this.app = app;
    }
    async runAsync(ctx) {
        const buildCredentialsList = await ctx.android.getAndroidAppBuildCredentialsListAsync(ctx.graphqlClient, this.app);
        if (buildCredentialsList.length === 0) {
            log_1.default.log(`You don't have any Android Build Credentials`);
            return null;
        }
        else if (buildCredentialsList.length === 1) {
            return buildCredentialsList[0];
        }
        const sortedBuildCredentialsList = (0, BuildCredentialsUtils_1.sortBuildCredentials)(buildCredentialsList);
        const sortedBuildCredentialsChoices = sortedBuildCredentialsList.map(buildCredentials => ({
            title: buildCredentials.isDefault
                ? `${buildCredentials.name} (Default)`
                : buildCredentials.name,
            value: buildCredentials,
        }));
        return (await (0, prompts_1.promptAsync)({
            type: 'select',
            name: 'buildCredentials',
            message: 'Select build credentials',
            choices: sortedBuildCredentialsChoices,
        })).buildCredentials;
    }
}
exports.SelectExistingAndroidBuildCredentials = SelectExistingAndroidBuildCredentials;
