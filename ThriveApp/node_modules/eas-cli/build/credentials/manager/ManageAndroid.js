"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManageAndroid = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const assert_1 = tslib_1.__importDefault(require("assert"));
const Actions_1 = require("./Actions");
const AndroidActions_1 = require("./AndroidActions");
const CreateAndroidBuildCredentials_1 = require("./CreateAndroidBuildCredentials");
const HelperActions_1 = require("./HelperActions");
const SelectAndroidBuildCredentials_1 = require("./SelectAndroidBuildCredentials");
const SelectBuildProfileFromEasJson_1 = require("./SelectBuildProfileFromEasJson");
const SetDefaultAndroidKeystore_1 = require("./SetDefaultAndroidKeystore");
const log_1 = tslib_1.__importStar(require("../../log"));
const gradle_1 = require("../../project/android/gradle");
const prompts_1 = require("../../prompts");
const AssignFcm_1 = require("../android/actions/AssignFcm");
const AssignGoogleServiceAccountKeyForFcmV1_1 = require("../android/actions/AssignGoogleServiceAccountKeyForFcmV1");
const AssignGoogleServiceAccountKeyForSubmissions_1 = require("../android/actions/AssignGoogleServiceAccountKeyForSubmissions");
const BuildCredentialsUtils_1 = require("../android/actions/BuildCredentialsUtils");
const CreateFcm_1 = require("../android/actions/CreateFcm");
const CreateGoogleServiceAccountKey_1 = require("../android/actions/CreateGoogleServiceAccountKey");
const DownloadKeystore_1 = require("../android/actions/DownloadKeystore");
const RemoveFcm_1 = require("../android/actions/RemoveFcm");
const RemoveGoogleServiceAccountKey_1 = require("../android/actions/RemoveGoogleServiceAccountKey");
const RemoveKeystore_1 = require("../android/actions/RemoveKeystore");
const SetUpBuildCredentials_1 = require("../android/actions/SetUpBuildCredentials");
const SetUpBuildCredentialsFromCredentialsJson_1 = require("../android/actions/SetUpBuildCredentialsFromCredentialsJson");
const SetUpGoogleServiceAccountKeyForFcmV1_1 = require("../android/actions/SetUpGoogleServiceAccountKeyForFcmV1");
const SetUpGoogleServiceAccountKeyForSubmissions_1 = require("../android/actions/SetUpGoogleServiceAccountKeyForSubmissions");
const UpdateCredentialsJson_1 = require("../android/actions/UpdateCredentialsJson");
const UseExistingGoogleServiceAccountKey_1 = require("../android/actions/UseExistingGoogleServiceAccountKey");
const printCredentials_1 = require("../android/utils/printCredentials");
const context_1 = require("../context");
const errors_1 = require("../errors");
class ManageAndroid {
    constructor(callingAction, projectDir) {
        this.callingAction = callingAction;
        this.projectDir = projectDir;
    }
    async runAsync(currentActions = AndroidActions_1.highLevelActions) {
        const hasProjectContext = !!this.callingAction.projectInfo;
        const buildProfile = hasProjectContext
            ? await new SelectBuildProfileFromEasJson_1.SelectBuildProfileFromEasJson(this.projectDir, eas_build_job_1.Platform.ANDROID).runAsync()
            : null;
        let projectInfo = null;
        if (hasProjectContext) {
            const { exp, projectId } = await this.callingAction.getDynamicPrivateProjectConfigAsync({
                env: buildProfile?.env,
            });
            projectInfo = { exp, projectId };
        }
        const ctx = new context_1.CredentialsContext({
            projectDir: process.cwd(),
            projectInfo,
            user: this.callingAction.actor,
            graphqlClient: this.callingAction.graphqlClient,
            analytics: this.callingAction.analytics,
            env: buildProfile?.env,
            nonInteractive: false,
            vcsClient: this.callingAction.vcsClient,
        });
        let gradleContext;
        if (ctx.hasProjectContext) {
            (0, assert_1.default)(buildProfile, 'buildProfile must be defined in a project context');
            gradleContext = await this.createProjectContextAsync(ctx, buildProfile);
        }
        while (true) {
            try {
                if (ctx.hasProjectContext) {
                    const appLookupParams = await (0, BuildCredentialsUtils_1.getAppLookupParamsFromContextAsync)(ctx, gradleContext);
                    const appCredentials = await ctx.android.getAndroidAppCredentialsWithCommonFieldsAsync(ctx.graphqlClient, appLookupParams);
                    if (!appCredentials) {
                        (0, printCredentials_1.displayEmptyAndroidCredentials)(appLookupParams);
                    }
                    else {
                        (0, printCredentials_1.displayAndroidAppCredentials)({ appLookupParams, appCredentials });
                    }
                    // copy legacy credentials if user is new to EAS and has legacy credentials
                    const canCopyLegacyCredentials = await (0, BuildCredentialsUtils_1.canCopyLegacyCredentialsAsync)(ctx, appLookupParams);
                    if (canCopyLegacyCredentials) {
                        await (0, BuildCredentialsUtils_1.promptUserAndCopyLegacyCredentialsAsync)(ctx, appLookupParams);
                    }
                }
                const { action: chosenAction } = await (0, prompts_1.promptAsync)({
                    type: 'select',
                    name: 'action',
                    message: 'What do you want to do?',
                    choices: currentActions.map(action => ({
                        value: action.value,
                        title: action.title,
                    })),
                });
                const actionInfo = currentActions.find(action => action.value === chosenAction);
                if (!actionInfo) {
                    throw new Error('Action not supported yet');
                }
                if (actionInfo.scope === Actions_1.Scope.Manager) {
                    if (chosenAction === Actions_1.AndroidActionType.ManageBuildCredentials) {
                        currentActions = AndroidActions_1.buildCredentialsActions;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.ManageFcm) {
                        currentActions = AndroidActions_1.fcmActions;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.ManageGoogleServiceAccount) {
                        currentActions = AndroidActions_1.gsaActions;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.ManageGoogleServiceAccountKeyForSubmissions) {
                        currentActions = AndroidActions_1.gsaKeyActionsForSubmissions;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.ManageGoogleServiceAccountKeyForFcmV1) {
                        currentActions = AndroidActions_1.gsaKeyActionsForFcmV1;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.ManageCredentialsJson) {
                        currentActions = AndroidActions_1.credentialsJsonActions;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.GoBackToHighLevelActions) {
                        currentActions = AndroidActions_1.highLevelActions;
                        continue;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.GoBackToCaller) {
                        await this.callingAction.runAsync(ctx);
                        return;
                    }
                    else if (chosenAction === Actions_1.AndroidActionType.Exit) {
                        return;
                    }
                }
                await this.runProjectSpecificActionAsync(ctx, chosenAction, gradleContext);
            }
            catch (err) {
                if (err instanceof errors_1.AndroidPackageNotDefinedError) {
                    err.message += `\n${(0, log_1.learnMore)('https://docs.expo.dev/workflow/configuration/')} about configuration with app.json/app.config.js`;
                    throw err; // breaks out of the loop to avoid failing again after continuation
                }
                log_1.default.error(err);
                if (process.env.DEBUG) {
                    throw err; // breaks out of the loop so we can get stack trace
                }
                log_1.default.error(`Cryptic error? ${(0, log_1.learnMore)('https://expo.fyi/cryptic-error-eas')}`);
            }
            await new HelperActions_1.PressAnyKeyToContinue().runAsync();
        }
    }
    async createProjectContextAsync(ctx, buildProfile) {
        (0, assert_1.default)(ctx.hasProjectContext, 'createProjectContextAsync: must have project context.');
        return await (0, gradle_1.resolveGradleBuildContextAsync)(ctx.projectDir, buildProfile, ctx.vcsClient);
    }
    async runProjectSpecificActionAsync(ctx, action, gradleContext) {
        (0, assert_1.default)(ctx.hasProjectContext, 'You must be in your project directory in order to perform this action');
        const appLookupParams = await (0, BuildCredentialsUtils_1.getAppLookupParamsFromContextAsync)(ctx, gradleContext);
        if (action === Actions_1.AndroidActionType.CreateKeystore) {
            await new CreateAndroidBuildCredentials_1.CreateAndroidBuildCredentials(appLookupParams).runAsync(ctx);
        }
        else if (action === Actions_1.AndroidActionType.SetDefaultKeystore) {
            await new SetDefaultAndroidKeystore_1.SetDefaultAndroidKeystore(appLookupParams).runAsync(ctx);
        }
        else if (action === Actions_1.AndroidActionType.DownloadKeystore) {
            const buildCredentials = await new SelectAndroidBuildCredentials_1.SelectExistingAndroidBuildCredentials(appLookupParams).runAsync(ctx);
            if (buildCredentials) {
                await new DownloadKeystore_1.DownloadKeystore({ app: appLookupParams }).runAsync(ctx, buildCredentials);
            }
        }
        else if (action === Actions_1.AndroidActionType.RemoveKeystore) {
            const buildCredentials = await new SelectAndroidBuildCredentials_1.SelectExistingAndroidBuildCredentials(appLookupParams).runAsync(ctx);
            if (buildCredentials) {
                await new RemoveKeystore_1.RemoveKeystore(appLookupParams).runAsync(ctx, buildCredentials);
            }
        }
        else if (action === Actions_1.AndroidActionType.CreateFcm) {
            const fcm = await new CreateFcm_1.CreateFcm(appLookupParams.account).runAsync(ctx);
            await new AssignFcm_1.AssignFcm(appLookupParams).runAsync(ctx, fcm);
        }
        else if (action === Actions_1.AndroidActionType.RemoveFcm) {
            await new RemoveFcm_1.RemoveFcm(appLookupParams).runAsync(ctx);
        }
        else if (action === Actions_1.AndroidActionType.SetUpGsaKeyForSubmissions) {
            await new SetUpGoogleServiceAccountKeyForSubmissions_1.SetUpGoogleServiceAccountKeyForSubmissions(appLookupParams).runAsync(ctx);
        }
        else if (action === Actions_1.AndroidActionType.UseExistingGsaKeyForSubmissions) {
            const gsaKey = await new UseExistingGoogleServiceAccountKey_1.UseExistingGoogleServiceAccountKey(appLookupParams.account).runAsync(ctx);
            if (gsaKey) {
                await new AssignGoogleServiceAccountKeyForSubmissions_1.AssignGoogleServiceAccountKeyForSubmissions(appLookupParams).runAsync(ctx, gsaKey);
            }
        }
        else if (action === Actions_1.AndroidActionType.SetUpGsaKeyForFcmV1) {
            await new SetUpGoogleServiceAccountKeyForFcmV1_1.SetUpGoogleServiceAccountKeyForFcmV1(appLookupParams).runAsync(ctx);
        }
        else if (action === Actions_1.AndroidActionType.UseExistingGsaKeyForFcmV1) {
            const gsaKey = await new UseExistingGoogleServiceAccountKey_1.UseExistingGoogleServiceAccountKey(appLookupParams.account).runAsync(ctx);
            if (gsaKey) {
                await new AssignGoogleServiceAccountKeyForFcmV1_1.AssignGoogleServiceAccountKeyForFcmV1(appLookupParams).runAsync(ctx, gsaKey);
            }
        }
        else if (action === Actions_1.AndroidActionType.CreateGsaKey) {
            await new CreateGoogleServiceAccountKey_1.CreateGoogleServiceAccountKey(appLookupParams.account).runAsync(ctx);
        }
        else if (action === Actions_1.AndroidActionType.RemoveGsaKey) {
            await new RemoveGoogleServiceAccountKey_1.SelectAndRemoveGoogleServiceAccountKey(appLookupParams.account).runAsync(ctx);
        }
        else if (action === Actions_1.AndroidActionType.UpdateCredentialsJson) {
            const buildCredentials = await new SelectAndroidBuildCredentials_1.SelectExistingAndroidBuildCredentials(appLookupParams).runAsync(ctx);
            if (buildCredentials) {
                await new UpdateCredentialsJson_1.UpdateCredentialsJson().runAsync(ctx, buildCredentials);
            }
        }
        else if (action === Actions_1.AndroidActionType.SetUpBuildCredentialsFromCredentialsJson) {
            await new SetUpBuildCredentialsFromCredentialsJson_1.SetUpBuildCredentialsFromCredentialsJson(appLookupParams).runAsync(ctx);
        }
        else if (action === Actions_1.AndroidActionType.SetUpBuildCredentials) {
            await new SetUpBuildCredentials_1.SetUpBuildCredentials({ app: appLookupParams }).runAsync(ctx);
        }
    }
}
exports.ManageAndroid = ManageAndroid;
