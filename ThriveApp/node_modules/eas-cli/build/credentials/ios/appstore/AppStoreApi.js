"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ascApiKey_1 = require("./ascApiKey");
const authenticate_1 = require("./authenticate");
const authenticateTypes_1 = require("./authenticateTypes");
const distributionCertificate_1 = require("./distributionCertificate");
const ensureAppExists_1 = require("./ensureAppExists");
const provisioningProfile_1 = require("./provisioningProfile");
const provisioningProfileAdhoc_1 = require("./provisioningProfileAdhoc");
const pushKey_1 = require("./pushKey");
const resolveCredentials_1 = require("./resolveCredentials");
const log_1 = tslib_1.__importDefault(require("../../../log"));
class AppStoreApi {
    constructor() {
        this.defaultAuthenticationMode = (0, resolveCredentials_1.hasAscEnvVars)()
            ? authenticateTypes_1.AuthenticationMode.API_KEY
            : authenticateTypes_1.AuthenticationMode.USER;
    }
    async ensureUserAuthenticatedAsync(options) {
        if (this.authCtx && !(0, authenticate_1.isUserAuthCtx)(this.authCtx)) {
            // already authenticated, but with the wrong type
            log_1.default.log(`Only user authentication is supported. Reauthenticating as user...`);
            this.authCtx = undefined;
        }
        const updatedAuthCtx = await this.ensureAuthenticatedAsync({
            ...options,
            mode: authenticateTypes_1.AuthenticationMode.USER,
        });
        return (0, authenticate_1.assertUserAuthCtx)(updatedAuthCtx);
    }
    async ensureAuthenticatedAsync(options) {
        if (!this.authCtx) {
            const mode = options?.mode ?? this.defaultAuthenticationMode;
            this.authCtx = await (0, authenticate_1.authenticateAsync)({ mode, ...options });
        }
        return this.authCtx;
    }
    async ensureBundleIdExistsAsync(app, options) {
        const ctx = await this.ensureAuthenticatedAsync();
        await (0, ensureAppExists_1.ensureBundleIdExistsAsync)(ctx, app, options);
    }
    async listDistributionCertificatesAsync() {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, distributionCertificate_1.listDistributionCertificatesAsync)(ctx);
    }
    async createDistributionCertificateAsync() {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, distributionCertificate_1.createDistributionCertificateAsync)(ctx);
    }
    async revokeDistributionCertificateAsync(ids) {
        const ctx = await this.ensureAuthenticatedAsync();
        await (0, distributionCertificate_1.revokeDistributionCertificateAsync)(ctx, ids);
    }
    async listPushKeysAsync() {
        const userCtx = await this.ensureUserAuthenticatedAsync();
        return await (0, pushKey_1.listPushKeysAsync)(userCtx);
    }
    async createPushKeyAsync(name) {
        const userCtx = await this.ensureUserAuthenticatedAsync();
        return await (0, pushKey_1.createPushKeyAsync)(userCtx, name);
    }
    async revokePushKeyAsync(ids) {
        const userCtx = await this.ensureUserAuthenticatedAsync();
        await (0, pushKey_1.revokePushKeyAsync)(userCtx, ids);
    }
    async useExistingProvisioningProfileAsync(bundleIdentifier, provisioningProfile, distCert) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, provisioningProfile_1.useExistingProvisioningProfileAsync)(ctx, bundleIdentifier, provisioningProfile, distCert);
    }
    async listProvisioningProfilesAsync(bundleIdentifier, applePlatform, profileClass) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, provisioningProfile_1.listProvisioningProfilesAsync)(ctx, bundleIdentifier, applePlatform, profileClass);
    }
    async createProvisioningProfileAsync(bundleIdentifier, distCert, profileName, applePlatform, profileClass) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, provisioningProfile_1.createProvisioningProfileAsync)(ctx, bundleIdentifier, distCert, profileName, applePlatform, profileClass);
    }
    async revokeProvisioningProfileAsync(bundleIdentifier, applePlatform, profileClass) {
        const ctx = await this.ensureAuthenticatedAsync();
        await (0, provisioningProfile_1.revokeProvisioningProfileAsync)(ctx, bundleIdentifier, applePlatform, profileClass);
    }
    async createOrReuseAdhocProvisioningProfileAsync(udids, bundleIdentifier, distCertSerialNumber, profileType) {
        const ctx = await this.ensureAuthenticatedAsync();
        return await (0, provisioningProfileAdhoc_1.createOrReuseAdhocProvisioningProfileAsync)(ctx, udids, bundleIdentifier, distCertSerialNumber, profileType);
    }
    async listAscApiKeysAsync() {
        const userCtx = await this.ensureUserAuthenticatedAsync();
        return await (0, ascApiKey_1.listAscApiKeysAsync)(userCtx);
    }
    async getAscApiKeyAsync(keyId) {
        const userCtx = await this.ensureUserAuthenticatedAsync();
        return await (0, ascApiKey_1.getAscApiKeyAsync)(userCtx, keyId);
    }
    async createAscApiKeyAsync(analytics, { nickname }) {
        const userCtx = await this.ensureUserAuthenticatedAsync();
        return await (0, ascApiKey_1.createAscApiKeyAsync)(analytics, userCtx, { nickname });
    }
    async revokeAscApiKeyAsync(keyId) {
        const userCtx = await this.ensureUserAuthenticatedAsync();
        return await (0, ascApiKey_1.revokeAscApiKeyAsync)(userCtx, keyId);
    }
}
exports.default = AppStoreApi;
