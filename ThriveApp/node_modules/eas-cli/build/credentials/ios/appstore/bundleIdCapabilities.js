"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapabilityMapping = exports.assertValidOptions = exports.syncCapabilitiesForEntitlementsAsync = exports.EXPO_NO_CAPABILITY_SYNC = void 0;
const tslib_1 = require("tslib");
const apple_utils_1 = require("@expo/apple-utils");
const getenv_1 = tslib_1.__importDefault(require("getenv"));
const util_1 = require("util");
const log_1 = tslib_1.__importDefault(require("../../../log"));
exports.EXPO_NO_CAPABILITY_SYNC = getenv_1.default.boolish('EXPO_NO_CAPABILITY_SYNC', false);
const validateBooleanOptions = (options) => {
    return typeof options === 'boolean';
};
const validatePrefixedStringArrayOptions = (prefix) => (options) => {
    return (Array.isArray(options) &&
        options.every(option => typeof option === 'string' && option.startsWith(prefix)));
};
const validateStringArrayOptions = (options) => {
    return Array.isArray(options) && options.every(option => typeof option === 'string');
};
const createValidateStringOptions = (allowed) => (options) => {
    return allowed.includes(options);
};
const createValidateStringArrayOptions = (allowed) => (options) => {
    return Array.isArray(options) && options.every(option => allowed.includes(option));
};
const validateDevProdString = createValidateStringOptions(['development', 'production']);
const getBooleanOptions = entitlement => {
    return entitlement === true ? apple_utils_1.CapabilityTypeOption.ON : apple_utils_1.CapabilityTypeOption.OFF;
};
const getDefinedOptions = entitlement => {
    return entitlement ? apple_utils_1.CapabilityTypeOption.ON : apple_utils_1.CapabilityTypeOption.OFF;
};
/**
 * Given an entitlements JSON object, synchronizes the remote capabilities for a bundle identifier.
 *
 * Example entitlements JSON:
 * ```js
 * {
 *   'com.apple.developer.healthkit': true,
 *   'com.apple.developer.in-app-payments': ['merchant.com.example.development'],
 * }
 * ```
 *
 * @param bundleId bundle identifier object
 * @param entitlements JSON representation of the entitlements plist
 * @returns
 */
async function syncCapabilitiesForEntitlementsAsync(bundleId, entitlements = {}) {
    if (exports.EXPO_NO_CAPABILITY_SYNC) {
        return { enabled: [], disabled: [] };
    }
    const currentCapabilities = await bundleId.getBundleIdCapabilitiesAsync();
    if (log_1.default.isDebug) {
        log_1.default.log(`Current remote capabilities:\n${JSON.stringify(currentCapabilities, null, 2)}`);
        log_1.default.log(`\nCurrent local entitlements:\n${JSON.stringify(entitlements, null, 2)}`);
    }
    const { enabledCapabilityNames, request, remainingCapabilities } = getCapabilitiesToEnable(currentCapabilities, entitlements);
    const { disabledCapabilityNames, request: modifiedRequest } = getCapabilitiesToDisable(bundleId, remainingCapabilities, request);
    if (modifiedRequest.length) {
        log_1.default.debug(`Patch Request:`, (0, util_1.inspect)(modifiedRequest, { depth: null, colors: true }));
        try {
            await bundleId.updateBundleIdCapabilityAsync(modifiedRequest);
        }
        catch (error) {
            if (error.message.match(/bundle '[\w\d]+' cannot be deleted. Delete all the Apps/)) {
                log_1.default.error('Failed to patch capabilities:', (0, util_1.inspect)(modifiedRequest, { depth: null, colors: true }));
                throw new Error(`Unexpected error occurred while attempting to update capabilities for app "${bundleId.attributes.identifier}".\nCapabilities can be modified manually in the Apple developer console at https://developer-mdn.apple.com/account/resources/identifiers/bundleId/edit/${bundleId.id}.\nAuto capability syncing can be disabled with the environment variable \`EXPO_NO_CAPABILITY_SYNC=1\`.\n${error.message}`);
            }
        }
    }
    return { enabled: enabledCapabilityNames, disabled: disabledCapabilityNames };
}
exports.syncCapabilitiesForEntitlementsAsync = syncCapabilitiesForEntitlementsAsync;
function getCapabilitiesToEnable(currentCapabilities, entitlements) {
    const enabledCapabilityNames = [];
    const request = [];
    const remainingCapabilities = [...currentCapabilities];
    for (const [key, value] of Object.entries(entitlements)) {
        const staticCapabilityInfo = exports.CapabilityMapping.find(capability => capability.entitlement === key);
        if (!staticCapabilityInfo) {
            if (log_1.default.isDebug) {
                log_1.default.log(`Skipping entitlement that is not supported by EAS: ${key}`);
            }
            continue;
        }
        const existingIndex = remainingCapabilities.findIndex(existing => existing.isType(staticCapabilityInfo.capability));
        const existing = existingIndex > -1 ? remainingCapabilities[existingIndex] : null;
        // Only skip if the existing capability is a simple boolean value,
        // if it has more complex settings then we should always update it.
        // If the `existing.attributes.settings` object is defined, then we can determine that it has extra configuration.
        if (existing && existing?.attributes.settings == null) {
            // Remove the item from the list of capabilities so we don't disable it.
            remainingCapabilities.splice(existingIndex, 1);
            if (log_1.default.isDebug) {
                log_1.default.log(`Skipping existing capability: ${key} (${staticCapabilityInfo.name})`);
                log_1.default.log(`Remaining to remove: `, remainingCapabilities.map(({ id }) => id));
            }
            continue;
        }
        assertValidOptions(staticCapabilityInfo, value);
        enabledCapabilityNames.push(staticCapabilityInfo.name);
        const option = staticCapabilityInfo.getOptions(value, entitlements);
        request.push({
            capabilityType: staticCapabilityInfo.capability,
            option,
        });
    }
    return { enabledCapabilityNames, request, remainingCapabilities };
}
function assertValidOptions(classifier, value) {
    if (!classifier.validateOptions(value)) {
        let reason = '';
        if (classifier.capabilityIdPrefix) {
            // Assert string array matching prefix. ASC will throw if the IDs are invalid, this just saves some time.
            reason = ` Expected an array of strings, where each string is prefixed with "${classifier.capabilityIdPrefix}", ex: ["${classifier.capabilityIdPrefix}myapp"]`;
        }
        throw new Error(`iOS entitlement "${classifier.entitlement}" has invalid value "${value}".${reason}`);
    }
}
exports.assertValidOptions = assertValidOptions;
function getCapabilitiesToDisable(bundleId, currentCapabilities, request) {
    if (log_1.default.isDebug) {
        log_1.default.log(`Existing to disable: `, currentCapabilities.map(({ id }) => id));
    }
    const disabledCapabilityNames = [];
    // Disable any extras that aren't present, this functionality is kinda unreliable because managed apps
    // might be enabling capabilities in modifiers.
    for (const existingCapability of currentCapabilities) {
        // GC and IAP are always enabled in apps by default so we should avoid modifying them.
        if (existingCapability.isType(apple_utils_1.CapabilityType.IN_APP_PURCHASE) ||
            existingCapability.isType(apple_utils_1.CapabilityType.GAME_CENTER)) {
            continue;
        }
        if (existingCapability.attributes) {
            let adjustedType = existingCapability.attributes.capabilityType;
            if (!adjustedType) {
                adjustedType = existingCapability.id.replace(`${bundleId.id}_`, '');
            }
            // Only disable capabilities that we handle,
            // this enables devs to turn on capabilities outside of EAS without worrying about us disabling them.
            const staticCapabilityInfo = exports.CapabilityMapping.find(capability => capability.capability === adjustedType);
            if (staticCapabilityInfo &&
                !request.find(request => request.capabilityType && existingCapability.isType(request.capabilityType))) {
                request.push({
                    // @ts-expect-error
                    capabilityType: adjustedType,
                    option: apple_utils_1.CapabilityTypeOption.OFF,
                });
                disabledCapabilityNames.push(staticCapabilityInfo.name);
            }
        }
    }
    return { disabledCapabilityNames, request };
}
// NOTE(Bacon): From manually toggling values in Xcode and checking the git diff and network requests.
// Last Updated: July 22nd, 2021
// https://developer-mdn.apple.com/documentation/bundleresources/entitlements
exports.CapabilityMapping = [
    {
        name: 'HomeKit',
        entitlement: 'com.apple.developer.homekit',
        capability: apple_utils_1.CapabilityType.HOME_KIT,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        name: 'Hotspot',
        entitlement: 'com.apple.developer.networking.HotspotConfiguration',
        capability: apple_utils_1.CapabilityType.HOT_SPOT,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        name: 'Multipath',
        entitlement: 'com.apple.developer.networking.multipath',
        capability: apple_utils_1.CapabilityType.MULTIPATH,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        name: 'SiriKit',
        entitlement: 'com.apple.developer.siri',
        capability: apple_utils_1.CapabilityType.SIRI_KIT,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        name: 'Wireless Accessory Configuration',
        entitlement: 'com.apple.external-accessory.wireless-configuration',
        capability: apple_utils_1.CapabilityType.WIRELESS_ACCESSORY,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        name: 'Extended Virtual Address Space',
        entitlement: 'com.apple.developer.kernel.extended-virtual-addressing',
        capability: apple_utils_1.CapabilityType.EXTENDED_VIRTUAL_ADDRESSING,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        name: 'Access WiFi Information',
        entitlement: 'com.apple.developer.networking.wifi-info',
        capability: apple_utils_1.CapabilityType.ACCESS_WIFI,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        name: 'Associated Domains',
        entitlement: 'com.apple.developer.associated-domains',
        capability: apple_utils_1.CapabilityType.ASSOCIATED_DOMAINS,
        validateOptions: validateStringArrayOptions,
        getOptions: getDefinedOptions,
    },
    {
        name: 'AutoFill Credential Provider',
        entitlement: 'com.apple.developer.authentication-services.autofill-credential-provider',
        capability: apple_utils_1.CapabilityType.AUTO_FILL_CREDENTIAL,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        name: 'HealthKit',
        entitlement: 'com.apple.developer.healthkit',
        capability: apple_utils_1.CapabilityType.HEALTH_KIT,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    //   {
    //     // ?? -- adds UIRequiredDeviceCapabilities gamekit
    //     // Always locked on in dev portal
    //     name: 'Game Center',
    //     entitlement: 'com.apple.developer.game-center',
    //     capability: CapabilityType.GAME_CENTER,
    //     validateOptions: validateBooleanOptions,
    //     getOptions: getBooleanOptions,
    //   },
    {
        name: 'App Groups',
        entitlement: 'com.apple.security.application-groups',
        capability: apple_utils_1.CapabilityType.APP_GROUP,
        // Ex: ['group.CY-A5149AC2-49FC-11E7-B3F3-0335A16FFB8D.com.cydia.Extender']
        validateOptions: validatePrefixedStringArrayOptions('group.'),
        getOptions: getDefinedOptions,
        capabilityIdModel: apple_utils_1.AppGroup,
        capabilityIdPrefix: 'group.',
    },
    {
        name: 'Apple Pay Payment Processing',
        entitlement: 'com.apple.developer.in-app-payments',
        capability: apple_utils_1.CapabilityType.APPLE_PAY,
        // Ex: ['merchant.com.example.development']
        validateOptions: validatePrefixedStringArrayOptions('merchant.'),
        getOptions: getDefinedOptions,
        capabilityIdModel: apple_utils_1.MerchantId,
        capabilityIdPrefix: 'merchant.',
    },
    {
        name: 'iCloud',
        entitlement: 'com.apple.developer.icloud-container-identifiers',
        capability: apple_utils_1.CapabilityType.ICLOUD,
        validateOptions: validatePrefixedStringArrayOptions('iCloud.'),
        // Only supports Xcode +6, 5 could be added if needed.
        getOptions: getDefinedOptions,
        capabilityIdModel: apple_utils_1.CloudContainer,
        capabilityIdPrefix: 'iCloud.',
    },
    {
        name: 'ClassKit',
        entitlement: 'com.apple.developer.ClassKit-environment',
        capability: apple_utils_1.CapabilityType.CLASS_KIT,
        validateOptions: validateDevProdString,
        getOptions: getDefinedOptions,
    },
    {
        name: 'Communication Notifications',
        entitlement: 'com.apple.developer.usernotifications.communication',
        capability: apple_utils_1.CapabilityType.USER_NOTIFICATIONS_COMMUNICATION,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        name: 'Time Sensitive Notifications',
        entitlement: 'com.apple.developer.usernotifications.time-sensitive',
        capability: apple_utils_1.CapabilityType.USER_NOTIFICATIONS_TIME_SENSITIVE,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        name: 'Group Activities',
        entitlement: 'com.apple.developer.group-session',
        capability: apple_utils_1.CapabilityType.GROUP_ACTIVITIES,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        name: 'Family Controls',
        entitlement: 'com.apple.developer.family-controls',
        capability: apple_utils_1.CapabilityType.FAMILY_CONTROLS,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        // https://developer-mdn.apple.com/documentation/bundleresources/entitlements/com_apple_developer_default-data-protection
        name: 'Data Protection',
        entitlement: 'com.apple.developer.default-data-protection',
        capability: apple_utils_1.CapabilityType.DATA_PROTECTION,
        validateOptions: createValidateStringOptions([
            'NSFileProtectionCompleteUnlessOpen',
            'NSFileProtectionCompleteUntilFirstUserAuthentication',
            'NSFileProtectionNone',
            'NSFileProtectionComplete',
        ]),
        getOptions(entitlement) {
            if (entitlement === 'NSFileProtectionComplete') {
                return apple_utils_1.CapabilityTypeDataProtectionOption.COMPLETE_PROTECTION;
            }
            else if (entitlement === 'NSFileProtectionCompleteUnlessOpen') {
                return apple_utils_1.CapabilityTypeDataProtectionOption.PROTECTED_UNLESS_OPEN;
            }
            else if (entitlement === 'NSFileProtectionCompleteUntilFirstUserAuthentication') {
                return apple_utils_1.CapabilityTypeDataProtectionOption.PROTECTED_UNTIL_FIRST_USER_AUTH;
            }
            // NSFileProtectionNone isn't documented, not sure how to handle
            throw new Error(`iOS entitlement "com.apple.developer.default-data-protection" is using unsupported value "${entitlement}"`);
        },
    },
    {
        // Deprecated
        name: 'Inter-App Audio',
        entitlement: 'inter-app-audio',
        capability: apple_utils_1.CapabilityType.INTER_APP_AUDIO,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        // https://developer-mdn.apple.com/documentation/bundleresources/entitlements/com_apple_developer_networking_networkextension
        name: 'Network Extensions',
        entitlement: 'com.apple.developer.networking.networkextension',
        capability: apple_utils_1.CapabilityType.NETWORK_EXTENSIONS,
        validateOptions: createValidateStringArrayOptions([
            'dns-proxy',
            'app-proxy-provider',
            'content-filter-provider',
            'packet-tunnel-provider',
            'dns-proxy-systemextension',
            'app-proxy-provider-systemextension',
            'content-filter-provider-systemextension',
            'packet-tunnel-provider-systemextension',
            'dns-settings',
            'app-push-provider',
        ]),
        getOptions: getDefinedOptions,
    },
    {
        // https://developer-mdn.apple.com/documentation/bundleresources/entitlements/com_apple_developer_nfc_readersession_formats
        name: 'NFC Tag Reading',
        entitlement: 'com.apple.developer.nfc.readersession.formats',
        capability: apple_utils_1.CapabilityType.NFC_TAG_READING,
        // Technically it seems only `TAG` is allowed, but many apps and packages tell users to add `NDEF` as well.
        validateOptions: createValidateStringArrayOptions(['NDEF', 'TAG']),
        getOptions: getDefinedOptions,
    },
    {
        name: 'Personal VPN',
        entitlement: 'com.apple.developer.networking.vpn.api',
        capability: apple_utils_1.CapabilityType.PERSONAL_VPN,
        // Ex: ['allow-vpn']
        validateOptions: createValidateStringArrayOptions(['allow-vpn']),
        getOptions: getDefinedOptions,
    },
    {
        // https://developer-mdn.apple.com/documentation/bundleresources/entitlements/com_apple_developer_networking_vpn_api
        name: 'Push Notifications',
        // com.apple.developer.aps-environment
        entitlement: 'aps-environment',
        capability: apple_utils_1.CapabilityType.PUSH_NOTIFICATIONS,
        validateOptions: validateDevProdString,
        getOptions: getDefinedOptions,
    },
    {
        name: 'Wallet',
        entitlement: 'com.apple.developer.pass-type-identifiers',
        capability: apple_utils_1.CapabilityType.WALLET,
        // Ex: ['$(TeamIdentifierPrefix)*']
        validateOptions: validateStringArrayOptions,
        getOptions: getDefinedOptions,
    },
    {
        name: 'Sign In with Apple',
        entitlement: 'com.apple.developer.applesignin',
        capability: apple_utils_1.CapabilityType.APPLE_ID_AUTH,
        // Ex: ['Default']
        validateOptions: createValidateStringArrayOptions(['Default']),
        getOptions: getDefinedOptions,
    },
    {
        name: 'Fonts',
        entitlement: 'com.apple.developer.user-fonts',
        capability: apple_utils_1.CapabilityType.FONT_INSTALLATION,
        validateOptions: createValidateStringArrayOptions(['app-usage', 'system-installation']),
        getOptions: getDefinedOptions,
    },
    {
        name: 'Apple Pay Later Merchandising',
        entitlement: 'com.apple.developer.pay-later-merchandising',
        capability: apple_utils_1.CapabilityType.APPLE_PAY_LATER_MERCHANDISING,
        validateOptions: createValidateStringArrayOptions(['payinfour-merchandising']),
        getOptions: getDefinedOptions,
    },
    {
        name: 'Sensitive Content Analysis',
        entitlement: 'com.apple.developer.sensitivecontentanalysis.client',
        capability: apple_utils_1.CapabilityType.SENSITIVE_CONTENT_ANALYSIS,
        validateOptions: createValidateStringArrayOptions(['analysis']),
        getOptions: getDefinedOptions,
    },
    {
        // Not in Xcode
        // https://developer-mdn.apple.com/documentation/devicecheck/preparing_to_use_the_app_attest_service
        // https://developer-mdn.apple.com/documentation/bundleresources/entitlements/com_apple_developer_devicecheck_appattest-environment
        name: 'App Attest',
        entitlement: 'com.apple.developer.devicecheck.appattest-environment',
        capability: apple_utils_1.CapabilityType.APP_ATTEST,
        validateOptions: validateDevProdString,
        getOptions: getDefinedOptions,
    },
    {
        entitlement: 'com.apple.developer.coremedia.hls.low-latency',
        name: 'Low Latency HLS',
        capability: apple_utils_1.CapabilityType.HLS_LOW_LATENCY,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.associated-domains.mdm-managed',
        name: 'MDM Managed Associated Domains',
        capability: apple_utils_1.CapabilityType.MDM_MANAGED_ASSOCIATED_DOMAINS,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.fileprovider.testing-mode',
        name: 'FileProvider TestingMode',
        capability: apple_utils_1.CapabilityType.FILE_PROVIDER_TESTING_MODE,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.healthkit.recalibrate-estimates',
        name: 'Recalibrate Estimates',
        capability: apple_utils_1.CapabilityType.HEALTH_KIT_RECALIBRATE_ESTIMATES,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.maps',
        name: 'Maps',
        capability: apple_utils_1.CapabilityType.MAPS,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.user-management',
        name: 'TV Services',
        capability: apple_utils_1.CapabilityType.USER_MANAGEMENT,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.networking.custom-protocol',
        name: 'Custom Network Protocol',
        capability: apple_utils_1.CapabilityType.NETWORK_CUSTOM_PROTOCOL,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.system-extension.install',
        name: 'System Extension',
        capability: apple_utils_1.CapabilityType.SYSTEM_EXTENSION_INSTALL,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.push-to-talk',
        name: 'Push to Talk',
        capability: apple_utils_1.CapabilityType.PUSH_TO_TALK,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.driverkit.transport.usb',
        name: 'DriverKit USB Transport (development)',
        capability: apple_utils_1.CapabilityType.DRIVER_KIT_USB_TRANSPORT_PUB,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.kernel.increased-memory-limit',
        name: 'Increased Memory Limit',
        capability: apple_utils_1.CapabilityType.INCREASED_MEMORY_LIMIT,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.driverkit.communicates-with-drivers',
        name: 'Communicates with Drivers',
        capability: apple_utils_1.CapabilityType.DRIVER_KIT_COMMUNICATES_WITH_DRIVERS,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.media-device-discovery-extension',
        name: 'Media Device Discovery',
        capability: apple_utils_1.CapabilityType.MEDIA_DEVICE_DISCOVERY,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.driverkit.allow-third-party-userclients',
        name: 'DriverKit Allow Third Party UserClients',
        capability: apple_utils_1.CapabilityType.DRIVER_KIT_ALLOW_THIRD_PARTY_USER_CLIENTS,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.weatherkit',
        name: 'WeatherKit',
        capability: apple_utils_1.CapabilityType.WEATHER_KIT,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.on-demand-install-capable',
        name: 'On Demand Install Capable for App Clip Extensions',
        capability: apple_utils_1.CapabilityType.ON_DEMAND_INSTALL_EXTENSIONS,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.driverkit.family.scsicontroller',
        name: 'DriverKit Family SCSIController (development)',
        capability: apple_utils_1.CapabilityType.DRIVER_KIT_FAMILY_SCSI_CONTROLLER_PUB,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.driverkit.family.serial',
        name: 'DriverKit Family Serial (development)',
        capability: apple_utils_1.CapabilityType.DRIVER_KIT_FAMILY_SERIAL_PUB,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.driverkit.family.networking',
        name: 'DriverKit Family Networking (development)',
        capability: apple_utils_1.CapabilityType.DRIVER_KIT_FAMILY_NETWORKING_PUB,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.driverkit.family.hid.eventservice',
        name: 'DriverKit Family HID EventService (development)',
        capability: apple_utils_1.CapabilityType.DRIVER_KIT_FAMILY_HID_EVENT_SERVICE_PUB,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.driverkit.family.hid.device',
        name: 'DriverKit Family HID Device (development)',
        capability: apple_utils_1.CapabilityType.DRIVER_KIT_FAMILY_HID_DEVICE_PUB,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.driverkit',
        name: 'DriverKit for Development',
        capability: apple_utils_1.CapabilityType.DRIVER_KIT_PUBLIC,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.driverkit.transport.hid',
        name: 'DriverKit Transport HID (development)',
        capability: apple_utils_1.CapabilityType.DRIVER_KIT_TRANSPORT_HID_PUB,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.driverkit.family.audio',
        name: 'DriverKit Family Audio (development)',
        capability: apple_utils_1.CapabilityType.DRIVER_KIT_FAMILY_AUDIO_PUB,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.shared-with-you',
        name: 'Shared with You',
        capability: apple_utils_1.CapabilityType.SHARED_WITH_YOU,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.shared-with-you.collaboration',
        name: 'Messages Collaboration',
        capability: apple_utils_1.CapabilityType.MESSAGES_COLLABORATION,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.submerged-shallow-depth-and-pressure',
        name: 'Shallow Depth and Pressure',
        capability: apple_utils_1.CapabilityType.SHALLOW_DEPTH_PRESSURE,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.proximity-reader.identity.display',
        name: 'Tap to Present ID on iPhone (Display Only)',
        capability: apple_utils_1.CapabilityType.TAP_TO_DISPLAY_ID,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.proximity-reader.payment.acceptance',
        name: 'Tap to Pay on iPhone',
        capability: apple_utils_1.CapabilityType.TAP_TO_PAY_ON_IPHONE,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.matter.allow-setup-payload',
        name: 'Matter Allow Setup Payload',
        capability: apple_utils_1.CapabilityType.MATTER_ALLOW_SETUP_PAYLOAD,
        validateOptions: validateBooleanOptions,
        getOptions: getBooleanOptions,
    },
    {
        entitlement: 'com.apple.developer.journal.allow',
        name: 'Journaling Suggestions',
        capability: apple_utils_1.CapabilityType.JOURNALING_SUGGESTIONS,
        validateOptions: createValidateStringArrayOptions(['suggestions']),
        getOptions: getDefinedOptions,
    },
    {
        entitlement: 'com.apple.developer.managed-app-distribution.install-ui',
        name: 'Managed App Installation UI',
        capability: apple_utils_1.CapabilityType.MANAGED_APP_INSTALLATION_UI,
        validateOptions: createValidateStringArrayOptions(['managed-app']),
        getOptions: getDefinedOptions,
    },
    {
        entitlement: 'com.apple.developer.networking.slicing.appcategory',
        name: '5G Network Slicing',
        capability: apple_utils_1.CapabilityType.NETWORK_SLICING,
        validateOptions: createValidateStringArrayOptions([
            'gaming-6014',
            'communication-9000',
            'streaming-9001',
        ]),
        getOptions: getDefinedOptions,
    },
    {
        entitlement: 'com.apple.developer.networking.slicing.trafficcategory',
        name: '5G Network Slicing',
        capability: apple_utils_1.CapabilityType.NETWORK_SLICING,
        validateOptions: createValidateStringArrayOptions([
            'defaultslice-1',
            'video-2',
            'background-3',
            'voice-4',
            'callsignaling-5',
            'responsivedata-6',
            'avstreaming-7',
            'responsiveav-8',
        ]),
        getOptions: getDefinedOptions,
    },
    // VMNET
    // These don't appear to have entitlements, so it's unclear how we can automatically enable / disable them at this time.
    // TODO: Maybe add a warning about manually enabling features?
    // ?? -- links `StoreKit.framework`
    // Always locked on in dev portal
    //   {
    //     entitlement: '',
    //     name: 'In-App Purchase',
    //     capability: CapabilityType.IN_APP_PURCHASE,
    //   },
    //   {
    //     entitlement: '',
    //     name: 'HLS Interstitial Previews',
    //     capability: 'HLS_INTERSTITIAL_PREVIEW',
    //   },
    // "Game Controllers" doesn't appear in Dev Portal but it does show up in Xcode,
    // toggling in Xcode causes no network request to be sent.
    // Therefore it seems that it's a mistake in Xcode,
    // the key `GCSupportsControllerUserInteraction` just needs to be present in Info.plist
    // "Keychain Sharing" doesn't appear in Dev Portal but it does show up in Xcode,
    // toggling in Xcode causes no network request to be sent.
    // Adding to Xcode puts 'keychain-access-groups' into the entitlements so
    // it's not clear if it needs to be updated.
    // "Contact Notes" requires the user to ask Apple in a form:
    // https://developer-mdn.apple.com/contact/request/contact-note-field
    // com.apple.developer.contacts.notes: https://developer-mdn.apple.com/documentation/bundleresources/entitlements/com_apple_developer_contacts_notes/
    // "Exposure Notification" requires the user to ask Apple in a form:
    // https://developer-mdn.apple.com/contact/request/exposure-notification-entitlement
    // com.apple.developer.exposure-notification: https://developer-mdn.apple.com/documentation/bundleresources/entitlements/com_apple_developer_exposure-notification/
];
