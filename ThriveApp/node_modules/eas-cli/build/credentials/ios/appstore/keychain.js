"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setPasswordAsync = exports.getPasswordAsync = exports.deletePasswordAsync = exports.EXPO_NO_KEYCHAIN = void 0;
const tslib_1 = require("tslib");
const keychain_1 = tslib_1.__importDefault(require("keychain"));
const KEYCHAIN_TYPE = 'internet';
const NO_PASSWORD_REGEX = /Could not find password/;
const IS_MAC = process.platform === 'darwin';
// When enabled, the password will not only be skipped but also deleted.
// This makes it easier to completely opt-out of Keychain functionality.
exports.EXPO_NO_KEYCHAIN = process.env['EXPO_NO_KEYCHAIN'];
async function deletePasswordAsync({ username, serviceName, }) {
    if (!IS_MAC) {
        return await Promise.resolve(false);
    }
    return await new Promise((resolve, reject) => {
        keychain_1.default.deletePassword({ account: username, service: serviceName, type: KEYCHAIN_TYPE }, (error) => {
            if (error) {
                if (error.message.match(NO_PASSWORD_REGEX)) {
                    resolve(false);
                    return;
                }
                reject(error);
            }
            else {
                resolve(true);
            }
        });
    });
}
exports.deletePasswordAsync = deletePasswordAsync;
async function getPasswordAsync({ username, serviceName, }) {
    if (!IS_MAC) {
        return null;
    }
    return await new Promise((resolve, reject) => {
        keychain_1.default.getPassword({ account: username, service: serviceName, type: KEYCHAIN_TYPE }, (error, password) => {
            if (error) {
                if (error.message.match(NO_PASSWORD_REGEX)) {
                    resolve(null);
                    return;
                }
                reject(error);
            }
            else {
                resolve(password);
            }
        });
    });
}
exports.getPasswordAsync = getPasswordAsync;
async function setPasswordAsync({ serviceName, username, password, }) {
    if (!IS_MAC) {
        return await Promise.resolve(false);
    }
    return await new Promise((resolve, reject) => {
        keychain_1.default.setPassword({ account: username, service: serviceName, password, type: KEYCHAIN_TYPE }, (error) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(true);
            }
        });
    });
}
exports.setPasswordAsync = setPasswordAsync;
