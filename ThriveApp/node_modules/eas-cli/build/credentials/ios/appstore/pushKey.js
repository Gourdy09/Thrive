"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.revokePushKeyAsync = exports.createPushKeyAsync = exports.listPushKeysAsync = exports.APPLE_KEYS_TOO_MANY_GENERATED_ERROR = void 0;
const tslib_1 = require("tslib");
const apple_utils_1 = require("@expo/apple-utils");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const dateformat_1 = tslib_1.__importDefault(require("dateformat"));
const authenticate_1 = require("./authenticate");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const ora_1 = require("../../../ora");
const { MaxKeysCreatedError } = apple_utils_1.Keys;
exports.APPLE_KEYS_TOO_MANY_GENERATED_ERROR = `
You can have only ${chalk_1.default.underline('two')} Apple Keys generated on your Apple Developer account.
Revoke the old ones or reuse existing from your other apps.
Remember that Apple Keys are not application specific!
`;
/**
 * List all existing push keys on Apple servers.
 * **Does not support App Store Connect API (CI).**
 */
async function listPushKeysAsync(userAuthCtx) {
    const spinner = (0, ora_1.ora)(`Fetching Apple push keys`).start();
    try {
        const context = (0, authenticate_1.getRequestContext)(userAuthCtx);
        const keys = await apple_utils_1.Keys.getKeysAsync(context);
        spinner.succeed(`Fetched Apple push keys`);
        return keys;
    }
    catch (error) {
        spinner.fail(`Failed to fetch Apple push keys`);
        throw error;
    }
}
exports.listPushKeysAsync = listPushKeysAsync;
/**
 * Create a new push key on Apple servers.
 * **Does not support App Store Connect API (CI).**
 */
async function createPushKeyAsync(userAuthCtx, name = `Expo Push Notifications Key ${(0, dateformat_1.default)('yyyymmddHHMMss')}`) {
    const spinner = (0, ora_1.ora)(`Creating Apple push key`).start();
    try {
        const context = (0, authenticate_1.getRequestContext)(userAuthCtx);
        const key = await apple_utils_1.Keys.createKeyAsync(context, { name, isApns: true });
        const apnsKeyP8 = await apple_utils_1.Keys.downloadKeyAsync(context, { id: key.id });
        spinner.succeed(`Created Apple push key`);
        return {
            apnsKeyId: key.id,
            apnsKeyP8,
            teamId: userAuthCtx.team.id,
            teamName: userAuthCtx.team.name,
        };
    }
    catch (err) {
        spinner.fail('Failed to create Apple push key');
        const resultString = err.rawDump?.resultString;
        if (err instanceof MaxKeysCreatedError ||
            resultString?.match(/maximum allowed number of Keys/)) {
            throw new Error(exports.APPLE_KEYS_TOO_MANY_GENERATED_ERROR);
        }
        throw err;
    }
}
exports.createPushKeyAsync = createPushKeyAsync;
/**
 * Revoke an existing push key on Apple servers.
 * **Does not support App Store Connect API (CI).**
 */
async function revokePushKeyAsync(userAuthCtx, ids) {
    const name = `Apple push key${ids?.length === 1 ? '' : 's'}`;
    const spinner = (0, ora_1.ora)(`Revoking ${name}`).start();
    try {
        const context = (0, authenticate_1.getRequestContext)(userAuthCtx);
        await Promise.all(ids.map(id => apple_utils_1.Keys.revokeKeyAsync(context, { id })));
        spinner.succeed(`Revoked ${name}`);
    }
    catch (error) {
        log_1.default.error(error);
        spinner.fail(`Failed to revoke ${name}`);
        throw error;
    }
}
exports.revokePushKeyAsync = revokePushKeyAsync;
