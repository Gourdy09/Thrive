"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpTargetBuildCredentialsFromCredentialsJson = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const BuildCredentialsUtils_1 = require("./BuildCredentialsUtils");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const prompts_1 = require("../../../prompts");
const printCredentials_1 = require("../utils/printCredentials");
const provisioningProfile_1 = require("../utils/provisioningProfile");
class SetUpTargetBuildCredentialsFromCredentialsJson {
    constructor(app, distributionType, targetCredentials) {
        this.app = app;
        this.distributionType = distributionType;
        this.targetCredentials = targetCredentials;
    }
    async runAsync(ctx) {
        // currently configured credentials
        const buildCredentials = await (0, BuildCredentialsUtils_1.getBuildCredentialsAsync)(ctx, this.app, this.distributionType);
        const currentDistributionCertificate = await (0, BuildCredentialsUtils_1.getDistributionCertificateAsync)(ctx, this.app, this.distributionType);
        const currentProfile = await (0, BuildCredentialsUtils_1.getProvisioningProfileAsync)(ctx, this.app, this.distributionType);
        const appInfo = `@${this.app.account.name}/${this.app.projectName} (${this.app.bundleIdentifier})`;
        // new credentials from local json
        const appleTeamFromProvisioningProfile = (0, provisioningProfile_1.readAppleTeam)(this.targetCredentials.provisioningProfile);
        const appleTeam = await ctx.ios.createOrGetExistingAppleTeamAsync(ctx.graphqlClient, this.app.account, {
            appleTeamIdentifier: appleTeamFromProvisioningProfile.teamId,
            appleTeamName: appleTeamFromProvisioningProfile.teamName,
        });
        const distributionCertificateToAssign = await this.getDistributionCertificateToAssignAsync(ctx, appleTeam, currentDistributionCertificate);
        const provisioningProfileToAssign = await this.getProvisioningProfileToAssignAsync(ctx, appleTeam, currentProfile);
        const didCredentialsChange = !currentDistributionCertificate ||
            !currentProfile ||
            currentDistributionCertificate.id !== distributionCertificateToAssign.id ||
            currentProfile.id !== provisioningProfileToAssign.id;
        if (!didCredentialsChange) {
            log_1.default.log('Credentials have already been configured to your credentials json.');
            return (0, nullthrows_1.default)(buildCredentials, 'buildCredentials should have been defined.');
        }
        if (buildCredentials) {
            log_1.default.log('Currently configured credentials:');
            displaySingleTargetProjectCredentials(this.app, buildCredentials);
            if (!ctx.nonInteractive) {
                const confirm = await (0, prompts_1.confirmAsync)({
                    message: `Would you like to replace this configuration with credentials from credentials json?`,
                });
                if (!confirm) {
                    throw new Error('Aborting setup of build credentials from credentials json');
                }
            }
        }
        log_1.default.log(`Assigning credentials from credentials json to ${appInfo}...`);
        const newBuildCredentials = await (0, BuildCredentialsUtils_1.assignBuildCredentialsAsync)(ctx, this.app, this.distributionType, distributionCertificateToAssign, provisioningProfileToAssign, appleTeam);
        log_1.default.log('New credentials configuration:');
        displaySingleTargetProjectCredentials(this.app, newBuildCredentials);
        log_1.default.newLine();
        log_1.default.log(chalk_1.default.green(`All credentials are ready to build ${appInfo}`));
        log_1.default.newLine();
        return newBuildCredentials;
    }
    async getDistributionCertificateToAssignAsync(ctx, appleTeam, currentDistributionCertificate) {
        const { certificateP12, certificatePassword } = this.targetCredentials.distributionCertificate;
        if (!currentDistributionCertificate) {
            return await ctx.ios.createDistributionCertificateAsync(ctx.graphqlClient, this.app.account, {
                certP12: certificateP12,
                certPassword: certificatePassword,
                teamId: appleTeam.appleTeamIdentifier,
                teamName: appleTeam.appleTeamName ?? undefined,
            });
        }
        const isSameCertificate = currentDistributionCertificate.certificateP12 === certificateP12;
        if (!isSameCertificate) {
            return await ctx.ios.createDistributionCertificateAsync(ctx.graphqlClient, this.app.account, {
                certP12: certificateP12,
                certPassword: certificatePassword,
                teamId: appleTeam.appleTeamIdentifier,
                teamName: appleTeam.appleTeamName ?? undefined,
            });
        }
        // If the configured Distribution Certificate is the same as the new one, just use the currently configured certificate
        return currentDistributionCertificate;
    }
    async getProvisioningProfileToAssignAsync(ctx, appleTeam, currentProvisioningProfile) {
        const { provisioningProfile } = this.targetCredentials;
        if (!currentProvisioningProfile) {
            return await this.createNewProvisioningProfileAsync(ctx, appleTeam);
        }
        const isSameProfile = currentProvisioningProfile.provisioningProfile === provisioningProfile;
        if (!isSameProfile) {
            return await this.createNewProvisioningProfileAsync(ctx, appleTeam);
        }
        // If the configured Provisioning Profile is the same as the new one, just use the currently configured profile
        return currentProvisioningProfile;
    }
    async createNewProvisioningProfileAsync(ctx, appleTeam) {
        const { provisioningProfile } = this.targetCredentials;
        const appleAppIdentifier = await ctx.ios.createOrGetExistingAppleAppIdentifierAsync(ctx.graphqlClient, this.app, appleTeam);
        return await ctx.ios.createProvisioningProfileAsync(ctx.graphqlClient, this.app, appleAppIdentifier, {
            appleProvisioningProfile: provisioningProfile,
        });
    }
}
exports.SetUpTargetBuildCredentialsFromCredentialsJson = SetUpTargetBuildCredentialsFromCredentialsJson;
function displaySingleTargetProjectCredentials(app, buildCredentials) {
    const targetName = app.projectName;
    (0, printCredentials_1.displayProjectCredentials)(app, { [targetName]: buildCredentials }, [
        { targetName, bundleIdentifier: app.bundleIdentifier },
    ]);
}
