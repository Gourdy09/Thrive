"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpAscApiKey = exports.SetupAscApiKeyChoice = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const AscApiKeyUtils_1 = require("./AscApiKeyUtils");
const AssignAscApiKey_1 = require("./AssignAscApiKey");
const CreateAscApiKey_1 = require("./CreateAscApiKey");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const prompts_1 = require("../../../prompts");
const errors_1 = require("../../errors");
const validateAscApiKey_1 = require("../validators/validateAscApiKey");
var SetupAscApiKeyChoice;
(function (SetupAscApiKeyChoice) {
    SetupAscApiKeyChoice["GENERATE"] = "GENERATE";
    SetupAscApiKeyChoice["USE_EXISTING"] = "USE_EXISTING";
})(SetupAscApiKeyChoice || (exports.SetupAscApiKeyChoice = SetupAscApiKeyChoice = {}));
class SetUpAscApiKey {
    constructor(app, purpose) {
        this.app = app;
        this.purpose = purpose;
        this.choices = [
            {
                title: '[Choose an existing key]',
                value: SetupAscApiKeyChoice.USE_EXISTING,
            },
            { title: '[Add a new key]', value: SetupAscApiKeyChoice.GENERATE },
        ];
    }
    async runAsync(ctx) {
        const isKeySetup = await this.isAscApiKeySetupAsync(ctx, this.purpose);
        if (isKeySetup) {
            log_1.default.succeed('App Store Connect API Key already set up.');
            return (0, nullthrows_1.default)(await ctx.ios.getIosAppCredentialsWithCommonFieldsAsync(ctx.graphqlClient, this.app), 'iosAppCredentials cannot be null if App Store Connect API Key is already set up');
        }
        if (ctx.nonInteractive) {
            throw new errors_1.MissingCredentialsNonInteractiveError('App Store Connect API Keys cannot be set up in --non-interactive mode.');
        }
        const keysForAccount = await (0, AscApiKeyUtils_1.getAscApiKeysFromAccountAsync)(ctx, this.app.account, {
            filterDifferentAppleTeam: true,
        });
        const maybeAutoselectedKey = await this.doBestEffortAutoselectAsync(ctx, keysForAccount);
        if (maybeAutoselectedKey) {
            return await new AssignAscApiKey_1.AssignAscApiKey(this.app).runAsync(ctx, maybeAutoselectedKey, this.purpose);
        }
        const availableChoices = keysForAccount.length === 0
            ? this.choices.filter(choice => choice.value !== SetupAscApiKeyChoice.USE_EXISTING)
            : this.choices;
        const ascApiKey = await this.processChoicesAsync(ctx, this.purpose, availableChoices);
        return await new AssignAscApiKey_1.AssignAscApiKey(this.app).runAsync(ctx, ascApiKey, this.purpose);
    }
    async doBestEffortAutoselectAsync(ctx, keysForAccount) {
        if (!ctx.appStore.authCtx) {
            return null;
        }
        if (keysForAccount.length === 0) {
            return null;
        }
        // only provide autoselect if we can find a key that is certainly valid
        const validKeys = await (0, validateAscApiKey_1.getValidAndTrackedAscApiKeysAsync)(ctx, keysForAccount);
        if (validKeys.length === 0) {
            return null;
        }
        const [autoselectedKey] = (0, AscApiKeyUtils_1.sortAscApiKeysByUpdatedAtDesc)(validKeys);
        const useAutoselected = await (0, prompts_1.confirmAsync)({
            message: `Reuse this App Store Connect API Key?\n${(0, AscApiKeyUtils_1.formatAscApiKey)(autoselectedKey)}`,
        });
        if (useAutoselected) {
            log_1.default.log(`Using App Store Connect API Key with ID ${autoselectedKey.keyIdentifier}`);
            return autoselectedKey;
        }
        else {
            return null;
        }
    }
    async isAscApiKeySetupAsync(ctx, purpose) {
        const appCredentials = await ctx.ios.getIosAppCredentialsWithCommonFieldsAsync(ctx.graphqlClient, this.app);
        if (purpose !== AscApiKeyUtils_1.AppStoreApiKeyPurpose.SUBMISSION_SERVICE) {
            throw new Error(`App Store Connect API Key setup is not yet supported for ${purpose}.`);
        }
        return !!appCredentials?.appStoreConnectApiKeyForSubmissions;
    }
    async processChoicesAsync(ctx, purpose, choices) {
        (0, assert_1.default)(choices.length > 0, 'SetupAscApiKey: There must be at least one choice');
        let choice;
        if (choices.length === 1) {
            choice = choices[0].value;
        }
        else {
            const result = await (0, prompts_1.promptAsync)({
                type: 'select',
                name: 'choice',
                message: 'Select the App Store Connect Api Key to use for your project:',
                choices,
            });
            choice = result.choice;
        }
        if (choice === SetupAscApiKeyChoice.GENERATE) {
            return await new CreateAscApiKey_1.CreateAscApiKey(this.app.account).runAsync(ctx, purpose);
        }
        else if (choice === SetupAscApiKeyChoice.USE_EXISTING) {
            const selectedAscApiKey = await (0, AscApiKeyUtils_1.selectAscApiKeysFromAccountAsync)(ctx, this.app.account, {
                filterDifferentAppleTeam: true,
            });
            if (!selectedAscApiKey) {
                return await this.processChoicesAsync(ctx, purpose, choices);
            }
            return selectedAscApiKey;
        }
        throw new errors_1.UnsupportedCredentialsChoiceError(`AscApiKey Setup does not support choice:${choice}`, choice);
    }
}
exports.SetUpAscApiKey = SetUpAscApiKey;
