"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpTargetBuildCredentials = void 0;
const tslib_1 = require("tslib");
const SetUpAdhocProvisioningProfile_1 = require("./SetUpAdhocProvisioningProfile");
const SetUpInternalProvisioningProfile_1 = require("./SetUpInternalProvisioningProfile");
const SetUpProvisioningProfile_1 = require("./SetUpProvisioningProfile");
const generated_1 = require("../../../graphql/generated");
const log_1 = tslib_1.__importDefault(require("../../../log"));
class SetUpTargetBuildCredentials {
    constructor(options) {
        this.options = options;
    }
    async runAsync(ctx) {
        const { app, entitlements } = this.options;
        await ctx.bestEffortAppStoreAuthenticateAsync();
        if (ctx.appStore.authCtx) {
            await ctx.appStore.ensureBundleIdExistsAsync({
                accountName: app.account.name,
                bundleIdentifier: app.bundleIdentifier,
                projectName: app.projectName,
            }, { entitlements });
        }
        try {
            return await this.setupBuildCredentialsAsync(ctx);
        }
        catch (error) {
            log_1.default.error('Failed to set up credentials.');
            throw error;
        }
    }
    async setupBuildCredentialsAsync(ctx) {
        const { app, distribution, enterpriseProvisioning, target } = this.options;
        if (distribution === 'internal') {
            if (enterpriseProvisioning === 'adhoc') {
                return await new SetUpAdhocProvisioningProfile_1.SetUpAdhocProvisioningProfile({ app, target }).runAsync(ctx);
            }
            else if (enterpriseProvisioning === 'universal') {
                return await new SetUpProvisioningProfile_1.SetUpProvisioningProfile(app, target, generated_1.IosDistributionType.Enterprise).runAsync(ctx);
            }
            else {
                return await new SetUpInternalProvisioningProfile_1.SetUpInternalProvisioningProfile({ app, target }).runAsync(ctx);
            }
        }
        else {
            return await new SetUpProvisioningProfile_1.SetUpProvisioningProfile(app, target, generated_1.IosDistributionType.AppStore).runAsync(ctx);
        }
    }
}
exports.SetUpTargetBuildCredentials = SetUpTargetBuildCredentials;
