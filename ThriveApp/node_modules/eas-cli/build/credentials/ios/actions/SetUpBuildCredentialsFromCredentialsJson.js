"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpBuildCredentialsFromCredentialsJson = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const SetUpTargetBuildCredentialsFromCredentialsJson_1 = require("./SetUpTargetBuildCredentialsFromCredentialsJson");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const target_1 = require("../../../project/ios/target");
const read_1 = require("../../credentialsJson/read");
const utils_1 = require("../../credentialsJson/utils");
class SetUpBuildCredentialsFromCredentialsJson {
    constructor(app, targets, distributionType) {
        this.app = app;
        this.targets = targets;
        this.distributionType = distributionType;
    }
    async runAsync(ctx) {
        const credentialsJson = await this.readCredentialsJsonAsync(ctx);
        (0, utils_1.ensureAllTargetsAreConfigured)(this.targets, credentialsJson);
        const hasManyTargets = this.targets.length > 1;
        for (const target of this.targets) {
            if (hasManyTargets) {
                log_1.default.newLine();
                log_1.default.log(`Setting up credentials for target ${chalk_1.default.bold(target.targetName)} (${target.bundleIdentifier})`);
                log_1.default.newLine();
            }
            await new SetUpTargetBuildCredentialsFromCredentialsJson_1.SetUpTargetBuildCredentialsFromCredentialsJson({
                account: this.app.account,
                projectName: this.app.projectName,
                bundleIdentifier: target.bundleIdentifier,
                parentBundleIdentifier: target.parentBundleIdentifier,
            }, this.distributionType, credentialsJson[target.targetName]).runAsync(ctx);
        }
    }
    async readCredentialsJsonAsync(ctx) {
        const applicationTarget = (0, target_1.findApplicationTarget)(this.targets);
        try {
            return await (0, read_1.readIosCredentialsAsync)(ctx.projectDir, applicationTarget);
        }
        catch (error) {
            log_1.default.error('Reading credentials from credentials.json failed. Make sure this file is correct and all credentials are present there.');
            throw error;
        }
    }
}
exports.SetUpBuildCredentialsFromCredentialsJson = SetUpBuildCredentialsFromCredentialsJson;
