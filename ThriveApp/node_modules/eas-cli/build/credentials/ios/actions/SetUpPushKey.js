"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUpPushKey = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const AssignPushKey_1 = require("./AssignPushKey");
const CreatePushKey_1 = require("./CreatePushKey");
const PushKeyUtils_1 = require("./PushKeyUtils");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const prompts_1 = require("../../../prompts");
class SetUpPushKey {
    constructor(app) {
        this.app = app;
    }
    async isPushKeySetupAsync(ctx) {
        const pushKey = await ctx.ios.getPushKeyForAppAsync(ctx.graphqlClient, this.app);
        return !!pushKey;
    }
    async runAsync(ctx) {
        if (ctx.nonInteractive) {
            throw new Error(`Push keys cannot be setup in non-interactive mode.`);
        }
        const isPushKeySetup = await this.isPushKeySetupAsync(ctx);
        if (isPushKeySetup) {
            return await ctx.ios.getIosAppCredentialsWithCommonFieldsAsync(ctx.graphqlClient, this.app);
        }
        const pushKeysForAccount = await ctx.ios.getPushKeysForAccountAsync(ctx.graphqlClient, this.app.account);
        let pushKey;
        if (pushKeysForAccount.length === 0) {
            pushKey = await new CreatePushKey_1.CreatePushKey(this.app.account).runAsync(ctx);
        }
        else {
            pushKey = await this.createOrReusePushKeyAsync(ctx);
        }
        return await new AssignPushKey_1.AssignPushKey(this.app).runAsync(ctx, pushKey);
    }
    async createOrReusePushKeyAsync(ctx) {
        const pushKeysForAccount = await ctx.ios.getPushKeysForAccountAsync(ctx.graphqlClient, this.app.account);
        (0, assert_1.default)(pushKeysForAccount.length > 0, 'createOrReusePushKeyAsync: There are no Push Keys available in your EAS account.');
        if (ctx.appStore.authCtx) {
            // only provide autoselect if we can find a push key that is certainly valid
            const validPushKeys = ctx.appStore.authCtx
                ? await (0, PushKeyUtils_1.getValidAndTrackedPushKeysOnEasServersAsync)(ctx, pushKeysForAccount)
                : [];
            if (validPushKeys.length > 0) {
                const autoselectedPushKey = validPushKeys[0];
                const useAutoselected = await (0, prompts_1.confirmAsync)({
                    message: `Reuse this Push Key?\n${(0, PushKeyUtils_1.formatPushKey)(autoselectedPushKey, validPushKeys.map(pushKey => pushKey.keyIdentifier))}`,
                });
                if (useAutoselected) {
                    log_1.default.log(`Using push key with ID ${autoselectedPushKey.keyIdentifier}`);
                    return autoselectedPushKey;
                }
            }
        }
        const { action } = await (0, prompts_1.promptAsync)({
            type: 'select',
            name: 'action',
            message: 'Select the Apple Push Key to use for your project:',
            choices: [
                {
                    title: '[Choose another existing push key] (Recommended)',
                    value: 'CHOOSE_EXISTING',
                },
                { title: '[Add a new push key]', value: 'GENERATE' },
            ],
        });
        if (action === 'GENERATE') {
            return await new CreatePushKey_1.CreatePushKey(this.app.account).runAsync(ctx);
        }
        else {
            return (0, nullthrows_1.default)(await (0, PushKeyUtils_1.selectPushKeyAsync)(ctx, this.app.account));
        }
    }
}
exports.SetUpPushKey = SetUpPushKey;
