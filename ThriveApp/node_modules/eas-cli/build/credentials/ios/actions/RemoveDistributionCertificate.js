"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveDistributionCertificate = exports.SelectAndRemoveDistributionCertificate = void 0;
const tslib_1 = require("tslib");
const DistributionCertificateUtils_1 = require("./DistributionCertificateUtils");
const RemoveProvisioningProfile_1 = require("./RemoveProvisioningProfile");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const prompts_1 = require("../../../prompts");
class SelectAndRemoveDistributionCertificate {
    constructor(account) {
        this.account = account;
    }
    async runAsync(ctx) {
        const selected = await (0, DistributionCertificateUtils_1.selectDistributionCertificateWithDependenciesAsync)(ctx, this.account);
        if (selected) {
            await new RemoveDistributionCertificate(this.account, selected).runAsync(ctx);
            log_1.default.succeed('Removed distribution certificate');
            log_1.default.newLine();
        }
    }
}
exports.SelectAndRemoveDistributionCertificate = SelectAndRemoveDistributionCertificate;
class RemoveDistributionCertificate {
    constructor(account, distributionCertificate) {
        this.account = account;
        this.distributionCertificate = distributionCertificate;
    }
    async runAsync(ctx) {
        const apps = this.distributionCertificate.iosAppBuildCredentialsList.map(buildCredentials => buildCredentials.iosAppCredentials.app);
        if (apps.length !== 0) {
            // iosAppBuildCredentialsList is capped at 20 on www
            const appFullNames = apps
                .map(app => app.fullName)
                .slice(0, 19)
                .join(',');
            const andMaybeMore = apps.length > 19 ? ' (and more)' : '';
            if (ctx.nonInteractive) {
                throw new Error(`Certificate is currently used by ${appFullNames}${andMaybeMore} and cannot be deleted in non-interactive mode.`);
            }
            const confirm = await (0, prompts_1.confirmAsync)({
                message: `You are removing certificate used by ${appFullNames}${andMaybeMore}. Do you want to continue?`,
            });
            if (!confirm) {
                log_1.default.log('Aborting');
                return;
            }
        }
        log_1.default.log('Removing Distribution Certificate');
        await ctx.ios.deleteDistributionCertificateAsync(ctx.graphqlClient, this.distributionCertificate.id);
        if (this.distributionCertificate.developerPortalIdentifier) {
            let shouldRevoke = false;
            if (!ctx.nonInteractive) {
                shouldRevoke = await (0, prompts_1.confirmAsync)({
                    message: `Do you also want to revoke this Distribution Certificate on Apple Developer Portal?`,
                });
            }
            else if (ctx.nonInteractive) {
                log_1.default.log('Skipping certificate revocation on the Apple Developer Portal.');
            }
            if (shouldRevoke) {
                await ctx.appStore.revokeDistributionCertificateAsync([
                    this.distributionCertificate.developerPortalIdentifier,
                ]);
            }
        }
        await this.removeInvalidProvisioningProfilesAsync(ctx);
    }
    async removeInvalidProvisioningProfilesAsync(ctx) {
        const buildCredentialsList = this.distributionCertificate.iosAppBuildCredentialsList;
        const appsWithProfilesToRemove = [];
        const profilesToRemove = [];
        for (const buildCredentials of buildCredentialsList) {
            const projectName = buildCredentials.iosAppCredentials.app.slug;
            const { bundleIdentifier } = buildCredentials.iosAppCredentials.appleAppIdentifier;
            const appLookupParams = { account: this.account, projectName, bundleIdentifier };
            const maybeProvisioningProfile = buildCredentials.provisioningProfile;
            if (maybeProvisioningProfile) {
                appsWithProfilesToRemove.push(appLookupParams);
                profilesToRemove.push(maybeProvisioningProfile);
            }
        }
        await new RemoveProvisioningProfile_1.RemoveProvisioningProfiles(appsWithProfilesToRemove, profilesToRemove).runAsync(ctx);
    }
}
exports.RemoveDistributionCertificate = RemoveDistributionCertificate;
