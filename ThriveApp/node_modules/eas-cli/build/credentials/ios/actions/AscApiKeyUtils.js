"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatAscApiKey = exports.sortAscApiKeysByUpdatedAtDesc = exports.selectAscApiKeysFromAccountAsync = exports.getAscApiKeysFromAccountAsync = exports.getAscApiKeyName = exports.provideOrGenerateAscApiKeyAsync = exports.getMinimalAscApiKeyAsync = exports.promptForIssuerIdAsync = exports.promptForAscApiKeyPathAsync = exports.AppStoreApiKeyPurpose = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const nanoid_1 = require("nanoid");
const path_1 = tslib_1.__importDefault(require("path"));
const AppleTeamFormatting_1 = require("./AppleTeamFormatting");
const log_1 = tslib_1.__importStar(require("../../../log"));
const prompts_1 = require("../../../prompts");
const date_1 = require("../../../utils/date");
const promptForCredentials_1 = require("../../utils/promptForCredentials");
const credentials_1 = require("../credentials");
const validateAscApiKey_1 = require("../validators/validateAscApiKey");
var AppStoreApiKeyPurpose;
(function (AppStoreApiKeyPurpose) {
    AppStoreApiKeyPurpose["SUBMISSION_SERVICE"] = "EAS Submit";
})(AppStoreApiKeyPurpose || (exports.AppStoreApiKeyPurpose = AppStoreApiKeyPurpose = {}));
async function promptForAscApiKeyPathAsync(ctx) {
    const { keyId, keyP8Path } = await promptForKeyP8AndIdAsync();
    const bestEffortIssuerId = await getBestEffortIssuerIdAsync(ctx, keyId);
    if (bestEffortIssuerId) {
        log_1.default.log(`Detected Issuer ID: ${bestEffortIssuerId}`);
        return { keyId, issuerId: bestEffortIssuerId, keyP8Path };
    }
    const issuerId = await promptForIssuerIdAsync();
    return { keyId, issuerId, keyP8Path };
}
exports.promptForAscApiKeyPathAsync = promptForAscApiKeyPathAsync;
async function promptForIssuerIdAsync() {
    log_1.default.log(chalk_1.default.bold('An App Store Connect Issuer ID is required'));
    log_1.default.log(`If you're not sure what this is or how to find yours, ${(0, log_1.learnMore)('https://expo.fyi/asc-issuer-id')}`);
    // Do not perform uuid validation - Apple's issuerIds are not RFC4122 compliant
    const { issuerId } = await (0, promptForCredentials_1.getCredentialsFromUserAsync)(credentials_1.ascApiKeyIssuerIdSchema);
    return issuerId;
}
exports.promptForIssuerIdAsync = promptForIssuerIdAsync;
async function getMinimalAscApiKeyAsync(ascApiKey) {
    return {
        ...ascApiKey,
        issuerId: ascApiKey.issuerId ?? (await promptForIssuerIdAsync()),
    };
}
exports.getMinimalAscApiKeyAsync = getMinimalAscApiKeyAsync;
async function provideOrGenerateAscApiKeyAsync(ctx, purpose) {
    if (ctx.nonInteractive) {
        throw new Error(`A new App Store Connect API Key cannot be created in non-interactive mode.`);
    }
    const userProvided = await promptForAscApiKeyAsync(ctx);
    if (!userProvided) {
        return await generateAscApiKeyAsync(ctx, purpose);
    }
    if (!ctx.appStore.authCtx) {
        log_1.default.warn('Unable to validate App Store Connect API Key, you are not authenticated with Apple.');
        return userProvided;
    }
    const isValidAndTracked = await (0, validateAscApiKey_1.isAscApiKeyValidAndTrackedAsync)(ctx, userProvided);
    if (isValidAndTracked) {
        return userProvided;
    }
    const useUserProvided = await (0, prompts_1.confirmAsync)({
        message: `App Store Connect API Key with ID ${userProvided.keyId} is not valid on Apple's servers. Proceed anyway?`,
    });
    if (useUserProvided) {
        return userProvided;
    }
    return await provideOrGenerateAscApiKeyAsync(ctx, purpose);
}
exports.provideOrGenerateAscApiKeyAsync = provideOrGenerateAscApiKeyAsync;
async function generateAscApiKeyAsync(ctx, purpose) {
    await ctx.appStore.ensureAuthenticatedAsync();
    const ascApiKey = await ctx.appStore.createAscApiKeyAsync(ctx.analytics, {
        nickname: getAscApiKeyName(purpose),
    });
    return await getMinimalAscApiKeyAsync(ascApiKey);
}
function getAscApiKeyName(purpose) {
    const nameParts = ['[Expo]', purpose, (0, nanoid_1.nanoid)(10)];
    return nameParts.join(' ');
}
exports.getAscApiKeyName = getAscApiKeyName;
async function promptForAscApiKeyAsync(ctx) {
    const shouldAutoGenerateCredentials = await (0, promptForCredentials_1.shouldAutoGenerateCredentialsAsync)(credentials_1.ascApiKeyIdSchema);
    if (shouldAutoGenerateCredentials) {
        return null;
    }
    const ascApiKeyPath = await promptForAscApiKeyPathAsync(ctx);
    const { keyP8Path, keyId, issuerId } = ascApiKeyPath;
    return { keyP8: await fs_extra_1.default.readFile(keyP8Path, 'utf-8'), keyId, issuerId };
}
async function promptForKeyP8AndIdAsync() {
    log_1.default.log(chalk_1.default.bold('An App Store Connect Api key is required to upload your app to the Apple App Store Connect'));
    log_1.default.log(`If you're not sure what this is or how to create one, ${(0, log_1.learnMore)('https://expo.fyi/creating-asc-api-key')}`);
    const { keyP8Path } = await (0, prompts_1.promptAsync)({
        type: 'text',
        name: 'keyP8Path',
        message: 'Path to App Store Connect API Key:',
        initial: 'AuthKey_ABCD.p8',
        // eslint-disable-next-line async-protect/async-suffix
        validate: async (filePath) => {
            try {
                const stats = await fs_extra_1.default.stat(filePath);
                if (stats.isFile()) {
                    return true;
                }
                return 'Input is not a file.';
            }
            catch {
                return 'File does not exist.';
            }
        },
    });
    const regex = /^AuthKey_(?<keyId>\w+)\.p8$/; // Common ASC Api file name downloaded from Apple
    const bestEffortKeyId = path_1.default.basename(keyP8Path).match(regex)?.groups?.keyId;
    const { keyId } = await (0, promptForCredentials_1.getCredentialsFromUserAsync)(credentials_1.ascApiKeyIdSchema, {
        keyId: bestEffortKeyId,
    });
    return { keyId, keyP8Path };
}
async function getBestEffortIssuerIdAsync(ctx, ascApiKeyId) {
    if (!ctx.appStore.authCtx) {
        return null;
    }
    const ascApiKeyInfo = await ctx.appStore.getAscApiKeyAsync(ascApiKeyId);
    return ascApiKeyInfo?.issuerId ?? null;
}
async function getAscApiKeysFromAccountAsync(ctx, account, { filterDifferentAppleTeam } = {}) {
    const ascApiKeysForAccount = await ctx.ios.getAscApiKeysForAccountAsync(ctx.graphqlClient, account);
    if (!filterDifferentAppleTeam) {
        return ascApiKeysForAccount;
    }
    else {
        return filterKeysFromDifferentAppleTeam(ctx, ascApiKeysForAccount);
    }
}
exports.getAscApiKeysFromAccountAsync = getAscApiKeysFromAccountAsync;
async function selectAscApiKeysFromAccountAsync(ctx, account, { filterDifferentAppleTeam } = {}) {
    const ascApiKeysForAccount = await getAscApiKeysFromAccountAsync(ctx, account, {
        filterDifferentAppleTeam,
    });
    if (ascApiKeysForAccount.length === 0) {
        if (filterDifferentAppleTeam) {
            const maybeAppleTeamId = ctx.appStore.authCtx?.team.id;
            log_1.default.warn(`There are no App Store Connect API Keys in your EAS account${maybeAppleTeamId ? ` matching Apple Team ID: ${maybeAppleTeamId}.` : '.'}`);
        }
        else {
            log_1.default.warn(`There are no App Store Connect API Keys available in your EAS account.`);
        }
        return null;
    }
    return await selectAscApiKeysAsync(ascApiKeysForAccount);
}
exports.selectAscApiKeysFromAccountAsync = selectAscApiKeysFromAccountAsync;
async function selectAscApiKeysAsync(ascApiKeys) {
    const sortedAscApiKeys = sortAscApiKeysByUpdatedAtDesc(ascApiKeys);
    const { chosenAscApiKey } = await (0, prompts_1.promptAsync)({
        type: 'select',
        name: 'chosenAscApiKey',
        message: 'Select an API Key from the list:',
        choices: sortedAscApiKeys.map(ascApiKey => ({
            title: formatAscApiKey(ascApiKey),
            value: ascApiKey,
        })),
    });
    return chosenAscApiKey;
}
function filterKeysFromDifferentAppleTeam(ctx, keys) {
    if (!ctx.appStore.authCtx) {
        return keys;
    }
    const teamId = ctx.appStore.authCtx.team.id;
    return keys.filter(key => !key.appleTeam || key.appleTeam?.appleTeamIdentifier === teamId);
}
function sortAscApiKeysByUpdatedAtDesc(keys) {
    return keys.sort((keyA, keyB) => new Date(keyB.updatedAt).getTime() - new Date(keyA.updatedAt).getTime());
}
exports.sortAscApiKeysByUpdatedAtDesc = sortAscApiKeysByUpdatedAtDesc;
function formatAscApiKey(ascApiKey) {
    const { keyIdentifier, appleTeam, name, updatedAt } = ascApiKey;
    let line = '';
    line += `Key ID: ${keyIdentifier}`;
    if (name) {
        line += chalk_1.default.gray(`\n    Name: ${name}`);
    }
    if (appleTeam) {
        line += chalk_1.default.gray(`\n    ${(0, AppleTeamFormatting_1.formatAppleTeam)(appleTeam)}`);
    }
    line += chalk_1.default.gray(`\n    Updated: ${(0, date_1.fromNow)(new Date(updatedAt))} ago`);
    return line;
}
exports.formatAscApiKey = formatAscApiKey;
