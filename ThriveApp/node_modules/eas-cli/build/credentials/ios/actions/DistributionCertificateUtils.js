"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.provideOrGenerateDistributionCertificateAsync = exports.selectValidDistributionCertificateAsync = exports.selectDistributionCertificateWithDependenciesAsync = exports.formatDistributionCertificate = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const dateformat_1 = tslib_1.__importDefault(require("dateformat"));
const AppleTeamFormatting_1 = require("./AppleTeamFormatting");
const log_1 = tslib_1.__importStar(require("../../../log"));
const prompts_1 = require("../../../prompts");
const date_1 = require("../../../utils/date");
const promptForCredentials_1 = require("../../utils/promptForCredentials");
const CredentialsUtils_1 = require("../appstore/CredentialsUtils");
const distributionCertificate_1 = require("../appstore/distributionCertificate");
const credentials_1 = require("../credentials");
const validateDistributionCertificate_1 = require("../validators/validateDistributionCertificate");
function formatDistributionCertificate(distributionCertificate, validSerialNumbers) {
    const { serialNumber, developerPortalIdentifier, appleTeam, validityNotBefore, validityNotAfter, updatedAt, } = distributionCertificate;
    let line = '';
    if (developerPortalIdentifier) {
        line += `Cert ID: ${developerPortalIdentifier}`;
    }
    line += `${line === '' ? '' : ', '}Serial number: ${serialNumber}${appleTeam ? `, ${(0, AppleTeamFormatting_1.formatAppleTeam)(appleTeam)}` : ''}`;
    line += chalk_1.default.gray(`\n    Created: ${(0, date_1.fromNow)(new Date(validityNotBefore))} ago, Updated: ${(0, date_1.fromNow)(new Date(updatedAt))} ago,`);
    line += chalk_1.default.gray(`\n    Expires: ${(0, dateformat_1.default)(validityNotAfter, 'expiresHeaderFormat')}`);
    const apps = distributionCertificate.iosAppBuildCredentialsList.map(buildCredentials => buildCredentials.iosAppCredentials.app);
    if (apps.length) {
        // iosAppBuildCredentialsList is capped at 20 on www
        const appFullNames = apps
            .map(app => app.fullName)
            .slice(0, 19)
            .join(',');
        const andMaybeMore = apps.length > 19 ? ' (and more)' : '';
        line += chalk_1.default.gray(`\n    📲 Used by: ${appFullNames}${andMaybeMore}`);
    }
    if (validSerialNumbers?.includes(serialNumber)) {
        line += chalk_1.default.gray("\n    ✅ Currently valid on Apple's servers.");
    }
    else {
        line += '';
    }
    return line;
}
exports.formatDistributionCertificate = formatDistributionCertificate;
async function selectDistributionCertificateAsync(distCerts, validDistributionCertificates) {
    const validDistCertSerialNumbers = validDistributionCertificates?.map(distCert => distCert.serialNumber);
    const { chosenDistCert } = await (0, prompts_1.promptAsync)({
        type: 'select',
        name: 'chosenDistCert',
        message: 'Select certificate from the list.',
        choices: distCerts.map(distCert => ({
            title: formatDistributionCertificate(distCert, validDistCertSerialNumbers),
            value: distCert,
        })),
    });
    return chosenDistCert;
}
/**
 * select a distribution certificate from an account (validity status shown on a best effort basis)
 * */
async function selectDistributionCertificateWithDependenciesAsync(ctx, account) {
    const distCertsForAccount = await ctx.ios.getDistributionCertificatesForAccountAsync(ctx.graphqlClient, account);
    if (distCertsForAccount.length === 0) {
        log_1.default.warn(`There are no Distribution Certificates available in your EAS account.`);
        return null;
    }
    if (!ctx.appStore.authCtx) {
        return await selectDistributionCertificateAsync(distCertsForAccount);
    }
    // get valid certs on the developer portal
    const certInfoFromApple = await ctx.appStore.listDistributionCertificatesAsync();
    const validDistCerts = (0, CredentialsUtils_1.filterRevokedDistributionCertsFromEasServers)(distCertsForAccount, certInfoFromApple);
    return await selectDistributionCertificateAsync(distCertsForAccount, validDistCerts);
}
exports.selectDistributionCertificateWithDependenciesAsync = selectDistributionCertificateWithDependenciesAsync;
/**
 * select a distribution certificate from a valid set (curated on a best effort basis)
 * */
async function selectValidDistributionCertificateAsync(ctx, appLookupParams) {
    const distCertsForAccount = await ctx.ios.getDistributionCertificatesForAccountAsync(ctx.graphqlClient, appLookupParams.account);
    if (distCertsForAccount.length === 0) {
        log_1.default.warn(`There are no Distribution Certificates available in your EAS account.`);
        return null;
    }
    if (!ctx.appStore.authCtx) {
        return await selectDistributionCertificateAsync(distCertsForAccount);
    }
    // filter by apple team
    (0, assert_1.default)(ctx.appStore.authCtx, 'authentication to the Apple App Store is required');
    const appleTeamIdentifier = ctx.appStore.authCtx.team.id;
    const distCertsForAppleTeam = distCertsForAccount.filter(distCert => {
        return !distCert.appleTeam || distCert.appleTeam.appleTeamIdentifier === appleTeamIdentifier;
    });
    // filter by valid certs on the developer portal
    const certInfoFromApple = await ctx.appStore.listDistributionCertificatesAsync();
    const validDistCerts = (0, CredentialsUtils_1.filterRevokedDistributionCertsFromEasServers)(distCertsForAppleTeam, certInfoFromApple);
    log_1.default.log(`${validDistCerts.length}/${distCertsForAccount.length} Distribution Certificates are currently valid for Apple Team ${ctx.appStore.authCtx?.team.id}.`);
    return await selectDistributionCertificateAsync(validDistCerts);
}
exports.selectValidDistributionCertificateAsync = selectValidDistributionCertificateAsync;
const APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR = `
You can have only ${chalk_1.default.underline('three')} Apple Distribution Certificates generated on your Apple Developer account.
Revoke the old ones or reuse existing from your other apps.
Remember that Apple Distribution Certificates are not application specific!
`;
async function provideOrGenerateDistributionCertificateAsync(ctx) {
    if (!ctx.nonInteractive) {
        const userProvided = await promptForDistCertAsync(ctx);
        if (userProvided) {
            if (!ctx.appStore.authCtx) {
                log_1.default.warn('Unable to validate distribution certificate, you are not authenticated with Apple.');
                return userProvided;
            }
            else {
                const isValid = await (0, validateDistributionCertificate_1.validateDistributionCertificateAsync)(ctx, userProvided);
                if (!isValid) {
                    log_1.default.warn("Provided Distribution Certificate is no longer valid on Apple's server");
                }
                return isValid ? userProvided : await provideOrGenerateDistributionCertificateAsync(ctx);
            }
        }
    }
    return await generateDistributionCertificateAsync(ctx);
}
exports.provideOrGenerateDistributionCertificateAsync = provideOrGenerateDistributionCertificateAsync;
async function promptForDistCertAsync(ctx) {
    let initialValues = {};
    if (ctx.appStore.authCtx) {
        initialValues = {
            teamId: ctx.appStore.authCtx.team.id,
        };
    }
    const userProvided = await (0, promptForCredentials_1.askForUserProvidedAsync)(credentials_1.distributionCertificateSchema, initialValues);
    if (!userProvided) {
        return null;
    }
    if (ctx.appStore.authCtx && userProvided.teamId === initialValues.teamId) {
        return {
            ...userProvided,
            teamName: ctx.appStore.authCtx.team.name,
        };
    }
    return userProvided;
}
async function generateDistributionCertificateAsync(ctx) {
    await ctx.appStore.ensureAuthenticatedAsync();
    try {
        return await ctx.appStore.createDistributionCertificateAsync();
    }
    catch (e) {
        if (e instanceof distributionCertificate_1.AppleTooManyCertsError) {
            const distCerts = await ctx.appStore.listDistributionCertificatesAsync();
            log_1.default.warn('Maximum number of Distribution Certificates generated on Apple Developer Portal.');
            log_1.default.warn(APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR);
            if (ctx.nonInteractive) {
                throw new Error("Start the CLI without the '--non-interactive' flag to revoke existing certificates.");
            }
            log_1.default.log(chalk_1.default.grey(`✅  Distribution Certificates can be revoked with no side effects for App Store builds.`));
            log_1.default.log((0, log_1.learnMore)('https://docs.expo.dev/distribution/app-signing/#summary'));
            log_1.default.newLine();
            const { distCertsToRevoke } = await (0, prompts_1.promptAsync)({
                type: 'multiselect',
                name: 'distCertsToRevoke',
                message: 'Select certificates to revoke.',
                // @ts-expect-error property missing from `@types/prompts`
                optionsPerPage: 20,
                choices: distCerts.map(distCert => ({
                    value: distCert,
                    title: formatDistributionCertificateFromApple(distCert),
                })),
            });
            if (distCertsToRevoke.length > 0) {
                const ids = distCertsToRevoke.map(({ id }) => id);
                await ctx.appStore.revokeDistributionCertificateAsync(ids);
            }
        }
        else {
            throw e;
        }
    }
    return await generateDistributionCertificateAsync(ctx);
}
function formatDistributionCertificateFromApple(appleInfo) {
    const { name, status, id, expires, created, ownerName, serialNumber } = appleInfo;
    const expiresDate = new Date(expires * 1000).toDateString();
    const createdDate = new Date(created * 1000).toDateString();
    return [
        `🍏 ${chalk_1.default.bold(name)} (${status})`,
        `${chalk_1.default.bold('ID:')} ${id} ${chalk_1.default.bold('Serial Number:')} ${serialNumber}`,
        `${chalk_1.default.bold('Apple Team:')} ${appleInfo.ownerId} (${ownerName})`,
        `${chalk_1.default.bold('Expires:')} ${expiresDate} ${chalk_1.default.bold('Created:')} ${createdDate}`,
    ].join('\n\t');
}
