"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveAscApiKey = exports.SelectAndRemoveAscApiKey = void 0;
const tslib_1 = require("tslib");
const AscApiKeyUtils_1 = require("./AscApiKeyUtils");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const prompts_1 = require("../../../prompts");
class SelectAndRemoveAscApiKey {
    constructor(account) {
        this.account = account;
    }
    async runAsync(ctx) {
        const selected = await (0, AscApiKeyUtils_1.selectAscApiKeysFromAccountAsync)(ctx, this.account);
        if (selected) {
            await new RemoveAscApiKey(selected).runAsync(ctx);
            log_1.default.succeed('Removed App Store Connect API Key');
            log_1.default.newLine();
        }
    }
}
exports.SelectAndRemoveAscApiKey = SelectAndRemoveAscApiKey;
class RemoveAscApiKey {
    constructor(ascApiKey) {
        this.ascApiKey = ascApiKey;
    }
    async runAsync(ctx) {
        if (ctx.nonInteractive) {
            throw new Error(`Cannot remove App Store Connect API Keys in non-interactive mode.`);
        }
        // TODO(quin): add an extra edge on AppStoreConnectApiKey to find the apps using it
        const confirm = await (0, prompts_1.confirmAsync)({
            message: `Deleting this API Key may affect your projects that rely on it. Do you want to continue?`,
        });
        if (!confirm) {
            log_1.default.log('Aborting');
            return;
        }
        log_1.default.log('Removing API Key');
        await ctx.ios.deleteAscApiKeyAsync(ctx.graphqlClient, this.ascApiKey.id);
        let shouldRevoke = false;
        if (!ctx.nonInteractive) {
            shouldRevoke = await (0, prompts_1.confirmAsync)({
                message: `Do you also want to revoke this API Key on the Apple Developer Portal?`,
            });
        }
        else if (ctx.nonInteractive) {
            log_1.default.log('Skipping API Key revocation on the Apple Developer Portal.');
        }
        if (shouldRevoke) {
            await ctx.appStore.revokeAscApiKeyAsync(this.ascApiKey.keyIdentifier);
        }
    }
}
exports.RemoveAscApiKey = RemoveAscApiKey;
