"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAppLookupParamsFromContextAsync = exports.getAppFromContextAsync = exports.assignBuildCredentialsAsync = exports.getDistributionCertificateAsync = exports.getProvisioningProfileAsync = exports.getBuildCredentialsAsync = exports.getAllBuildCredentialsAsync = void 0;
const tslib_1 = require("tslib");
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const AppleTeamUtils_1 = require("./AppleTeamUtils");
const projectUtils_1 = require("../../../project/projectUtils");
async function getAllBuildCredentialsAsync(ctx, app) {
    const appCredentials = await ctx.ios.getIosAppCredentialsWithBuildCredentialsAsync(ctx.graphqlClient, app, {});
    if (!appCredentials) {
        return [];
    }
    return appCredentials.iosAppBuildCredentialsList;
}
exports.getAllBuildCredentialsAsync = getAllBuildCredentialsAsync;
async function getBuildCredentialsAsync(ctx, app, iosDistributionType) {
    const appCredentials = await ctx.ios.getIosAppCredentialsWithBuildCredentialsAsync(ctx.graphqlClient, app, {
        iosDistributionType,
    });
    if (!appCredentials || appCredentials.iosAppBuildCredentialsList.length === 0) {
        return null;
    }
    const [buildCredentials] = appCredentials.iosAppBuildCredentialsList;
    return buildCredentials;
}
exports.getBuildCredentialsAsync = getBuildCredentialsAsync;
async function getProvisioningProfileAsync(ctx, app, iosDistributionType) {
    const buildCredentials = await getBuildCredentialsAsync(ctx, app, iosDistributionType);
    return buildCredentials?.provisioningProfile ?? null;
}
exports.getProvisioningProfileAsync = getProvisioningProfileAsync;
async function getDistributionCertificateAsync(ctx, app, iosDistributionType) {
    const buildCredentials = await getBuildCredentialsAsync(ctx, app, iosDistributionType);
    return buildCredentials?.distributionCertificate ?? null;
}
exports.getDistributionCertificateAsync = getDistributionCertificateAsync;
async function assignBuildCredentialsAsync(ctx, app, iosDistributionType, distCert, provisioningProfile, appleTeam) {
    const resolvedAppleTeam = (0, nullthrows_1.default)(appleTeam ?? (await (0, AppleTeamUtils_1.resolveAppleTeamIfAuthenticatedAsync)(ctx, app)));
    const appleAppIdentifier = await ctx.ios.createOrGetExistingAppleAppIdentifierAsync(ctx.graphqlClient, app, resolvedAppleTeam);
    return await ctx.ios.createOrUpdateIosAppBuildCredentialsAsync(ctx.graphqlClient, app, {
        appleTeam: resolvedAppleTeam,
        appleAppIdentifierId: appleAppIdentifier.id,
        appleDistributionCertificateId: distCert.id,
        appleProvisioningProfileId: provisioningProfile.id,
        iosDistributionType,
    });
}
exports.assignBuildCredentialsAsync = assignBuildCredentialsAsync;
async function getAppFromContextAsync(ctx) {
    ctx.ensureProjectContext();
    const projectName = ctx.exp.slug;
    const projectId = ctx.projectId;
    const account = await (0, projectUtils_1.getOwnerAccountForProjectIdAsync)(ctx.graphqlClient, projectId);
    return {
        account,
        projectName,
    };
}
exports.getAppFromContextAsync = getAppFromContextAsync;
async function getAppLookupParamsFromContextAsync(ctx, target) {
    const app = await getAppFromContextAsync(ctx);
    return { ...app, bundleIdentifier: target.bundleIdentifier };
}
exports.getAppLookupParamsFromContextAsync = getAppLookupParamsFromContextAsync;
