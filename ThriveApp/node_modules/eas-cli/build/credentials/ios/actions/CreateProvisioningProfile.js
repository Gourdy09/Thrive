"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateProvisioningProfile = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const AppleTeamUtils_1 = require("./AppleTeamUtils");
const ProvisioningProfileUtils_1 = require("./ProvisioningProfileUtils");
const log_1 = tslib_1.__importStar(require("../../../log"));
const errors_1 = require("../../errors");
const promptForCredentials_1 = require("../../utils/promptForCredentials");
const authenticateTypes_1 = require("../appstore/authenticateTypes");
const credentials_1 = require("../credentials");
class CreateProvisioningProfile {
    constructor(app, target, distributionCertificate) {
        this.app = app;
        this.target = target;
        this.distributionCertificate = distributionCertificate;
    }
    async runAsync(ctx) {
        if (ctx.freezeCredentials) {
            throw new errors_1.ForbidCredentialModificationError('Run this command again without the --freeze-credentials flag in order to generate a new Provisioning Profile.');
        }
        else if (ctx.nonInteractive &&
            ctx.appStore.defaultAuthenticationMode !== authenticateTypes_1.AuthenticationMode.API_KEY) {
            throw new errors_1.InsufficientAuthenticationNonInteractiveError(`In order to generate a new Provisioning Profile, authentication with an ASC API key is required in non-interactive mode. ${(0, log_1.learnMore)('https://docs.expo.dev/build/building-on-ci/#optional-provide-an-asc-api-token-for-your-apple-team')}`);
        }
        const appleAuthCtx = await ctx.appStore.ensureAuthenticatedAsync();
        const provisioningProfile = await this.provideOrGenerateAsync(ctx, appleAuthCtx);
        const appleTeam = (0, nullthrows_1.default)(await (0, AppleTeamUtils_1.resolveAppleTeamIfAuthenticatedAsync)(ctx, this.app));
        const appleAppIdentifier = await ctx.ios.createOrGetExistingAppleAppIdentifierAsync(ctx.graphqlClient, this.app, appleTeam);
        const provisioningProfileMutationResult = await ctx.ios.createProvisioningProfileAsync(ctx.graphqlClient, this.app, appleAppIdentifier, {
            appleProvisioningProfile: provisioningProfile.provisioningProfile,
            developerPortalIdentifier: provisioningProfile.provisioningProfileId,
        });
        log_1.default.succeed('Created provisioning profile');
        return provisioningProfileMutationResult;
    }
    async maybeGetUserProvidedAsync(ctx) {
        if (ctx.nonInteractive) {
            return null;
        }
        const userProvided = await (0, promptForCredentials_1.askForUserProvidedAsync)(credentials_1.provisioningProfileSchema);
        if (userProvided) {
            // userProvided profiles don't come with ProvisioningProfileId's (only accessible from Apple Portal API)
            log_1.default.warn('Provisioning profile: Unable to validate specified profile.');
            return userProvided;
        }
        return null;
    }
    async provideOrGenerateAsync(ctx, appleAuthCtx) {
        const maybeUserProvided = await this.maybeGetUserProvidedAsync(ctx);
        if (maybeUserProvided) {
            // userProvided profiles don't come with ProvisioningProfileId's (only accessible from Apple Portal API)
            log_1.default.warn('Provisioning profile: Unable to validate specified profile.');
            return maybeUserProvided;
        }
        (0, assert_1.default)(this.distributionCertificate.certificateP12, 'Distribution Certificate must have p12 certificate');
        (0, assert_1.default)(this.distributionCertificate.certificatePassword, 'Distribution Certificate must have certificate password');
        return await (0, ProvisioningProfileUtils_1.generateProvisioningProfileAsync)(ctx, this.target, this.app.bundleIdentifier, {
            certId: this.distributionCertificate.developerPortalIdentifier ?? undefined,
            certP12: this.distributionCertificate.certificateP12,
            certPassword: this.distributionCertificate.certificatePassword,
            distCertSerialNumber: this.distributionCertificate.serialNumber,
            teamId: this.distributionCertificate.appleTeam?.appleTeamIdentifier ?? appleAuthCtx.team.id,
        });
    }
}
exports.CreateProvisioningProfile = CreateProvisioningProfile;
