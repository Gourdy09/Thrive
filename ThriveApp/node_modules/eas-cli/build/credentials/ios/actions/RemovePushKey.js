"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemovePushKey = exports.SelectAndRemovePushKey = void 0;
const tslib_1 = require("tslib");
const PushKeyUtils_1 = require("./PushKeyUtils");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const prompts_1 = require("../../../prompts");
class SelectAndRemovePushKey {
    constructor(account) {
        this.account = account;
    }
    async runAsync(ctx) {
        const selected = await (0, PushKeyUtils_1.selectPushKeyAsync)(ctx, this.account);
        if (selected) {
            await new RemovePushKey(selected).runAsync(ctx);
            log_1.default.succeed('Removed push key');
            log_1.default.newLine();
        }
    }
}
exports.SelectAndRemovePushKey = SelectAndRemovePushKey;
class RemovePushKey {
    constructor(pushKey) {
        this.pushKey = pushKey;
    }
    async runAsync(ctx) {
        if (ctx.nonInteractive) {
            throw new Error(`Cannot remove push keys in non-interactive mode`);
        }
        const apps = this.pushKey.iosAppCredentialsList.map(appCredentials => appCredentials.app);
        if (apps.length !== 0) {
            // iosAppCredentialsList is capped at 20 on www
            const appFullNames = apps
                .map(app => app.fullName)
                .slice(0, 19)
                .join(',');
            const andMaybeMore = apps.length > 19 ? ' (and more)' : '';
            const confirm = await (0, prompts_1.confirmAsync)({
                message: `Removing this push key will disable push notifications for ${appFullNames}${andMaybeMore}. Do you want to continue?`,
            });
            if (!confirm) {
                log_1.default.log('Aborting');
                return;
            }
        }
        log_1.default.log('Removing Push Key');
        await ctx.ios.deletePushKeyAsync(ctx.graphqlClient, this.pushKey.id);
        let shouldRevoke = false;
        if (!ctx.nonInteractive) {
            shouldRevoke = await (0, prompts_1.confirmAsync)({
                message: `Do you also want to revoke this Push Key on the Apple Developer Portal?`,
            });
        }
        else if (ctx.nonInteractive) {
            log_1.default.log('Skipping certificate revocation on the Apple Developer Portal.');
        }
        if (shouldRevoke) {
            await ctx.appStore.revokePushKeyAsync([this.pushKey.keyIdentifier]);
        }
    }
}
exports.RemovePushKey = RemovePushKey;
