"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssignAscApiKey = void 0;
const tslib_1 = require("tslib");
const AppleTeamUtils_1 = require("./AppleTeamUtils");
const AscApiKeyUtils_1 = require("./AscApiKeyUtils");
const log_1 = tslib_1.__importDefault(require("../../../log"));
class AssignAscApiKey {
    constructor(app) {
        this.app = app;
    }
    async runAsync(ctx, ascApiKey, purpose) {
        const appleTeam = (await (0, AppleTeamUtils_1.resolveAppleTeamIfAuthenticatedAsync)(ctx, this.app)) ?? ascApiKey.appleTeam ?? null;
        const appCredentials = await ctx.ios.createOrGetIosAppCredentialsWithCommonFieldsAsync(ctx.graphqlClient, this.app, { appleTeam: appleTeam ?? undefined });
        let updatedAppCredentials;
        if (purpose === AscApiKeyUtils_1.AppStoreApiKeyPurpose.SUBMISSION_SERVICE) {
            updatedAppCredentials = await ctx.ios.updateIosAppCredentialsAsync(ctx.graphqlClient, appCredentials, {
                ascApiKeyIdForSubmissions: ascApiKey.id,
            });
        }
        else {
            throw new Error(`${purpose} is not yet supported.`);
        }
        log_1.default.succeed(`App Store Connect API Key assigned to ${this.app.projectName}: ${this.app.bundleIdentifier} for ${purpose}.`);
        return updatedAppCredentials;
    }
}
exports.AssignAscApiKey = AssignAscApiKey;
