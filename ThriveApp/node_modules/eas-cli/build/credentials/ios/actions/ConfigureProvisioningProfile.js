"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigureProvisioningProfile = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const log_1 = tslib_1.__importStar(require("../../../log"));
const ora_1 = require("../../../ora");
const target_1 = require("../../../project/ios/target");
const errors_1 = require("../../errors");
const authenticateTypes_1 = require("../appstore/authenticateTypes");
class ConfigureProvisioningProfile {
    constructor(app, target, distributionCertificate, originalProvisioningProfile) {
        this.app = app;
        this.target = target;
        this.distributionCertificate = distributionCertificate;
        this.originalProvisioningProfile = originalProvisioningProfile;
    }
    async runAsync(ctx) {
        if (ctx.freezeCredentials) {
            throw new errors_1.ForbidCredentialModificationError('Remove the --freeze-credentials flag to configure a Provisioning Profile.');
        }
        else if (ctx.nonInteractive &&
            ctx.appStore.defaultAuthenticationMode !== authenticateTypes_1.AuthenticationMode.API_KEY) {
            throw new errors_1.InsufficientAuthenticationNonInteractiveError(`In order to configure your Provisioning Profile, authentication with an ASC API key is required in non-interactive mode. ${(0, log_1.learnMore)('https://docs.expo.dev/build/building-on-ci/#optional-provide-an-asc-api-token-for-your-apple-team')}`);
        }
        const { developerPortalIdentifier, provisioningProfile } = this.originalProvisioningProfile;
        if (!developerPortalIdentifier && !provisioningProfile) {
            log_1.default.warn("The provisioning profile we have on file cannot be configured on Apple's servers.");
            return null;
        }
        if (!ctx.appStore.authCtx) {
            log_1.default.warn("Without access to your Apple account we can't configure provisioning profiles for you.");
            log_1.default.warn('Make sure to recreate the profile if you selected a new distribution certificate.');
            return null;
        }
        const applePlatform = (0, target_1.getApplePlatformFromTarget)(this.target);
        const profilesFromApple = await ctx.appStore.listProvisioningProfilesAsync(this.app.bundleIdentifier, applePlatform);
        const [matchingProfile] = profilesFromApple.filter(appleInfo => developerPortalIdentifier
            ? appleInfo.provisioningProfileId === developerPortalIdentifier
            : appleInfo.provisioningProfile === provisioningProfile);
        if (!matchingProfile) {
            log_1.default.warn(`Profile ${developerPortalIdentifier ? `${developerPortalIdentifier} ` : ''}not found on Apple Developer Portal.`);
            return null;
        }
        return await this.configureAndUpdateAsync(ctx, ctx.appStore.authCtx, this.app, matchingProfile);
    }
    async configureAndUpdateAsync(ctx, authCtx, app, profileFromApple) {
        const { developerPortalIdentifier, certificateP12, certificatePassword, serialNumber } = this.distributionCertificate;
        (0, assert_1.default)(certificateP12 && certificatePassword, 'Distribution Certificate P12 and Password is required');
        // configure profile on Apple's Server to use our distCert
        const updatedProfile = await ctx.appStore.useExistingProvisioningProfileAsync(app.bundleIdentifier, profileFromApple, {
            certId: developerPortalIdentifier ?? undefined,
            certP12: certificateP12,
            certPassword: certificatePassword,
            distCertSerialNumber: serialNumber,
            teamId: authCtx.team.id,
        });
        const bundleIdTag = `(${app.bundleIdentifier})`;
        const slugTag = `@${app.account.name}/${app.projectName}`;
        const projectTag = `${chalk_1.default.bold(slugTag)} ${chalk_1.default.dim(bundleIdTag)}`;
        const spinner = (0, ora_1.ora)(`Updating Expo profile for ${projectTag}`).start();
        try {
            const configuredProvisioningProfile = await ctx.ios.updateProvisioningProfileAsync(ctx.graphqlClient, this.originalProvisioningProfile.id, {
                appleProvisioningProfile: updatedProfile.provisioningProfile,
                developerPortalIdentifier: updatedProfile.provisioningProfileId,
            });
            spinner.succeed(`Updated Expo profile for ${projectTag}`);
            return configuredProvisioningProfile;
        }
        catch (error) {
            spinner.fail();
            throw error;
        }
    }
}
exports.ConfigureProvisioningProfile = ConfigureProvisioningProfile;
