"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runRegistrationUrlMethodAsync = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const indent_string_1 = tslib_1.__importDefault(require("indent-string"));
const qrcode_terminal_1 = tslib_1.__importDefault(require("qrcode-terminal"));
const url_1 = require("url");
const api_1 = require("../../../api");
const AppleDeviceRegistrationRequestMutation_1 = require("../../../credentials/ios/api/graphql/mutations/AppleDeviceRegistrationRequestMutation");
const log_1 = tslib_1.__importDefault(require("../../../log"));
async function runRegistrationUrlMethodAsync(graphqlClient, accountId, appleTeam) {
    const registrationURL = await generateDeviceRegistrationURLAsync(graphqlClient, accountId, appleTeam);
    log_1.default.newLine();
    qrcode_terminal_1.default.generate(registrationURL, { small: true }, code => {
        log_1.default.log(`${(0, indent_string_1.default)(code, 2)}\n`);
    });
    log_1.default.log('Open the following link on your iOS devices (or scan the QR code) and follow the instructions to install the development profile:');
    log_1.default.log(chalk_1.default.green(`${registrationURL}`));
}
exports.runRegistrationUrlMethodAsync = runRegistrationUrlMethodAsync;
async function generateDeviceRegistrationURLAsync(graphqlClient, accountId, appleTeam) {
    const appleDeviceRegistrationRequest = await AppleDeviceRegistrationRequestMutation_1.AppleDeviceRegistrationRequestMutation.createAppleDeviceRegistrationRequestAsync(graphqlClient, appleTeam.id, accountId);
    return formatRegistrationURL(appleDeviceRegistrationRequest.id);
}
function formatRegistrationURL(id) {
    return new url_1.URL(`/register-device/${id}`, (0, api_1.getExpoWebsiteBaseUrl)()).toString();
}
