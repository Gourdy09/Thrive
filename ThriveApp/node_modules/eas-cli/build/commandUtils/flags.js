"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EasJsonOnlyFlag = exports.EASNonInteractiveFlag = exports.EASVariableScopeFlag = exports.EASVariableVisibilityFlag = exports.EASVariableFormatFlag = exports.EASEnvironmentFlag = exports.EasNonInteractiveAndJsonFlags = void 0;
const core_1 = require("@oclif/core");
const generated_1 = require("../graphql/generated");
// NOTE: not exactly true, but, provided mapToLowercase and upperCaseAsync
// are used in tandem, it saves on unnecessary typying in commands
async function upperCaseAsync(input) {
    return input.toUpperCase();
}
function mapToLowercase(options) {
    return options.map(option => option.toLowerCase());
}
exports.EasNonInteractiveAndJsonFlags = {
    json: core_1.Flags.boolean({
        description: 'Enable JSON output, non-JSON messages will be printed to stderr.',
        dependsOn: ['non-interactive'],
    }),
    'non-interactive': core_1.Flags.boolean({
        description: 'Run the command in non-interactive mode.',
    }),
};
exports.EASEnvironmentFlag = {
    environment: core_1.Flags.enum({
        description: "Environment variable's environment",
        parse: upperCaseAsync,
        options: mapToLowercase([
            generated_1.EnvironmentVariableEnvironment.Development,
            generated_1.EnvironmentVariableEnvironment.Preview,
            generated_1.EnvironmentVariableEnvironment.Production,
        ]),
    }),
};
exports.EASVariableFormatFlag = {
    format: core_1.Flags.enum({
        description: 'Output format',
        options: ['long', 'short'],
        default: 'short',
    }),
};
exports.EASVariableVisibilityFlag = {
    visibility: core_1.Flags.enum({
        description: 'Visibility of the variable',
        options: mapToLowercase([
            generated_1.EnvironmentVariableVisibility.Secret,
            generated_1.EnvironmentVariableVisibility.Sensitive,
            generated_1.EnvironmentVariableVisibility.Public,
        ]),
        parse: upperCaseAsync,
    }),
};
exports.EASVariableScopeFlag = {
    scope: core_1.Flags.enum({
        description: 'Scope for the variable',
        options: mapToLowercase([generated_1.EnvironmentVariableScope.Shared, generated_1.EnvironmentVariableScope.Project]),
        parse: upperCaseAsync,
        default: generated_1.EnvironmentVariableScope.Project,
    }),
};
exports.EASNonInteractiveFlag = {
    'non-interactive': core_1.Flags.boolean({
        description: 'Run the command in non-interactive mode.',
    }),
};
exports.EasJsonOnlyFlag = {
    json: core_1.Flags.boolean({
        description: 'Enable JSON output, non-JSON messages will be printed to stderr.',
    }),
};
