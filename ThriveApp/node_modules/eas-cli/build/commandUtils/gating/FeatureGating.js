"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const FeatureGateKey_1 = require("./FeatureGateKey");
const FeatureGateTestOverrides = tslib_1.__importStar(require("./FeatureGateTestOverrides"));
class FeatureGating {
    constructor(serverValues, envOverrides) {
        this.serverValues = serverValues;
        this.envOverrides = envOverrides;
    }
    isEnabled(experimentKey) {
        if (process.env.NODE_ENV === 'test' && FeatureGateTestOverrides.isOverridden(experimentKey)) {
            return FeatureGateTestOverrides.getOverride(experimentKey);
        }
        if (this.envOverrides.isOverridden(experimentKey)) {
            return this.envOverrides.getOverride(experimentKey);
        }
        if (experimentKey in this.serverValues) {
            return this.serverValues[experimentKey];
        }
        return FeatureGateKey_1.featureGateDefaultValueWhenNoServerValue[experimentKey];
    }
    /**
     * Test gate override methods
     */
    static overrideKeyForScope(key, enabled, scope) {
        if (process.env.NODE_ENV !== 'test') {
            throw new Error(`Cannot overrideKeyForScope outside of test environment`);
        }
        FeatureGateTestOverrides.setOverride(key, enabled);
        try {
            scope();
        }
        finally {
            FeatureGateTestOverrides.removeOverride(key);
        }
    }
    static async overrideKeyForScopeAsync(key, enabled, scope) {
        if (process.env.NODE_ENV !== 'test') {
            throw new Error(`Cannot overrideKeyForScopeAsync outside of test environment`);
        }
        FeatureGateTestOverrides.setOverride(key, enabled);
        try {
            await scope();
        }
        finally {
            FeatureGateTestOverrides.removeOverride(key);
        }
    }
    static overrideKeyForEachInTest(key, enabled) {
        beforeEach(() => {
            FeatureGateTestOverrides.setOverride(key, enabled);
        });
        afterEach(() => {
            FeatureGateTestOverrides.removeOverride(key);
        });
    }
}
exports.default = FeatureGating;
