"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelQuery = exports.composeUpdateBranchObject = void 0;
const tslib_1 = require("tslib");
const graphql_1 = require("graphql");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const errors_1 = require("../../channel/errors");
const client_1 = require("../client");
const Update_1 = require("../types/Update");
const UpdateChannelBasicInfo_1 = require("../types/UpdateChannelBasicInfo");
function composeUpdateBranchObject(branchInfo, updateGroups) {
    return {
        ...branchInfo,
        updateGroups,
    };
}
exports.composeUpdateBranchObject = composeUpdateBranchObject;
exports.ChannelQuery = {
    async viewUpdateChannelAsync(graphqlClient, { appId, channelName, filter }) {
        const response = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query ViewUpdateChannelOnApp(
              $appId: String!
              $channelName: String!
              $filter: UpdatesFilter
            ) {
              app {
                byId(appId: $appId) {
                  id
                  updateChannelByName(name: $channelName) {
                    id
                    name
                    updatedAt
                    createdAt
                    branchMapping
                    updateBranches(offset: 0, limit: 5) {
                      id
                      name
                      updateGroups(offset: 0, limit: 1, filter: $filter) {
                        id
                        ...UpdateFragment
                      }
                    }
                  }
                }
              }
            }
            ${(0, graphql_1.print)(Update_1.UpdateFragmentNode)}
          `, { appId, channelName, filter }, { additionalTypenames: ['UpdateChannel', 'UpdateBranch', 'Update'] })
            .toPromise());
        const { updateChannelByName } = response.app.byId;
        if (!updateChannelByName) {
            throw new errors_1.ChannelNotFoundError(`Could not find channel with the name ${channelName}`);
        }
        return updateChannelByName;
    },
    async viewUpdateChannelsOnAppAsync(graphqlClient, { appId, limit, offset }) {
        const response = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query ViewUpdateChannelsOnApp($appId: String!, $offset: Int!, $limit: Int!) {
              app {
                byId(appId: $appId) {
                  id
                  updateChannels(offset: $offset, limit: $limit) {
                    id
                    name
                    updatedAt
                    createdAt
                    branchMapping
                    updateBranches(offset: 0, limit: 5) {
                      id
                      name
                      updateGroups(offset: 0, limit: 1) {
                        id
                        ...UpdateFragment
                      }
                    }
                  }
                }
              }
            }
            ${(0, graphql_1.print)(Update_1.UpdateFragmentNode)}
          `, { appId, offset, limit }, { additionalTypenames: ['UpdateChannel', 'UpdateBranch', 'Update'] })
            .toPromise());
        const { updateChannels } = response.app.byId;
        if (!updateChannels) {
            throw new Error(`Could not find channels on project with id ${appId}`);
        }
        return updateChannels;
    },
    async viewUpdateChannelsBasicInfoPaginatedOnAppAsync(graphqlClient, { appId, first, after, last, before }) {
        const response = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query ViewUpdateChannelsPaginatedOnApp(
              $appId: String!
              $first: Int
              $after: String
              $last: Int
              $before: String
            ) {
              app {
                byId(appId: $appId) {
                  id
                  channelsPaginated(first: $first, after: $after, before: $before, last: $last) {
                    edges {
                      node {
                        id
                        ...UpdateChannelBasicInfoFragment
                      }
                      cursor
                    }
                    pageInfo {
                      hasNextPage
                      hasPreviousPage
                      startCursor
                      endCursor
                    }
                  }
                }
              }
            }
            ${(0, graphql_1.print)(UpdateChannelBasicInfo_1.UpdateChannelBasicInfoFragmentNode)}
          `, { appId, first, after, last, before }, { additionalTypenames: ['UpdateChannel', 'UpdateBranch', 'Update'] })
            .toPromise());
        const { channelsPaginated } = response.app.byId;
        if (!channelsPaginated) {
            throw new Error(`Could not find channels on project with id ${appId}`);
        }
        return channelsPaginated;
    },
};
