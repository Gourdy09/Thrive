import { ExpoGraphqlClient } from '../../commandUtils/context/contextUtils/createGraphqlClient';
import { AppPlatform, BranchesBasicPaginatedOnAppQuery, BranchesBasicPaginatedOnAppQueryVariables, BranchesByAppQueryVariables, UpdateBranchBasicInfoFragment, UpdateBranchFragment, ViewBranchQueryVariables, ViewBranchesOnUpdateChannelQuery, ViewBranchesOnUpdateChannelQueryVariables } from '../generated';
export type UpdateBranchOnChannelObject = NonNullable<ViewBranchesOnUpdateChannelQuery['app']['byId']['updateChannelByName']>['updateBranches'][number];
export declare const BranchQuery: {
    getBranchByNameAsync(graphqlClient: ExpoGraphqlClient, { appId, name }: ViewBranchQueryVariables): Promise<UpdateBranchBasicInfoFragment>;
    getLatestUpdateIdOnBranchAsync(graphqlClient: ExpoGraphqlClient, { appId, branchName, platform, runtimeVersion, }: {
        appId: string;
        branchName: string;
        platform: AppPlatform;
        runtimeVersion: string;
    }): Promise<string | null>;
    listBranchesOnAppAsync(graphqlClient: ExpoGraphqlClient, { appId, limit, offset }: BranchesByAppQueryVariables): Promise<UpdateBranchFragment[]>;
    listBranchesBasicInfoPaginatedOnAppAsync(graphqlClient: ExpoGraphqlClient, { appId, first, after, last, before }: BranchesBasicPaginatedOnAppQueryVariables): Promise<BranchesBasicPaginatedOnAppQuery['app']['byId']['branchesPaginated']>;
    listBranchesOnChannelAsync(graphqlClient: ExpoGraphqlClient, { appId, channelName, offset, limit }: ViewBranchesOnUpdateChannelQueryVariables): Promise<UpdateBranchOnChannelObject[]>;
};
