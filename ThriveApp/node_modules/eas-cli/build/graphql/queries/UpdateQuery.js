"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateQuery = void 0;
const tslib_1 = require("tslib");
const graphql_1 = require("graphql");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const client_1 = require("../client");
const Update_1 = require("../types/Update");
exports.UpdateQuery = {
    async viewUpdateGroupAsync(graphqlClient, { groupId }) {
        const { updatesByGroup } = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query ViewUpdatesByGroup($groupId: ID!) {
              updatesByGroup(group: $groupId) {
                id
                ...UpdateFragment
              }
            }
            ${(0, graphql_1.print)(Update_1.UpdateFragmentNode)}
          `, {
            groupId,
        }, { additionalTypenames: ['Update'] })
            .toPromise());
        if (updatesByGroup.length === 0) {
            throw new Error(`Could not find any updates with group ID: "${groupId}"`);
        }
        return updatesByGroup;
    },
    async viewUpdateGroupsOnBranchAsync(graphqlClient, { limit, offset, appId, branchName, filter }) {
        const response = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query ViewUpdateGroupsOnBranch(
              $appId: String!
              $branchName: String!
              $limit: Int!
              $offset: Int!
              $filter: UpdatesFilter
            ) {
              app {
                byId(appId: $appId) {
                  id
                  updateBranchByName(name: $branchName) {
                    id
                    updateGroups(limit: $limit, offset: $offset, filter: $filter) {
                      id
                      ...UpdateFragment
                    }
                  }
                }
              }
            }
            ${(0, graphql_1.print)(Update_1.UpdateFragmentNode)}
          `, {
            appId,
            limit,
            offset,
            branchName,
            filter,
        }, { additionalTypenames: ['Update'] })
            .toPromise());
        const branch = response.app.byId.updateBranchByName;
        if (!branch) {
            throw new Error(`Could not find branch "${branchName}"`);
        }
        return branch.updateGroups;
    },
    async viewUpdateGroupsOnAppAsync(graphqlClient, { limit, offset, appId, filter }) {
        const response = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query ViewUpdateGroupsOnApp(
              $appId: String!
              $limit: Int!
              $offset: Int!
              $filter: UpdatesFilter
            ) {
              app {
                byId(appId: $appId) {
                  id
                  updateGroups(limit: $limit, offset: $offset, filter: $filter) {
                    id
                    ...UpdateFragment
                  }
                }
              }
            }
            ${(0, graphql_1.print)(Update_1.UpdateFragmentNode)}
          `, {
            appId,
            limit,
            offset,
            filter,
        }, { additionalTypenames: ['Update'] })
            .toPromise());
        if (!response) {
            throw new Error(`Could not find project with id "${appId}"`);
        }
        return response.app.byId.updateGroups;
    },
};
