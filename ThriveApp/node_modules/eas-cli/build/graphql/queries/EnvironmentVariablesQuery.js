"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentVariablesQuery = void 0;
const tslib_1 = require("tslib");
const graphql_1 = require("graphql");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const client_1 = require("../client");
const EnvironmentVariable_1 = require("../types/EnvironmentVariable");
exports.EnvironmentVariablesQuery = {
    async byAppIdWithSensitiveAsync(graphqlClient, { appId, environment, filterNames, }) {
        const data = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query EnvironmentVariablesIncludingSensitiveByAppId(
              $appId: String!
              $filterNames: [String!]
              $environment: EnvironmentVariableEnvironment!
            ) {
              app {
                byId(appId: $appId) {
                  id
                  environmentVariablesIncludingSensitive(
                    filterNames: $filterNames
                    environment: $environment
                  ) {
                    id
                    name
                    value
                  }
                }
              }
            }
          `, { appId, filterNames, environment }, { additionalTypenames: ['EnvironmentVariableWithSecret'] })
            .toPromise());
        return data.app?.byId.environmentVariablesIncludingSensitive ?? [];
    },
    async byAppIdAsync(graphqlClient, { appId, environment, filterNames, }) {
        const data = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query EnvironmentVariablesByAppId(
              $appId: String!
              $filterNames: [String!]
              $environment: EnvironmentVariableEnvironment!
            ) {
              app {
                byId(appId: $appId) {
                  id
                  environmentVariables(filterNames: $filterNames, environment: $environment) {
                    id
                    ...EnvironmentVariableFragment
                  }
                }
              }
            }
            ${(0, graphql_1.print)(EnvironmentVariable_1.EnvironmentVariableFragmentNode)}
          `, { appId, filterNames, environment }, { additionalTypenames: ['EnvironmentVariable'] })
            .toPromise());
        return data.app?.byId.environmentVariables ?? [];
    },
    async sharedAsync(graphqlClient, { appId, filterNames }) {
        const data = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query EnvironmentVariablesShared($appId: String!, $filterNames: [String!]) {
              app {
                byId(appId: $appId) {
                  id
                  ownerAccount {
                    id
                    environmentVariables(filterNames: $filterNames) {
                      id
                      ...EnvironmentVariableFragment
                    }
                  }
                }
              }
            }
            ${(0, graphql_1.print)(EnvironmentVariable_1.EnvironmentVariableFragmentNode)}
          `, { appId, filterNames }, { additionalTypenames: ['EnvironmentVariable'] })
            .toPromise());
        return data.app?.byId.ownerAccount.environmentVariables ?? [];
    },
    async sharedWithSensitiveAsync(graphqlClient, { appId, filterNames }) {
        const data = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query EnvironmentVariablesSharedWithSensitive(
              $appId: String!
              $filterNames: [String!]
            ) {
              app {
                byId(appId: $appId) {
                  id
                  ownerAccount {
                    id
                    environmentVariablesIncludingSensitive(filterNames: $filterNames) {
                      id
                      name
                      value
                    }
                  }
                }
              }
            }
          `, { appId, filterNames }, { additionalTypenames: ['EnvironmentVariableWithSecret'] })
            .toPromise());
        return data.app?.byId.ownerAccount.environmentVariablesIncludingSensitive ?? [];
    },
};
