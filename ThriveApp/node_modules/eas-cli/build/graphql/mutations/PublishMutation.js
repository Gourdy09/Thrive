"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublishMutation = void 0;
const tslib_1 = require("tslib");
const graphql_1 = require("graphql");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const client_1 = require("../client");
const Update_1 = require("../types/Update");
const turtleJobRunId = process.env.EAS_BUILD_ID;
exports.PublishMutation = {
    async getUploadURLsAsync(graphqlClient, contentTypes) {
        const data = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .mutation((0, graphql_tag_1.default) `
            mutation GetSignedUploadMutation($contentTypes: [String!]!) {
              asset {
                getSignedAssetUploadSpecifications(assetContentTypes: $contentTypes) {
                  specifications
                }
              }
            }
          `, {
            contentTypes,
        })
            .toPromise());
        return data.asset.getSignedAssetUploadSpecifications;
    },
    async publishUpdateGroupAsync(graphqlClient, publishUpdateGroupsInput) {
        const data = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .mutation((0, graphql_tag_1.default) `
            mutation UpdatePublishMutation($publishUpdateGroupsInput: [PublishUpdateGroupInput!]!) {
              updateBranch {
                publishUpdateGroups(publishUpdateGroupsInput: $publishUpdateGroupsInput) {
                  id
                  ...UpdateFragment
                }
              }
            }
            ${(0, graphql_1.print)(Update_1.UpdateFragmentNode)}
          `, {
            publishUpdateGroupsInput: publishUpdateGroupsInput.map(input => ({
                ...input,
                turtleJobRunId,
            })),
        })
            .toPromise());
        return data.updateBranch.publishUpdateGroups;
    },
    async setCodeSigningInfoAsync(graphqlClient, updateId, codeSigningInfo) {
        const data = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .mutation((0, graphql_tag_1.default) `
            mutation SetCodeSigningInfoMutation(
              $updateId: ID!
              $codeSigningInfo: CodeSigningInfoInput!
            ) {
              update {
                setCodeSigningInfo(updateId: $updateId, codeSigningInfo: $codeSigningInfo) {
                  id
                  group
                  awaitingCodeSigningInfo
                  codeSigningInfo {
                    keyid
                    alg
                    sig
                  }
                }
              }
            }
          `, { updateId, codeSigningInfo })
            .toPromise());
        return data.update.setCodeSigningInfo;
    },
    async setRolloutPercentageAsync(graphqlClient, updateId, rolloutPercentage) {
        const data = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .mutation((0, graphql_tag_1.default) `
            mutation SetRolloutPercentageMutation($updateId: ID!, $rolloutPercentage: Int!) {
              update {
                setRolloutPercentage(updateId: $updateId, percentage: $rolloutPercentage) {
                  id
                  ...UpdateFragment
                }
              }
            }
            ${(0, graphql_1.print)(Update_1.UpdateFragmentNode)}
          `, { updateId, rolloutPercentage }, { additionalTypenames: ['Update'] })
            .toPromise());
        return data.update.setRolloutPercentage;
    },
};
