import { ExpoGraphqlClient } from '../../commandUtils/context/contextUtils/createGraphqlClient';
import { EnvironmentVariableFragment, EnvironmentVariableVisibility } from '../generated';
type UpdateVariableArgs = {
    value?: string;
    name: string;
    overwrite: true;
    visibility?: EnvironmentVariableVisibility;
};
export type EnvironmentVariablePushInput = {
    name: string;
    value: string;
    environment: string;
    visibility: EnvironmentVariableVisibility;
    overwrite?: boolean;
};
export declare const EnvironmentVariableMutation: {
    linkSharedEnvironmentVariableAsync(graphqlClient: ExpoGraphqlClient, environmentVariableId: string, appId: string, environment: string): Promise<EnvironmentVariableFragment>;
    unlinkSharedEnvironmentVariableAsync(graphqlClient: ExpoGraphqlClient, environmentVariableId: string, appId: string, environment: string): Promise<EnvironmentVariableFragment>;
    createSharedVariableAsync(graphqlClient: ExpoGraphqlClient, input: {
        name: string;
        value: string;
        visibility: EnvironmentVariableVisibility;
        overwrite?: boolean;
    } | UpdateVariableArgs, accountId: string): Promise<EnvironmentVariableFragment>;
    createForAppAsync(graphqlClient: ExpoGraphqlClient, input: {
        name: string;
        value?: string;
        environment: string;
        visibility: EnvironmentVariableVisibility;
        overwrite?: boolean;
    } | (UpdateVariableArgs & {
        environment: string;
    }), appId: string): Promise<EnvironmentVariableFragment>;
    deleteAsync(graphqlClient: ExpoGraphqlClient, id: string): Promise<{
        id: string;
    }>;
    createBulkEnvironmentVariablesForAppAsync(graphqlClient: ExpoGraphqlClient, input: EnvironmentVariablePushInput[], appId: string): Promise<boolean>;
};
export {};
