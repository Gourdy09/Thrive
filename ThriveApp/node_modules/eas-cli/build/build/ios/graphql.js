"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformIosSecrets = exports.transformJob = void 0;
const tslib_1 = require("tslib");
const nullthrows_1 = tslib_1.__importDefault(require("nullthrows"));
const graphql_1 = require("../graphql");
function transformJob(job) {
    return {
        type: (0, graphql_1.transformWorkflow)(job.type),
        triggeredBy: (0, graphql_1.transformBuildTrigger)(job.triggeredBy),
        projectArchive: (0, graphql_1.transformProjectArchive)(job.projectArchive),
        projectRootDirectory: (0, nullthrows_1.default)(job.projectRootDirectory),
        updates: job.updates,
        secrets: job.secrets ? transformIosSecrets(job.secrets) : undefined,
        builderEnvironment: job.builderEnvironment,
        cache: job.cache,
        version: job.version?.buildNumber ? { buildNumber: job.version.buildNumber } : undefined,
        scheme: job.scheme,
        buildConfiguration: job.buildConfiguration,
        applicationArchivePath: job.applicationArchivePath,
        buildArtifactPaths: job.buildArtifactPaths,
        username: job.username,
        developmentClient: job.developmentClient,
        simulator: job.simulator,
        experimental: job.experimental,
        mode: (0, graphql_1.transformBuildMode)(job.mode),
        customBuildConfig: job.customBuildConfig,
        loggerLevel: job.loggerLevel
            ? graphql_1.loggerLevelToGraphQLWorkerLoggerLevel[job.loggerLevel]
            : undefined,
    };
}
exports.transformJob = transformJob;
function transformIosSecrets(secrets) {
    const buildCredentials = [];
    for (const targetName of Object.keys(secrets.buildCredentials ?? {})) {
        buildCredentials.push({
            targetName,
            provisioningProfileBase64: (0, nullthrows_1.default)(secrets.buildCredentials?.[targetName])
                .provisioningProfileBase64,
            distributionCertificate: (0, nullthrows_1.default)(secrets.buildCredentials?.[targetName])
                .distributionCertificate,
        });
    }
    return {
        buildCredentials,
    };
}
exports.transformIosSecrets = transformIosSecrets;
