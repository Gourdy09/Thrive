"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareIosBuildAsync = exports.createIosContextAsync = void 0;
const eas_build_job_1 = require("@expo/eas-build-job");
const eas_json_1 = require("@expo/eas-json");
const credentials_1 = require("./credentials");
const graphql_1 = require("./graphql");
const prepareJob_1 = require("./prepareJob");
const syncProjectConfiguration_1 = require("./syncProjectConfiguration");
const version_1 = require("./version");
const BuildMutation_1 = require("../../graphql/mutations/BuildMutation");
const bundleIdentifier_1 = require("../../project/ios/bundleIdentifier");
const scheme_1 = require("../../project/ios/scheme");
const target_1 = require("../../project/ios/target");
const build_1 = require("../build");
const graphql_2 = require("../graphql");
const validate_1 = require("../validate");
async function createIosContextAsync(ctx) {
    const { buildProfile, env } = ctx;
    if (ctx.workflow === eas_build_job_1.Workflow.MANAGED) {
        await (0, bundleIdentifier_1.ensureBundleIdentifierIsDefinedForManagedProjectAsync)(ctx);
    }
    (0, validate_1.checkNodeEnvVariable)(ctx);
    await (0, validate_1.checkGoogleServicesFileAsync)(ctx);
    await (0, validate_1.validatePNGsForManagedProjectAsync)(ctx);
    const xcodeBuildContext = await (0, scheme_1.resolveXcodeBuildContextAsync)({
        projectDir: ctx.projectDir,
        nonInteractive: ctx.nonInteractive,
        exp: ctx.exp,
        vcsClient: ctx.vcsClient,
    }, buildProfile);
    const targets = await (0, target_1.resolveTargetsAsync)({
        projectDir: ctx.projectDir,
        exp: ctx.exp,
        xcodeBuildContext,
        env,
        vcsClient: ctx.vcsClient,
    });
    const applicationTarget = (0, target_1.findApplicationTarget)(targets);
    const buildNumberOverride = ctx.easJsonCliConfig?.appVersionSource === eas_json_1.AppVersionSource.REMOTE
        ? await (0, version_1.resolveRemoteBuildNumberAsync)(ctx.graphqlClient, {
            projectDir: ctx.projectDir,
            projectId: ctx.projectId,
            exp: ctx.exp,
            applicationTarget,
            buildProfile,
            vcsClient: ctx.vcsClient,
        })
        : undefined;
    return {
        bundleIdentifier: applicationTarget.bundleIdentifier,
        applicationTarget,
        targets,
        xcodeBuildContext,
        buildNumberOverride,
    };
}
exports.createIosContextAsync = createIosContextAsync;
async function prepareIosBuildAsync(ctx) {
    return await (0, build_1.prepareBuildRequestForPlatformAsync)({
        ctx,
        ensureCredentialsAsync: async (ctx) => {
            return await (0, credentials_1.ensureIosCredentialsAsync)(ctx, ctx.ios.targets);
        },
        syncProjectConfigurationAsync: async () => {
            await (0, syncProjectConfiguration_1.syncProjectConfigurationAsync)({
                projectDir: ctx.projectDir,
                exp: ctx.exp,
                targets: ctx.ios.targets,
                localAutoIncrement: ctx.easJsonCliConfig?.appVersionSource === eas_json_1.AppVersionSource.REMOTE
                    ? false
                    : ctx.buildProfile.autoIncrement,
                vcsClient: ctx.vcsClient,
                env: ctx.env,
            });
        },
        prepareJobAsync: async (ctx, jobData) => {
            return await (0, prepareJob_1.prepareJobAsync)(ctx, {
                ...jobData,
                buildScheme: ctx.ios.xcodeBuildContext.buildScheme,
            });
        },
        sendBuildRequestAsync: async (appId, job, metadata, buildParams) => {
            const graphqlMetadata = (0, graphql_2.transformMetadata)(metadata);
            const graphqlJob = (0, graphql_1.transformJob)(job);
            return await BuildMutation_1.BuildMutation.createIosBuildAsync(ctx.graphqlClient, {
                appId,
                job: graphqlJob,
                metadata: graphqlMetadata,
                buildParams,
            });
        },
    });
}
exports.prepareIosBuildAsync = prepareIosBuildAsync;
