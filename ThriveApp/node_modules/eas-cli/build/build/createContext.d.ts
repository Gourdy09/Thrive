import { Platform } from '@expo/eas-build-job';
import { BuildProfile, EasJson, ResourceClass } from '@expo/eas-json';
import { LoggerLevel } from '@expo/logger';
import { BuildContext } from './context';
import { LocalBuildOptions } from './local';
import { Analytics } from '../analytics/AnalyticsManager';
import { DynamicConfigContextFn } from '../commandUtils/context/DynamicProjectConfigContextField';
import { ExpoGraphqlClient } from '../commandUtils/context/contextUtils/createGraphqlClient';
import { CustomBuildConfigMetadata } from '../project/customBuildConfig';
import { Actor } from '../user/User';
import { Client } from '../vcs/vcs';
export declare function createBuildContextAsync<T extends Platform>({ buildProfileName, buildProfile, easJsonCliConfig, clearCache, localBuildOptions, nonInteractive, noWait, platform, projectDir, resourceClassFlag, message, actor, graphqlClient, analytics, vcsClient, getDynamicPrivateProjectConfigAsync, customBuildConfigMetadata, buildLoggerLevel, freezeCredentials, repack, env, }: {
    buildProfileName: string;
    buildProfile: BuildProfile<T>;
    easJsonCliConfig: EasJson['cli'];
    clearCache: boolean;
    localBuildOptions: LocalBuildOptions;
    nonInteractive: boolean;
    noWait: boolean;
    platform: T;
    projectDir: string;
    resourceClassFlag?: ResourceClass;
    message?: string;
    actor: Actor;
    graphqlClient: ExpoGraphqlClient;
    analytics: Analytics;
    vcsClient: Client;
    getDynamicPrivateProjectConfigAsync: DynamicConfigContextFn;
    customBuildConfigMetadata?: CustomBuildConfigMetadata;
    buildLoggerLevel?: LoggerLevel;
    freezeCredentials: boolean;
    repack: boolean;
    env: Record<string, string>;
}): Promise<BuildContext<T>>;
