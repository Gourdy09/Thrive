"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loggerLevelToGraphQLWorkerLoggerLevel = exports.transformBuildTrigger = exports.transformBuildMode = exports.transformIosEnterpriseProvisioning = exports.transformWorkflow = exports.transformFingerprintSource = exports.transformMetadata = exports.transformProjectArchive = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const logger_1 = require("@expo/logger");
const assert_1 = tslib_1.__importDefault(require("assert"));
const generated_1 = require("../graphql/generated");
function transformProjectArchive(archiveSource) {
    if (archiveSource.type === eas_build_job_1.ArchiveSourceType.GCS) {
        return {
            type: generated_1.ProjectArchiveSourceType.Gcs,
            bucketKey: archiveSource.bucketKey,
            metadataLocation: archiveSource.metadataLocation,
        };
    }
    else if (archiveSource.type === eas_build_job_1.ArchiveSourceType.URL) {
        return {
            type: generated_1.ProjectArchiveSourceType.Url,
            url: archiveSource.url,
        };
    }
    else {
        throw new Error(`Unsupported project archive source type: '${archiveSource.type}'`);
    }
}
exports.transformProjectArchive = transformProjectArchive;
function transformMetadata(metadata) {
    return {
        ...metadata,
        fingerprintSource: metadata.fingerprintSource && transformFingerprintSource(metadata.fingerprintSource),
        credentialsSource: metadata.credentialsSource && transformCredentialsSource(metadata.credentialsSource),
        distribution: metadata.distribution && transformDistribution(metadata.distribution),
        workflow: metadata.workflow && transformWorkflow(metadata.workflow),
        iosEnterpriseProvisioning: metadata.iosEnterpriseProvisioning &&
            transformIosEnterpriseProvisioning(metadata.iosEnterpriseProvisioning),
    };
}
exports.transformMetadata = transformMetadata;
function transformFingerprintSource(fingerprintSource) {
    if (fingerprintSource.type !== eas_build_job_1.FingerprintSourceType.GCS) {
        return null;
    }
    return {
        type: generated_1.FingerprintSourceType.Gcs,
        bucketKey: fingerprintSource.bucketKey,
        isDebugFingerprint: fingerprintSource.isDebugFingerprint,
    };
}
exports.transformFingerprintSource = transformFingerprintSource;
function transformCredentialsSource(credentialsSource) {
    if (credentialsSource === 'local') {
        return generated_1.BuildCredentialsSource.Local;
    }
    else {
        return generated_1.BuildCredentialsSource.Remote;
    }
}
function transformDistribution(distribution) {
    if (distribution === 'internal') {
        return generated_1.DistributionType.Internal;
    }
    else if (distribution === 'simulator') {
        return generated_1.DistributionType.Simulator;
    }
    else {
        return generated_1.DistributionType.Store;
    }
}
function transformWorkflow(workflow) {
    if (workflow === eas_build_job_1.Workflow.GENERIC) {
        return generated_1.BuildWorkflow.Generic;
    }
    else {
        return generated_1.BuildWorkflow.Managed;
    }
}
exports.transformWorkflow = transformWorkflow;
function transformIosEnterpriseProvisioning(enterpriseProvisioning) {
    if (enterpriseProvisioning === 'adhoc') {
        return generated_1.BuildIosEnterpriseProvisioning.Adhoc;
    }
    else {
        return generated_1.BuildIosEnterpriseProvisioning.Universal;
    }
}
exports.transformIosEnterpriseProvisioning = transformIosEnterpriseProvisioning;
const buildModeToGraphQLBuildMode = {
    [eas_build_job_1.BuildMode.BUILD]: generated_1.BuildMode.Build,
    [eas_build_job_1.BuildMode.CUSTOM]: generated_1.BuildMode.Custom,
    [eas_build_job_1.BuildMode.RESIGN]: generated_1.BuildMode.Resign,
    [eas_build_job_1.BuildMode.REPACK]: generated_1.BuildMode.Repack,
};
function transformBuildMode(buildMode) {
    const graphQLBuildMode = buildModeToGraphQLBuildMode[buildMode];
    (0, assert_1.default)(graphQLBuildMode, `Unsupported build mode: ${buildMode}`);
    return graphQLBuildMode;
}
exports.transformBuildMode = transformBuildMode;
function transformBuildTrigger(buildTrigger) {
    if (buildTrigger === eas_build_job_1.BuildTrigger.EAS_CLI) {
        return generated_1.BuildTrigger.EasCli;
    }
    else if (buildTrigger === eas_build_job_1.BuildTrigger.GIT_BASED_INTEGRATION) {
        return generated_1.BuildTrigger.GitBasedIntegration;
    }
    throw new Error('Unknown build trigger');
}
exports.transformBuildTrigger = transformBuildTrigger;
exports.loggerLevelToGraphQLWorkerLoggerLevel = {
    [logger_1.LoggerLevel.TRACE]: generated_1.WorkerLoggerLevel.Trace,
    [logger_1.LoggerLevel.DEBUG]: generated_1.WorkerLoggerLevel.Debug,
    [logger_1.LoggerLevel.INFO]: generated_1.WorkerLoggerLevel.Info,
    [logger_1.LoggerLevel.WARN]: generated_1.WorkerLoggerLevel.Warn,
    [logger_1.LoggerLevel.ERROR]: generated_1.WorkerLoggerLevel.Error,
    [logger_1.LoggerLevel.FATAL]: generated_1.WorkerLoggerLevel.Fatal,
};
