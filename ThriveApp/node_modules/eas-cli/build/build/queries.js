"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLatestBuildAsync = exports.listAndSelectBuildOnAppAsync = exports.listAndRenderBuildsOnAppAsync = exports.BUILDS_LIMIT = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const formatBuild_1 = require("./utils/formatBuild");
const generated_1 = require("../graphql/generated");
const BuildQuery_1 = require("../graphql/queries/BuildQuery");
const log_1 = tslib_1.__importDefault(require("../log"));
const date_1 = require("../utils/date");
const json_1 = require("../utils/json");
const queries_1 = require("../utils/queries");
exports.BUILDS_LIMIT = 50;
async function listAndRenderBuildsOnAppAsync(graphqlClient, { projectId, projectDisplayName, filter, paginatedQueryOptions, }) {
    if (paginatedQueryOptions.nonInteractive) {
        const builds = await BuildQuery_1.BuildQuery.viewBuildsOnAppAsync(graphqlClient, {
            appId: projectId,
            limit: paginatedQueryOptions.limit ?? exports.BUILDS_LIMIT,
            offset: paginatedQueryOptions.offset,
            filter,
        });
        renderPageOfBuilds({ builds, projectDisplayName, paginatedQueryOptions });
    }
    else {
        await (0, queries_1.paginatedQueryWithConfirmPromptAsync)({
            limit: paginatedQueryOptions.limit ?? exports.BUILDS_LIMIT,
            offset: paginatedQueryOptions.offset,
            queryToPerform: (limit, offset) => BuildQuery_1.BuildQuery.viewBuildsOnAppAsync(graphqlClient, {
                appId: projectId,
                limit,
                offset,
                filter,
            }),
            promptOptions: {
                title: 'Load more builds?',
                renderListItems: builds => {
                    renderPageOfBuilds({ builds, projectDisplayName, paginatedQueryOptions });
                },
            },
        });
    }
}
exports.listAndRenderBuildsOnAppAsync = listAndRenderBuildsOnAppAsync;
async function listAndSelectBuildOnAppAsync(graphqlClient, { projectId, title, filter, paginatedQueryOptions, selectPromptDisabledFunction, selectPromptWarningMessage, }) {
    if (paginatedQueryOptions.nonInteractive) {
        throw new Error('Unable to select a build in non-interactive mode.');
    }
    else {
        const selectedBuild = await (0, queries_1.paginatedQueryWithSelectPromptAsync)({
            limit: paginatedQueryOptions.limit ?? exports.BUILDS_LIMIT,
            offset: paginatedQueryOptions.offset,
            queryToPerform: (limit, offset) => BuildQuery_1.BuildQuery.viewBuildsOnAppAsync(graphqlClient, {
                appId: projectId,
                limit,
                offset,
                filter,
            }),
            promptOptions: {
                title,
                getIdentifierForQueryItem: build => build.id,
                makePartialChoiceObject: createBuildToPartialChoiceMaker(selectPromptDisabledFunction),
                selectPromptWarningMessage,
            },
        });
        return selectedBuild ?? null;
    }
}
exports.listAndSelectBuildOnAppAsync = listAndSelectBuildOnAppAsync;
function createBuildToPartialChoiceMaker(selectPromptDisabledFunction) {
    return (build) => {
        const splitCommitMessage = build.gitCommitMessage?.split('\n');
        const formattedCommitData = build.gitCommitHash && splitCommitMessage && splitCommitMessage.length > 0
            ? `${build.gitCommitHash.slice(0, 7)} "${chalk_1.default.bold(splitCommitMessage[0] + (splitCommitMessage.length > 1 ? '…' : ''))}"`
            : null;
        const descriptionItems = [
            { name: 'Version', value: build.appVersion ? chalk_1.default.bold(build.appVersion) : null },
            { name: 'Commit', value: formattedCommitData },
            {
                name: 'Message',
                value: build.message
                    ? chalk_1.default.bold(build.message.length > 200 ? `${build.message.slice(0, 200)}...` : build.message)
                    : null,
            },
            {
                name: build.platform === generated_1.AppPlatform.Ios ? 'Build number' : 'Version code',
                value: build.appBuildVersion ? chalk_1.default.bold(build.appBuildVersion) : null,
            },
            { name: 'Profile', value: build.buildProfile ? chalk_1.default.bold(build.buildProfile) : null },
        ];
        const filteredDescriptionArray = descriptionItems
            .filter(item => item.value)
            .map(item => `${chalk_1.default.bold(item.name)}: ${item.value}`);
        return {
            title: `${chalk_1.default.bold(`ID:`)} ${build.id} (${chalk_1.default.bold(`${(0, date_1.fromNow)(new Date(build.completedAt))} ago`)})`,
            description: filteredDescriptionArray.length > 0 ? filteredDescriptionArray.join('\n') : '',
            disabled: selectPromptDisabledFunction?.(build),
        };
    };
}
async function getLatestBuildAsync(graphqlClient, { projectId, filter, }) {
    const builds = await BuildQuery_1.BuildQuery.viewBuildsOnAppAsync(graphqlClient, {
        appId: projectId,
        limit: 1,
        offset: 0,
        filter,
    });
    if (builds.length === 0) {
        return null;
    }
    return builds[0];
}
exports.getLatestBuildAsync = getLatestBuildAsync;
function renderPageOfBuilds({ builds, projectDisplayName, paginatedQueryOptions, }) {
    if (paginatedQueryOptions.json) {
        (0, json_1.printJsonOnlyOutput)(builds);
    }
    else {
        const list = builds.map(build => (0, formatBuild_1.formatGraphQLBuild)(build)).join(`\n\n${chalk_1.default.dim('———')}\n\n`);
        log_1.default.addNewLineIfNone();
        log_1.default.log(chalk_1.default.bold(`Builds for ${projectDisplayName}:`));
        log_1.default.log(`\n${list}`);
    }
}
