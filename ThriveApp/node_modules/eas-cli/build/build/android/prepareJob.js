"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareJobAsync = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const path_1 = tslib_1.__importDefault(require("path"));
const slash_1 = tslib_1.__importDefault(require("slash"));
const customBuildConfig_1 = require("../../project/customBuildConfig");
const projectUtils_1 = require("../../project/projectUtils");
const cacheDefaults = {
    disabled: false,
    paths: [],
};
async function prepareJobAsync(ctx, jobData) {
    const username = (0, projectUtils_1.getUsername)(ctx.exp, ctx.user);
    const buildProfile = ctx.buildProfile;
    const projectRootDirectory = (0, slash_1.default)(path_1.default.relative(await ctx.vcsClient.getRootPathAsync(), ctx.projectDir)) || '.';
    const { credentials } = jobData;
    const buildCredentials = credentials
        ? {
            buildCredentials: {
                keystore: {
                    dataBase64: credentials.keystore.keystore,
                    keystorePassword: credentials.keystore.keystorePassword,
                    keyAlias: credentials.keystore.keyAlias,
                    keyPassword: credentials.keystore.keyPassword,
                },
            },
        }
        : {};
    let buildType = buildProfile.buildType;
    if (!buildType && !buildProfile.gradleCommand && buildProfile.distribution === 'internal') {
        buildType = eas_build_job_1.Android.BuildType.APK;
    }
    const maybeCustomBuildConfigPath = buildProfile.config
        ? (0, customBuildConfig_1.getCustomBuildConfigPathForJob)(buildProfile.config)
        : undefined;
    let buildMode;
    if (ctx.repack) {
        buildMode = eas_build_job_1.BuildMode.REPACK;
    }
    else if (buildProfile.config) {
        buildMode = eas_build_job_1.BuildMode.CUSTOM;
    }
    else {
        buildMode = eas_build_job_1.BuildMode.BUILD;
    }
    const job = {
        type: ctx.workflow,
        platform: eas_build_job_1.Platform.ANDROID,
        projectRootDirectory,
        projectArchive: jobData.projectArchive,
        builderEnvironment: {
            image: buildProfile.image,
            node: buildProfile.node,
            pnpm: buildProfile.pnpm,
            bun: buildProfile.bun,
            yarn: buildProfile.yarn,
            ndk: buildProfile.ndk,
            env: buildProfile.env,
        },
        cache: {
            ...cacheDefaults,
            ...buildProfile.cache,
            clear: ctx.clearCache,
        },
        secrets: {
            ...buildCredentials,
        },
        updates: { channel: buildProfile.channel },
        developmentClient: buildProfile.developmentClient,
        gradleCommand: buildProfile.gradleCommand,
        applicationArchivePath: buildProfile.applicationArchivePath ?? buildProfile.artifactPath,
        buildArtifactPaths: buildProfile.buildArtifactPaths,
        buildType,
        username,
        ...(ctx.android.versionCodeOverride && {
            version: {
                versionCode: ctx.android.versionCodeOverride,
            },
        }),
        experimental: {
            prebuildCommand: buildProfile.prebuildCommand,
        },
        mode: buildMode,
        triggeredBy: eas_build_job_1.BuildTrigger.EAS_CLI,
        ...(maybeCustomBuildConfigPath && {
            customBuildConfig: {
                path: maybeCustomBuildConfigPath,
            },
        }),
        ...(ctx.repack && {
            customBuildConfig: {
                path: '__eas/repack.yml',
            },
        }),
        loggerLevel: ctx.loggerLevel,
    };
    return (0, eas_build_job_1.sanitizeBuildJob)(job);
}
exports.prepareJobAsync = prepareJobAsync;
