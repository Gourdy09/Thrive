"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBuildContextAsync = void 0;
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const json_file_1 = tslib_1.__importDefault(require("@expo/json-file"));
const package_manager_1 = require("@expo/package-manager");
const getenv_1 = tslib_1.__importDefault(require("getenv"));
const resolve_from_1 = tslib_1.__importDefault(require("resolve-from"));
const uuid_1 = require("uuid");
const build_1 = require("./android/build");
const build_2 = require("./ios/build");
const local_1 = require("./local");
const resourceClass_1 = require("./utils/resourceClass");
const AnalyticsManager_1 = require("../analytics/AnalyticsManager");
const context_1 = require("../credentials/context");
const projectUtils_1 = require("../project/projectUtils");
const workflow_1 = require("../project/workflow");
async function createBuildContextAsync({ buildProfileName, buildProfile, easJsonCliConfig, clearCache = false, localBuildOptions, nonInteractive, noWait, platform, projectDir, resourceClassFlag, message, actor, graphqlClient, analytics, vcsClient, getDynamicPrivateProjectConfigAsync, customBuildConfigMetadata, buildLoggerLevel, freezeCredentials, repack, env, }) {
    const { exp, projectId } = await getDynamicPrivateProjectConfigAsync({
        env,
    });
    const projectName = exp.slug;
    const account = await (0, projectUtils_1.getOwnerAccountForProjectIdAsync)(graphqlClient, projectId);
    const workflow = await (0, workflow_1.resolveWorkflowAsync)(projectDir, platform, vcsClient);
    const accountId = account.id;
    const runFromCI = getenv_1.default.boolish('CI', false);
    const developmentClient = buildProfile.developmentClient ??
        (platform === eas_build_job_1.Platform.ANDROID
            ? buildProfile?.gradleCommand === ':app:assembleDebug'
            : buildProfile?.buildConfiguration === 'Debug') ??
        false;
    const requiredPackageManager = (0, package_manager_1.resolvePackageManager)(projectDir);
    const credentialsCtx = new context_1.CredentialsContext({
        projectInfo: { exp, projectId },
        nonInteractive,
        projectDir,
        user: actor,
        graphqlClient,
        analytics,
        env,
        easJsonCliConfig,
        vcsClient,
        freezeCredentials,
    });
    const devClientProperties = getDevClientEventProperties({
        platform,
        projectDir,
        buildProfile,
    });
    const analyticsEventProperties = {
        tracking_id: (0, uuid_1.v4)(),
        platform,
        ...(exp.sdkVersion && { sdk_version: exp.sdkVersion }),
        ...(accountId && { account_id: accountId }),
        project_id: projectId,
        project_type: workflow,
        ...devClientProperties,
        no_wait: noWait,
        run_from_ci: runFromCI,
        local: localBuildOptions.localBuildMode === local_1.LocalBuildMode.LOCAL_BUILD_PLUGIN,
    };
    analytics.logEvent(AnalyticsManager_1.BuildEvent.BUILD_COMMAND, analyticsEventProperties);
    const resourceClass = await (0, resourceClass_1.resolveBuildResourceClassAsync)(buildProfile, platform, resourceClassFlag);
    const commonContext = {
        accountName: account.name,
        buildProfile,
        buildProfileName,
        resourceClass,
        easJsonCliConfig,
        clearCache,
        credentialsCtx,
        exp,
        localBuildOptions,
        nonInteractive,
        noWait,
        platform,
        projectDir,
        projectId,
        projectName,
        analyticsEventProperties,
        user: actor,
        graphqlClient,
        analytics,
        vcsClient,
        workflow,
        message,
        runFromCI,
        customBuildConfigMetadata,
        developmentClient,
        requiredPackageManager,
        loggerLevel: buildLoggerLevel,
        repack,
        env,
    };
    if (platform === eas_build_job_1.Platform.ANDROID) {
        const common = commonContext;
        return {
            ...common,
            android: await (0, build_1.createAndroidContextAsync)(common),
        };
    }
    else {
        const common = commonContext;
        return {
            ...common,
            ios: await (0, build_2.createIosContextAsync)(common),
        };
    }
}
exports.createBuildContextAsync = createBuildContextAsync;
function getDevClientEventProperties({ platform, projectDir, buildProfile, }) {
    let includesDevClient;
    const version = tryGetDevClientVersion(projectDir);
    if (platform === eas_build_job_1.Platform.ANDROID && 'gradleCommand' in buildProfile) {
        includesDevClient = Boolean(version && buildProfile.gradleCommand?.includes('Debug'));
    }
    else if (platform === eas_build_job_1.Platform.IOS && 'buildConfiguration' in buildProfile) {
        includesDevClient = Boolean(version && buildProfile.buildConfiguration === 'Debug');
    }
    else if (buildProfile.developmentClient) {
        includesDevClient = true;
    }
    else {
        includesDevClient = false;
    }
    if (version) {
        return { dev_client: includesDevClient, dev_client_version: version };
    }
    else {
        return { dev_client: includesDevClient };
    }
}
function tryGetDevClientVersion(projectDir) {
    try {
        const pkg = json_file_1.default.read((0, resolve_from_1.default)(projectDir, 'expo-dev-client/package.json'));
        return pkg.version?.toString() ?? null;
    }
    catch {
        return null;
    }
}
