"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUpdateGroupUrl = exports.getInternalDistributionInstallUrl = exports.getArtifactUrl = exports.getBuildLogsUrl = exports.getProjectDashboardUrl = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const api_1 = require("../../api");
const generated_1 = require("../../graphql/generated");
function getProjectDashboardUrl(accountName, projectName) {
    return new URL(`/accounts/${accountName}/projects/${projectName}`, (0, api_1.getExpoWebsiteBaseUrl)()).toString();
}
exports.getProjectDashboardUrl = getProjectDashboardUrl;
function getBuildLogsUrl(build, hash) {
    const { project } = build;
    const url = project.__typename !== 'App'
        ? `/builds/${build.id}`
        : `/accounts/${project.ownerAccount.name}/projects/${project.slug}/builds/${build.id}${hash ? `#${hash}` : ''}`;
    return new URL(url, (0, api_1.getExpoWebsiteBaseUrl)()).toString();
}
exports.getBuildLogsUrl = getBuildLogsUrl;
function getArtifactUrl(artifactId) {
    return new URL(`/artifacts/${artifactId}`, (0, api_1.getExpoWebsiteBaseUrl)()).toString();
}
exports.getArtifactUrl = getArtifactUrl;
function getInternalDistributionInstallUrl(build) {
    if (build.platform === generated_1.AppPlatform.Ios) {
        return `itms-services://?action=download-manifest;url=${(0, api_1.getExpoApiBaseUrl)()}/v2/projects/${build.project.id}/builds/${build.id}/manifest.plist`;
    }
    (0, assert_1.default)(build.artifacts?.buildUrl, 'buildUrl is missing');
    return build.artifacts.buildUrl;
}
exports.getInternalDistributionInstallUrl = getInternalDistributionInstallUrl;
function getUpdateGroupUrl(accountName, projectName, updateGroupId) {
    return new URL(`/accounts/${encodeURIComponent(accountName)}/projects/${encodeURIComponent(projectName)}/updates/${encodeURIComponent(updateGroupId)}`, (0, api_1.getExpoWebsiteBaseUrl)()).toString();
}
exports.getUpdateGroupUrl = getUpdateGroupUrl;
