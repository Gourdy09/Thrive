"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptVariableNameAsync = exports.promptVariableValueAsync = exports.promptVariableEnvironmentAsync = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const generated_1 = require("../graphql/generated");
const prompts_1 = require("../prompts");
async function promptVariableEnvironmentAsync(nonInteractive) {
    if (nonInteractive) {
        throw new Error('The `--environment` flag must be set when running in `--non-interactive` mode.');
    }
    return await (0, prompts_1.selectAsync)('Select environment:', [
        { title: 'development', value: generated_1.EnvironmentVariableEnvironment.Development },
        { title: 'preview', value: generated_1.EnvironmentVariableEnvironment.Preview },
        { title: 'production', value: generated_1.EnvironmentVariableEnvironment.Production },
    ]);
}
exports.promptVariableEnvironmentAsync = promptVariableEnvironmentAsync;
async function promptVariableValueAsync({ nonInteractive, required = true, hidden = false, initial, }) {
    if (nonInteractive && required) {
        throw new Error(`Environment variable needs 'value' to be specified when running in non-interactive mode. Run the command with ${chalk_1.default.bold('--value VARIABLE_VALUE')} flag to fix the issue`);
    }
    const { variableValue } = await (0, prompts_1.promptAsync)({
        type: hidden ? 'password' : 'text',
        name: 'variableValue',
        message: 'Variable value:',
        initial: initial ?? '',
        validate: variableValue => {
            if (!required) {
                return true;
            }
            if (!variableValue || variableValue.trim() === '') {
                return "Environment variable value can't be empty";
            }
            return true;
        },
    });
    if (!variableValue && required) {
        throw new Error(`Environment variable needs 'value' to be specifed. Run the command again  with ${chalk_1.default.bold('--value VARIABLE_VALUE')} flag or provide it interactively to fix the issue.`);
    }
    return variableValue;
}
exports.promptVariableValueAsync = promptVariableValueAsync;
async function promptVariableNameAsync(nonInteractive) {
    const validationMessage = 'Variable name may not be empty.';
    if (nonInteractive) {
        throw new Error(validationMessage);
    }
    const { name } = await (0, prompts_1.promptAsync)({
        type: 'text',
        name: 'name',
        message: `Variable name:`,
        validate: value => {
            if (!value) {
                return validationMessage;
            }
            if (!value.match(/^\w+$/)) {
                return 'Names may contain only letters, numbers, and underscores.';
            }
            return true;
        },
    });
    if (!name) {
        throw new Error(validationMessage);
    }
    return name;
}
exports.promptVariableNameAsync = promptVariableNameAsync;
