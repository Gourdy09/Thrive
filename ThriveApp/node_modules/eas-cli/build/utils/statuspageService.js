"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.maybeWarnAboutEasOutagesAsync = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const generated_1 = require("../graphql/generated");
const StatuspageServiceQuery_1 = require("../graphql/queries/StatuspageServiceQuery");
const log_1 = tslib_1.__importStar(require("../log"));
async function maybeWarnAboutEasOutagesAsync(graphqlClient, serviceNames) {
    const services = await getStatuspageServiceAsync(graphqlClient, serviceNames);
    for (const service of services) {
        warnAboutServiceOutage(service);
    }
}
exports.maybeWarnAboutEasOutagesAsync = maybeWarnAboutEasOutagesAsync;
const humanReadableServiceName = {
    [generated_1.StatuspageServiceName.EasBuild]: 'EAS Build',
    [generated_1.StatuspageServiceName.EasSubmit]: 'EAS Submit',
    [generated_1.StatuspageServiceName.EasUpdate]: 'EAS Update',
    [generated_1.StatuspageServiceName.GithubApiRequests]: 'GitHub API Requests',
    [generated_1.StatuspageServiceName.GithubWebhooks]: 'Github Webhooks',
};
function warnAboutServiceOutage(service) {
    if (service.status === generated_1.StatuspageServiceStatus.Operational) {
        return;
    }
    const outageType = service.status === generated_1.StatuspageServiceStatus.MajorOutage ? 'major' : 'partial';
    log_1.default.addNewLineIfNone();
    log_1.default.warn(chalk_1.default.bold(`${humanReadableServiceName[service.name]} is experiencing a ${outageType} outage.`));
    if (service.incidents.length > 0) {
        const [currentIncident] = service.incidents;
        log_1.default.warn(`Reason: ${currentIncident.name}`);
    }
    log_1.default.warn(`All information on service status and incidents available at ${(0, log_1.link)('https://status.expo.dev/')}.`);
    log_1.default.newLine();
}
async function getStatuspageServiceAsync(graphqlClient, serviceNames) {
    try {
        return await StatuspageServiceQuery_1.StatuspageServiceQuery.statuspageServicesAsync(graphqlClient, serviceNames);
    }
    catch {
        return [];
    }
}
