"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eas_json_1 = require("@expo/eas-json");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const evaluateConfigWithEnvVarsAsync_1 = require("../../../build/evaluateConfigWithEnvVarsAsync");
const EasCommand_1 = tslib_1.__importDefault(require("../../../commandUtils/EasCommand"));
const flags_1 = require("../../../commandUtils/flags");
const AppVersionQuery_1 = require("../../../graphql/queries/AppVersionQuery");
const AppPlatform_1 = require("../../../graphql/types/AppPlatform");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const platform_1 = require("../../../platform");
const applicationIdentifier_1 = require("../../../project/applicationIdentifier");
const remoteVersionSource_1 = require("../../../project/remoteVersionSource");
const json_1 = require("../../../utils/json");
const profiles_1 = require("../../../utils/profiles");
class BuildVersionGetView extends EasCommand_1.default {
    async runAsync() {
        const { flags } = await this.parse(_a);
        if (flags.json) {
            (0, json_1.enableJsonOutput)();
        }
        const { loggedIn: { graphqlClient }, getDynamicPrivateProjectConfigAsync, projectDir, vcsClient, } = await this.getContextAsync(_a, {
            nonInteractive: true,
        });
        if (!flags.platform && flags['non-interactive']) {
            throw new Error('"--platform" flag is required in non-interactive mode.');
        }
        const requestedPlatform = await (0, platform_1.selectRequestedPlatformAsync)(flags.platform);
        const easJsonAccessor = eas_json_1.EasJsonAccessor.fromProjectPath(projectDir);
        await (0, remoteVersionSource_1.ensureVersionSourceIsRemoteAsync)(easJsonAccessor, {
            nonInteractive: flags['non-interactive'],
        });
        const platforms = (0, platform_1.toPlatforms)(requestedPlatform);
        const buildProfiles = await (0, profiles_1.getProfilesAsync)({
            type: 'build',
            easJsonAccessor,
            platforms,
            profileName: flags.profile ?? undefined,
            projectDir,
        });
        const results = {};
        for (const { profile, platform } of buildProfiles) {
            const { exp, projectId, env } = await (0, evaluateConfigWithEnvVarsAsync_1.evaluateConfigWithEnvVarsAsync)({
                buildProfile: profile,
                buildProfileName: flags.profile ?? 'production',
                graphqlClient,
                getProjectConfig: getDynamicPrivateProjectConfigAsync,
                opts: { env: profile.env },
            });
            (0, remoteVersionSource_1.validateAppConfigForRemoteVersionSource)(exp, platform);
            const applicationIdentifier = await (0, applicationIdentifier_1.getApplicationIdentifierAsync)({
                graphqlClient,
                projectDir,
                projectId,
                exp,
                buildProfile: profile,
                platform,
                vcsClient,
                nonInteractive: flags['non-interactive'],
                env,
            });
            const remoteVersions = await AppVersionQuery_1.AppVersionQuery.latestVersionAsync(graphqlClient, projectId, (0, AppPlatform_1.toAppPlatform)(platform), applicationIdentifier);
            if (remoteVersions?.buildVersion) {
                results[platform] = remoteVersions?.buildVersion;
            }
        }
        if (flags.json) {
            const jsonResults = {};
            if (results.android) {
                jsonResults.versionCode = results.android;
            }
            if (results.ios) {
                jsonResults.buildNumber = results.ios;
            }
            (0, json_1.printJsonOnlyOutput)(jsonResults);
        }
        else {
            if (Object.keys(results).length === 0) {
                log_1.default.log('No remote versions are configured for this project.');
                return;
            }
            if (results.android) {
                log_1.default.log(`Android versionCode - ${chalk_1.default.bold(results.android)}`);
            }
            if (results.ios) {
                log_1.default.log(`iOS buildNumber - ${chalk_1.default.bold(results.ios)}`);
            }
        }
    }
}
_a = BuildVersionGetView;
BuildVersionGetView.description = 'get the latest version from EAS servers';
BuildVersionGetView.flags = {
    platform: core_1.Flags.enum({
        char: 'p',
        options: ['android', 'ios', 'all'],
    }),
    profile: core_1.Flags.string({
        char: 'e',
        description: 'Name of the build profile from eas.json. Defaults to "production" if defined in eas.json.',
        helpValue: 'PROFILE_NAME',
    }),
    ...flags_1.EasNonInteractiveAndJsonFlags,
};
BuildVersionGetView.contextDefinition = {
    ..._a.ContextOptions.LoggedIn,
    ..._a.ContextOptions.DynamicProjectConfig,
    ..._a.ContextOptions.ProjectDir,
    ..._a.ContextOptions.Vcs,
};
exports.default = BuildVersionGetView;
