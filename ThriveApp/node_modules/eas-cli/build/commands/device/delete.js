"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const apple_utils_1 = require("@expo/apple-utils");
const core_1 = require("@oclif/core");
const assert_1 = tslib_1.__importDefault(require("assert"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const pagination_1 = require("../../commandUtils/pagination");
const AppleDeviceMutation_1 = require("../../credentials/ios/api/graphql/mutations/AppleDeviceMutation");
const AppleDeviceQuery_1 = require("../../credentials/ios/api/graphql/queries/AppleDeviceQuery");
const authenticate_1 = require("../../credentials/ios/appstore/authenticate");
const queries_1 = require("../../devices/queries");
const formatDevice_1 = tslib_1.__importDefault(require("../../devices/utils/formatDevice"));
const log_1 = tslib_1.__importDefault(require("../../log"));
const ora_1 = require("../../ora");
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const json_1 = require("../../utils/json");
class DeviceDelete extends EasCommand_1.default {
    async runAsync() {
        const { flags } = await this.parse(_a);
        const paginatedQueryOptions = (0, pagination_1.getPaginatedQueryOptions)(flags);
        let { 'apple-team-id': appleTeamIdentifier, udid } = flags;
        const { privateProjectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(_a, {
            nonInteractive: paginatedQueryOptions.nonInteractive,
        });
        const account = await (0, projectUtils_1.getOwnerAccountForProjectIdAsync)(graphqlClient, projectId);
        let appleTeamName;
        if (paginatedQueryOptions.json) {
            (0, json_1.enableJsonOutput)();
        }
        if (!appleTeamIdentifier) {
            const appleTeam = await (0, queries_1.selectAppleTeamOnAccountAsync)(graphqlClient, {
                accountName: account.name,
                selectionPromptTitle: `What Apple team would you like to list devices for?`,
                paginatedQueryOptions,
            });
            appleTeamIdentifier = appleTeam.appleTeamIdentifier;
            appleTeamName = appleTeam.appleTeamName;
        }
        (0, assert_1.default)(appleTeamIdentifier, 'No team identifier is specified');
        const chosenDevice = udid
            ? await AppleDeviceQuery_1.AppleDeviceQuery.getByDeviceIdentifierAsync(graphqlClient, account.name, udid)
            : await (0, queries_1.selectAppleDeviceOnAppleTeamAsync)(graphqlClient, {
                accountName: account.name,
                appleTeamIdentifier,
                selectionPromptTitle: `Which device would you like to disable?`,
                paginatedQueryOptions,
            });
        this.logChosenDevice(chosenDevice, appleTeamName, appleTeamIdentifier, paginatedQueryOptions);
        if (!(await this.shouldRemoveDeviceFromExpoAsync(paginatedQueryOptions))) {
            return;
        }
        await this.removeDeviceFromExpoAsync(graphqlClient, chosenDevice);
        if (await this.shouldDisableDeviceOnAppleAsync(paginatedQueryOptions)) {
            await this.disableDeviceOnAppleAsync(chosenDevice, appleTeamIdentifier);
        }
    }
    async shouldDisableDeviceOnAppleAsync({ nonInteractive, }) {
        if (!nonInteractive) {
            log_1.default.newLine();
            return await (0, prompts_1.toggleConfirmAsync)({
                message: 'Do you want to disable this device on your Apple account as well?',
            });
        }
        return true;
    }
    async disableDeviceOnAppleAsync(device, appleTeamIdentifier) {
        const ctx = await (0, authenticate_1.authenticateAsync)({ teamId: appleTeamIdentifier });
        const context = (0, authenticate_1.getRequestContext)(ctx);
        log_1.default.addNewLineIfNone();
        const removeAppleSpinner = (0, ora_1.ora)('Disabling device on Apple').start();
        try {
            const appleValidatedDevices = await apple_utils_1.Device.getAsync(context);
            const appleValidatedDevice = appleValidatedDevices.find(d => d.attributes.udid === device.identifier);
            if (appleValidatedDevice) {
                await appleValidatedDevice.updateAsync({ status: apple_utils_1.DeviceStatus.DISABLED });
                removeAppleSpinner.succeed('Disabled device on Apple');
            }
            else {
                removeAppleSpinner.warn('Device not found on Apple Developer Portal. Expo-registered devices will not appear there until they are chosen for an internal distribution build.');
            }
        }
        catch (err) {
            removeAppleSpinner.fail();
            throw err;
        }
    }
    async shouldRemoveDeviceFromExpoAsync({ nonInteractive, }) {
        if (!nonInteractive) {
            log_1.default.warn(`You are about to remove the Apple device listed above from your Expo account.`);
            log_1.default.newLine();
            return await (0, prompts_1.toggleConfirmAsync)({
                message: 'Are you sure you wish to proceed?',
            });
        }
        return true;
    }
    async removeDeviceFromExpoAsync(graphqlClient, chosenDevice) {
        const removalSpinner = (0, ora_1.ora)(`Removing Apple device on Expo`).start();
        try {
            await AppleDeviceMutation_1.AppleDeviceMutation.deleteAppleDeviceAsync(graphqlClient, chosenDevice.id);
            removalSpinner.succeed('Removed Apple device from Expo');
        }
        catch (err) {
            removalSpinner.fail();
            throw err;
        }
    }
    logChosenDevice(device, appleTeamName, appleTeamIdentifier, { json }) {
        if (json) {
            (0, json_1.printJsonOnlyOutput)(device);
        }
        else {
            log_1.default.addNewLineIfNone();
            log_1.default.log((0, formatDevice_1.default)(device, {
                appleTeamName,
                appleTeamIdentifier,
            }));
            log_1.default.newLine();
        }
    }
}
_a = DeviceDelete;
DeviceDelete.description = 'remove a registered device from your account';
DeviceDelete.flags = {
    'apple-team-id': core_1.Flags.string({ description: 'The Apple team ID on which to find the device' }),
    udid: core_1.Flags.string({ description: 'The Apple device ID to disable' }),
    ...flags_1.EasNonInteractiveAndJsonFlags,
};
DeviceDelete.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.LoggedIn,
};
exports.default = DeviceDelete;
