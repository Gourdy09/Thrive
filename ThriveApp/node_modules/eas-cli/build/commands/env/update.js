"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const generated_1 = require("../../graphql/generated");
const EnvironmentVariableMutation_1 = require("../../graphql/mutations/EnvironmentVariableMutation");
const EnvironmentVariablesQuery_1 = require("../../graphql/queries/EnvironmentVariablesQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const prompts_2 = require("../../utils/prompts");
class EnvironmentVariableUpdate extends EasCommand_1.default {
    async runAsync() {
        const { flags } = await this.parse(_a);
        let { name, value, scope, 'non-interactive': nonInteractive, environment, visibility, } = this.validateFlags(flags);
        const { privateProjectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(_a, {
            nonInteractive,
        });
        const [projectDisplayName, ownerAccount] = await Promise.all([
            (0, projectUtils_1.getDisplayNameForProjectIdAsync)(graphqlClient, projectId),
            (0, projectUtils_1.getOwnerAccountForProjectIdAsync)(graphqlClient, projectId),
        ]);
        if (scope === generated_1.EnvironmentVariableScope.Project) {
            if (!environment) {
                environment = await (0, prompts_2.promptVariableEnvironmentAsync)(nonInteractive);
            }
            const existingVariables = await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.byAppIdAsync(graphqlClient, {
                appId: projectId,
                environment,
            });
            if (!name) {
                name = await (0, prompts_1.selectAsync)('Select variable', existingVariables.map(variable => ({
                    title: variable.name,
                    value: variable.name,
                })));
            }
            const existingVariable = existingVariables.find(variable => variable.name === name);
            if (!existingVariable) {
                throw new Error(`Variable with name ${name} does not exist on project ${projectDisplayName}`);
            }
            if (!value) {
                value = await (0, prompts_2.promptVariableValueAsync)({
                    nonInteractive,
                    required: false,
                    initial: existingVariable.value,
                });
                if (!value || value.length === 0) {
                    value = '';
                }
            }
            const variable = await EnvironmentVariableMutation_1.EnvironmentVariableMutation.createForAppAsync(graphqlClient, {
                name,
                value,
                environment,
                visibility,
                overwrite: true,
            }, projectId);
            if (!variable) {
                throw new Error(`Could not update variable with name ${name} on project ${projectDisplayName}`);
            }
            log_1.default.withTick(`Updated variable ${chalk_1.default.bold(name)} on project ${chalk_1.default.bold(projectDisplayName)}.`);
        }
        else if (scope === generated_1.EnvironmentVariableScope.Shared) {
            const sharedVariables = await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.sharedAsync(graphqlClient, {
                appId: projectId,
            });
            if (!name) {
                name = await (0, prompts_1.selectAsync)('Select variable', sharedVariables.map(variable => ({
                    title: variable.name,
                    value: variable.name,
                })));
            }
            const existingVariable = sharedVariables.find(variable => variable.name === name);
            if (!existingVariable) {
                throw new Error("Variable with this name  doesn't exist on this account. Use a different name.");
            }
            if (!value) {
                value = await (0, prompts_2.promptVariableValueAsync)({
                    nonInteractive,
                    required: false,
                    initial: existingVariable.value,
                });
                if (!value || value.length === 0) {
                    value = '';
                }
            }
            const variable = await EnvironmentVariableMutation_1.EnvironmentVariableMutation.createSharedVariableAsync(graphqlClient, {
                name,
                value,
                visibility,
                overwrite: true,
            }, ownerAccount.id);
            if (!variable) {
                throw new Error(`Could not update variable with name ${name} on account ${ownerAccount.name}`);
            }
            log_1.default.withTick(`Updated shared variable ${chalk_1.default.bold(name)} on account ${chalk_1.default.bold(ownerAccount.name)}.`);
        }
    }
    validateFlags(flags) {
        if (flags['non-interactive']) {
            if (!flags.name) {
                throw new Error('Variable name is required in non-interactive mode. Run the command with --name flag.');
            }
            if (flags.scope === generated_1.EnvironmentVariableScope.Project && !flags.environment) {
                throw new Error('Environment is required when updating project-wide variable in non-interactive mode. Run the command with --environment flag.');
            }
        }
        return flags;
    }
}
_a = EnvironmentVariableUpdate;
EnvironmentVariableUpdate.description = 'update an environment variable on the current project or owner account';
EnvironmentVariableUpdate.hidden = true;
EnvironmentVariableUpdate.flags = {
    name: core_1.Flags.string({
        description: 'Name of the variable',
    }),
    value: core_1.Flags.string({
        description: 'Text value or the variable',
    }),
    ...flags_1.EASVariableVisibilityFlag,
    ...flags_1.EASVariableScopeFlag,
    ...flags_1.EASEnvironmentFlag,
    ...flags_1.EASNonInteractiveFlag,
};
EnvironmentVariableUpdate.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.Analytics,
    ..._a.ContextOptions.LoggedIn,
};
exports.default = EnvironmentVariableUpdate;
