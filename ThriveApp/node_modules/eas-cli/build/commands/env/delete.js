"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const generated_1 = require("../../graphql/generated");
const EnvironmentVariableMutation_1 = require("../../graphql/mutations/EnvironmentVariableMutation");
const EnvironmentVariablesQuery_1 = require("../../graphql/queries/EnvironmentVariablesQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const prompts_1 = require("../../prompts");
const prompts_2 = require("../../utils/prompts");
class EnvironmentVariableDelete extends EasCommand_1.default {
    async runAsync() {
        const { flags } = await this.parse(_a);
        let { name, environment, 'non-interactive': nonInteractive, scope } = this.validateFlags(flags);
        const { privateProjectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(_a, {
            nonInteractive,
        });
        if (scope === generated_1.EnvironmentVariableScope.Project) {
            if (!environment) {
                environment = await (0, prompts_2.promptVariableEnvironmentAsync)(nonInteractive);
            }
        }
        const variables = scope === generated_1.EnvironmentVariableScope.Project && environment
            ? await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.byAppIdAsync(graphqlClient, {
                appId: projectId,
                environment,
            })
            : await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.sharedAsync(graphqlClient, { appId: projectId });
        if (!name) {
            ({ name } = await (0, prompts_1.promptAsync)({
                type: 'select',
                name: 'name',
                message: 'Pick the variable to be deleted:',
                choices: variables
                    .filter(({ scope: variableScope }) => scope === variableScope)
                    .map(variable => ({
                    title: variable.name,
                    value: variable.name,
                })),
            }));
            if (!name) {
                throw new Error(`Environment variable wasn't selected. Run the command again and select existing variable or run it with ${chalk_1.default.bold('--name VARIABLE_NAME')} flag to fix the issue.`);
            }
        }
        const selectedVariable = variables.find(variable => variable.name === name);
        if (!selectedVariable) {
            throw new Error(`Variable "${name}" not found.`);
        }
        if (!nonInteractive) {
            log_1.default.addNewLineIfNone();
            log_1.default.warn(`You are about to permanently delete variable ${selectedVariable.name}.`);
            log_1.default.warn('This action is irreversible.');
            log_1.default.newLine();
            const confirmed = await (0, prompts_1.toggleConfirmAsync)({
                message: `Are you sure you wish to proceed?${selectedVariable.scope === generated_1.EnvironmentVariableScope.Shared
                    ? ' This variable is applied across your whole account and may affect multiple apps.'
                    : ''}`,
            });
            if (!confirmed) {
                log_1.default.error(`Canceled deletion of variable ${selectedVariable.name}.`);
                throw new Error(`Variable "${name}" not deleted.`);
            }
        }
        await EnvironmentVariableMutation_1.EnvironmentVariableMutation.deleteAsync(graphqlClient, selectedVariable.id);
        log_1.default.withTick(`Ô∏èDeleted variable ${selectedVariable.name}".`);
    }
    validateFlags(flags) {
        if (flags['non-interactive']) {
            if (!flags.name) {
                throw new Error(`Environment variable needs 'name' to be specified when running in non-interactive mode. Run the command with ${chalk_1.default.bold('--name VARIABLE_NAME')} flag to fix the issue`);
            }
        }
        return flags;
    }
}
_a = EnvironmentVariableDelete;
EnvironmentVariableDelete.description = 'delete an environment variable by name';
EnvironmentVariableDelete.hidden = true;
EnvironmentVariableDelete.flags = {
    name: core_1.Flags.string({
        description: 'Name of the variable to delete',
    }),
    ...flags_1.EASVariableScopeFlag,
    ...flags_1.EASEnvironmentFlag,
    ...flags_1.EASNonInteractiveFlag,
};
EnvironmentVariableDelete.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.LoggedIn,
};
exports.default = EnvironmentVariableDelete;
