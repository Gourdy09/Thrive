"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const generated_1 = require("../../graphql/generated");
const EnvironmentVariablesQuery_1 = require("../../graphql/queries/EnvironmentVariablesQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const formatVariable_1 = require("../../utils/formatVariable");
const prompts_1 = require("../../utils/prompts");
class EnvironmentVariableGet extends EasCommand_1.default {
    async runAsync() {
        const { flags } = await this.parse(_a);
        let { environment, name, 'non-interactive': nonInteractive, format, scope, } = this.validateFlags(flags);
        const { privateProjectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(_a, {
            nonInteractive,
        });
        if (!name) {
            name = await (0, prompts_1.promptVariableNameAsync)(nonInteractive);
        }
        if (!environment && scope === generated_1.EnvironmentVariableScope.Project) {
            environment = await (0, prompts_1.promptVariableEnvironmentAsync)(nonInteractive);
        }
        const variable = await getVariableAsync(graphqlClient, scope, projectId, name, environment);
        if (!variable) {
            log_1.default.error(`Variable with name "${name}" not found`);
            return;
        }
        if (!variable.value) {
            throw new Error(`${chalk_1.default.bold(variable.name)} is a secret variable and cannot be displayed once it has been created.`);
        }
        if (format === 'short') {
            log_1.default.log(`${chalk_1.default.bold(variable.name)}=${variable.value}`);
        }
        else {
            log_1.default.log((0, formatVariable_1.formatVariable)(variable));
        }
    }
    validateFlags(flags) {
        if (flags.environment && flags.scope === generated_1.EnvironmentVariableScope.Shared) {
            throw new Error(`Unexpected argument: --environment can only be used with project variables`);
        }
        if (flags['non-interactive']) {
            if (!flags.name) {
                throw new Error('Variable name is required. Run the command with --name flag.');
            }
            if (!flags.scope) {
                throw new Error('Scope is required. Run the command with --scope flag.');
            }
            if (!flags.environment && flags.scope === generated_1.EnvironmentVariableScope.Project) {
                throw new Error('Environment is required.');
            }
        }
        return flags;
    }
}
_a = EnvironmentVariableGet;
EnvironmentVariableGet.description = 'get environment variable';
EnvironmentVariableGet.hidden = true;
EnvironmentVariableGet.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.LoggedIn,
};
EnvironmentVariableGet.flags = {
    name: core_1.Flags.string({
        description: 'Name of the variable',
    }),
    ...flags_1.EASVariableFormatFlag,
    ...flags_1.EASVariableScopeFlag,
    ...flags_1.EASNonInteractiveFlag,
    ...flags_1.EASEnvironmentFlag,
};
exports.default = EnvironmentVariableGet;
async function getVariableAsync(graphqlClient, scope, projectId, name, environment) {
    if (!environment && scope === generated_1.EnvironmentVariableScope.Project) {
        throw new Error('Environment is required.');
    }
    if (!name) {
        throw new Error("Variable name is required. Run the command with '--name VARIABLE_NAME' flag.");
    }
    if (environment && scope === generated_1.EnvironmentVariableScope.Project) {
        const appVariables = await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.byAppIdWithSensitiveAsync(graphqlClient, {
            appId: projectId,
            environment,
            filterNames: [name],
        });
        return appVariables[0];
    }
    if (scope === generated_1.EnvironmentVariableScope.Shared) {
        const sharedVariables = await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.sharedWithSensitiveAsync(graphqlClient, {
            appId: projectId,
            filterNames: [name],
        });
        return sharedVariables[0];
    }
    return null;
}
