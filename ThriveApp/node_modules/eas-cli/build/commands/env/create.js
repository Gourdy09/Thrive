"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const generated_1 = require("../../graphql/generated");
const EnvironmentVariableMutation_1 = require("../../graphql/mutations/EnvironmentVariableMutation");
const EnvironmentVariablesQuery_1 = require("../../graphql/queries/EnvironmentVariablesQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const prompts_2 = require("../../utils/prompts");
class EnvironmentVariableCreate extends EasCommand_1.default {
    async runAsync() {
        const { flags } = await this.parse(_a);
        let { name, value, scope, 'non-interactive': nonInteractive, environment, visibility, link, force, } = this.validateFlags(flags);
        const { privateProjectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(_a, {
            nonInteractive,
        });
        const [projectDisplayName, ownerAccount] = await Promise.all([
            (0, projectUtils_1.getDisplayNameForProjectIdAsync)(graphqlClient, projectId),
            (0, projectUtils_1.getOwnerAccountForProjectIdAsync)(graphqlClient, projectId),
        ]);
        if (!name) {
            name = await (0, prompts_2.promptVariableNameAsync)(nonInteractive);
        }
        let overwrite = false;
        visibility = visibility ?? generated_1.EnvironmentVariableVisibility.Public;
        if (!value) {
            value = await (0, prompts_2.promptVariableValueAsync)({
                nonInteractive,
                hidden: visibility !== generated_1.EnvironmentVariableVisibility.Public,
            });
        }
        if (scope === generated_1.EnvironmentVariableScope.Project) {
            if (!environment) {
                environment = await (0, prompts_2.promptVariableEnvironmentAsync)(nonInteractive);
            }
            const existingVariables = await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.byAppIdAsync(graphqlClient, {
                appId: projectId,
                environment,
            });
            const existingVariable = existingVariables.find(variable => variable.name === name);
            if (existingVariable) {
                if (existingVariable.scope === generated_1.EnvironmentVariableScope.Shared) {
                    if (!nonInteractive) {
                        const confirmation = await (0, prompts_1.confirmAsync)({
                            message: `Shared variable ${name} already exists on this project. Do you want to unlink it first?`,
                        });
                        if (!confirmation) {
                            log_1.default.log('Aborting');
                            throw new Error(`Shared variable ${name} already exists on this project.`);
                        }
                    }
                    else if (!force) {
                        throw new Error(`Shared variable ${name} already exists on this project. Use --force to overwrite it.`);
                    }
                    await EnvironmentVariableMutation_1.EnvironmentVariableMutation.unlinkSharedEnvironmentVariableAsync(graphqlClient, existingVariable.id, projectId, environment);
                    log_1.default.withTick(`Unlinking shared variable ${chalk_1.default.bold(name)} on project ${chalk_1.default.bold(projectDisplayName)}.`);
                }
                else {
                    if (!nonInteractive) {
                        const confirmation = await (0, prompts_1.confirmAsync)({
                            message: `Variable ${name} already exists on this project. Do you want to overwrite it?`,
                        });
                        if (!confirmation) {
                            log_1.default.log('Aborting');
                            throw new Error(`Variable ${name} already exists on this project.  Use --force to overwrite it.`);
                        }
                    }
                    else if (!force) {
                        throw new Error(`Variable ${name} already exists on this project. Use --force to overwrite it.`);
                    }
                    overwrite = true;
                }
            }
            const variable = await EnvironmentVariableMutation_1.EnvironmentVariableMutation.createForAppAsync(graphqlClient, {
                name,
                value,
                environment,
                visibility,
                overwrite,
            }, projectId);
            if (!variable) {
                throw new Error(`Could not create variable with name ${name} on project ${projectDisplayName}`);
            }
            log_1.default.withTick(`Created a new variable ${chalk_1.default.bold(name)} on project ${chalk_1.default.bold(projectDisplayName)}.`);
        }
        else if (scope === generated_1.EnvironmentVariableScope.Shared) {
            const sharedVariables = await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.sharedAsync(graphqlClient, {
                appId: projectId,
            });
            const existingVariable = sharedVariables.find(variable => variable.name === name);
            if (existingVariable) {
                throw new Error(`Shared variable with ${name} name already exists on this account.\n` +
                    `Use a different name or delete the existing variable  on website or by using eas env:delete --name ${name} --scope shared command.`);
            }
            if (environment && !link) {
                const confirmation = await (0, prompts_1.confirmAsync)({
                    message: `Unexpected argument: --environment can only be used with --link flag. Do you want to link the variable to the current project?`,
                });
                if (!confirmation) {
                    log_1.default.log('Aborting');
                    throw new Error('Unexpected argument: --environment can only be used with --link flag.');
                }
            }
            if (!environment && link) {
                environment = await (0, prompts_2.promptVariableEnvironmentAsync)(nonInteractive);
            }
            const variable = await EnvironmentVariableMutation_1.EnvironmentVariableMutation.createSharedVariableAsync(graphqlClient, {
                name,
                value,
                visibility,
            }, ownerAccount.id);
            if (!variable) {
                throw new Error(`Could not create variable with name ${name} on account ${ownerAccount.name}`);
            }
            log_1.default.withTick(`Created a new variable ${chalk_1.default.bold(name)} on account ${chalk_1.default.bold(ownerAccount.name)}.`);
            if (link && environment) {
                log_1.default.withTick(`Linking shared variable ${chalk_1.default.bold(name)} to project ${chalk_1.default.bold(projectDisplayName)}.`);
                await EnvironmentVariableMutation_1.EnvironmentVariableMutation.linkSharedEnvironmentVariableAsync(graphqlClient, variable.id, projectId, environment);
                log_1.default.withTick(`Linked shared variable ${chalk_1.default.bold(name)} to project ${chalk_1.default.bold(projectDisplayName)}.`);
            }
        }
    }
    validateFlags(flags) {
        if (flags.scope !== generated_1.EnvironmentVariableScope.Shared && flags.link) {
            throw new Error(`Unexpected argument: --link can only be used when creating  shared variables`);
        }
        if (flags.scope === generated_1.EnvironmentVariableScope.Shared &&
            flags.environment &&
            !flags.link &&
            flags['non-interactive']) {
            throw new Error('Unexpected argument: --environment in non-interactive mode can only be used with --link flag.');
        }
        return flags;
    }
}
_a = EnvironmentVariableCreate;
EnvironmentVariableCreate.description = 'create an environment variable on the current project or owner account';
EnvironmentVariableCreate.hidden = true;
EnvironmentVariableCreate.flags = {
    name: core_1.Flags.string({
        description: 'Name of the variable',
    }),
    value: core_1.Flags.string({
        description: 'Text value or the variable',
    }),
    link: core_1.Flags.boolean({
        description: 'Link shared variable to the current project',
    }),
    force: core_1.Flags.boolean({
        description: 'Overwrite existing variable',
        default: false,
    }),
    ...flags_1.EASVariableVisibilityFlag,
    ...flags_1.EASVariableScopeFlag,
    ...flags_1.EASEnvironmentFlag,
    ...flags_1.EASNonInteractiveFlag,
};
EnvironmentVariableCreate.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.Analytics,
    ..._a.ContextOptions.LoggedIn,
};
exports.default = EnvironmentVariableCreate;
