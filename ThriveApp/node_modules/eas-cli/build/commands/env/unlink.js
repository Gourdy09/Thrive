"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const generated_1 = require("../../graphql/generated");
const EnvironmentVariableMutation_1 = require("../../graphql/mutations/EnvironmentVariableMutation");
const EnvironmentVariablesQuery_1 = require("../../graphql/queries/EnvironmentVariablesQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const prompts_1 = require("../../prompts");
const prompts_2 = require("../../utils/prompts");
class EnvironmentVariableUnlink extends EasCommand_1.default {
    async runAsync() {
        let { flags: { name, 'non-interactive': nonInteractive, environment }, } = await this.parse(_a);
        const { privateProjectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(_a, {
            nonInteractive,
        });
        if (!environment) {
            environment = await (0, prompts_2.promptVariableEnvironmentAsync)(nonInteractive);
        }
        const projectDisplayName = await (0, projectUtils_1.getDisplayNameForProjectIdAsync)(graphqlClient, projectId);
        const appVariables = await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.byAppIdAsync(graphqlClient, {
            appId: projectId,
            environment,
        });
        const linkedVariables = appVariables.filter(({ scope }) => scope === generated_1.EnvironmentVariableScope.Shared);
        if (linkedVariables.length === 0) {
            throw new Error(`There are no linked shared env variables for project ${projectDisplayName}`);
        }
        if (!name) {
            name = await (0, prompts_1.selectAsync)('Select shared variable to unlink', linkedVariables.map(variable => ({
                title: variable.name,
                value: variable.name,
            })));
        }
        const selectedVariable = linkedVariables.find(variable => variable.name === name);
        if (!selectedVariable) {
            throw new Error(`Shared variable ${name} doesn't exist`);
        }
        const unlinkedVariable = await EnvironmentVariableMutation_1.EnvironmentVariableMutation.unlinkSharedEnvironmentVariableAsync(graphqlClient, selectedVariable.id, projectId, environment);
        if (!unlinkedVariable) {
            throw new Error(`Could not unlink variable with name ${selectedVariable.name} from project ${projectDisplayName}`);
        }
        log_1.default.withTick(`Unlinked variable ${chalk_1.default.bold(unlinkedVariable.name)} from the project ${chalk_1.default.bold(projectDisplayName)}.`);
    }
}
_a = EnvironmentVariableUnlink;
EnvironmentVariableUnlink.description = 'unlink a shared environment variable to the current project';
EnvironmentVariableUnlink.hidden = true;
EnvironmentVariableUnlink.flags = {
    name: core_1.Flags.string({
        description: 'Name of the variable',
    }),
    ...flags_1.EASEnvironmentFlag,
    ...flags_1.EASNonInteractiveFlag,
};
EnvironmentVariableUnlink.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.LoggedIn,
};
exports.default = EnvironmentVariableUnlink;
