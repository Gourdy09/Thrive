"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const generated_1 = require("../../graphql/generated");
const EnvironmentVariablesQuery_1 = require("../../graphql/queries/EnvironmentVariablesQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const formatVariable_1 = require("../../utils/formatVariable");
const prompts_1 = require("../../utils/prompts");
class EnvironmentValueList extends EasCommand_1.default {
    async runAsync() {
        let { flags: { environment, format, scope, 'include-sensitive': includeSensitive }, } = await this.parse(_a);
        const { privateProjectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(_a, {
            nonInteractive: true,
        });
        if (scope === generated_1.EnvironmentVariableScope.Project && !environment) {
            environment = await (0, prompts_1.promptVariableEnvironmentAsync)(false);
        }
        const variables = await this.getVariablesForScopeAsync(graphqlClient, {
            scope,
            includingSensitive: includeSensitive,
            environment,
            projectId,
        });
        if (format === 'short') {
            for (const variable of variables) {
                // TODO: Add Learn more link
                log_1.default.log(`${chalk_1.default.bold(variable.name)}=${variable.value ??
                    "***** (This is a secret env variable that can only be accessed on EAS builder and can't be read in any UI. Learn more.)"}`);
            }
        }
        else {
            if (scope === generated_1.EnvironmentVariableScope.Shared) {
                log_1.default.log(chalk_1.default.bold('Shared variables for this account:'));
            }
            else {
                log_1.default.log(chalk_1.default.bold(`Variables for this project for environment ${environment}:`));
            }
            log_1.default.log(variables.map(variable => (0, formatVariable_1.formatVariable)(variable)).join(`\n\n${chalk_1.default.dim('———')}\n\n`));
        }
    }
    async getVariablesForScopeAsync(graphqlClient, { scope, includingSensitive, environment, projectId, }) {
        if (scope === generated_1.EnvironmentVariableScope.Project && environment) {
            if (includingSensitive) {
                return await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.byAppIdWithSensitiveAsync(graphqlClient, {
                    appId: projectId,
                    environment,
                });
            }
            return await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.byAppIdAsync(graphqlClient, {
                appId: projectId,
                environment,
            });
        }
        return includingSensitive
            ? await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.sharedWithSensitiveAsync(graphqlClient, {
                appId: projectId,
            })
            : await EnvironmentVariablesQuery_1.EnvironmentVariablesQuery.sharedAsync(graphqlClient, { appId: projectId });
    }
}
_a = EnvironmentValueList;
EnvironmentValueList.description = 'list environment variables for the current project';
EnvironmentValueList.hidden = true;
EnvironmentValueList.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.LoggedIn,
};
EnvironmentValueList.flags = {
    'include-sensitive': core_1.Flags.boolean({
        description: 'Display sensitive values in the output',
        default: false,
    }),
    ...flags_1.EASVariableFormatFlag,
    ...flags_1.EASVariableScopeFlag,
    ...flags_1.EASEnvironmentFlag,
};
exports.default = EnvironmentValueList;
