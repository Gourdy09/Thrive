"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const queries_1 = require("../../channel/queries");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const client_1 = require("../../graphql/client");
const ChannelQuery_1 = require("../../graphql/queries/ChannelQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const prompts_1 = require("../../prompts");
const json_1 = require("../../utils/json");
class ChannelDelete extends EasCommand_1.default {
    async runAsync() {
        const { args: { name: nameArg }, flags: { json: jsonFlag, 'non-interactive': nonInteractive }, } = await this.parse(_a);
        const { privateProjectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(_a, {
            nonInteractive,
        });
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        let channelId, channelName;
        if (nameArg) {
            const { id, name } = await ChannelQuery_1.ChannelQuery.viewUpdateChannelAsync(graphqlClient, {
                appId: projectId,
                channelName: nameArg,
            });
            channelId = id;
            channelName = name;
        }
        else {
            if (nonInteractive) {
                throw new Error('Channel name must be set when running in non-interactive mode');
            }
            const { id, name } = await (0, queries_1.selectChannelOnAppAsync)(graphqlClient, {
                projectId,
                selectionPromptTitle: 'Select a channel to delete',
                paginatedQueryOptions: {
                    json: jsonFlag,
                    nonInteractive,
                    offset: 0,
                },
            });
            channelId = id;
            channelName = name;
        }
        if (!nonInteractive) {
            log_1.default.addNewLineIfNone();
            log_1.default.warn(`You are about to permanently delete channel: "${channelName}".\nThis action is irreversible.`);
            log_1.default.newLine();
            const confirmed = await (0, prompts_1.toggleConfirmAsync)({ message: 'Are you sure you wish to proceed?' });
            if (!confirmed) {
                log_1.default.error(`Canceled deletion of channel: "${channelName}".`);
                process.exit(1);
            }
        }
        const deletionResult = await deleteChannelOnAppAsync(graphqlClient, {
            channelId,
        });
        if (jsonFlag) {
            (0, json_1.printJsonOnlyOutput)(deletionResult);
        }
        else {
            log_1.default.withTick(`Ô∏èDeleted channel "${channelName}".`);
        }
    }
}
_a = ChannelDelete;
ChannelDelete.hidden = true;
ChannelDelete.description = 'Delete a channel';
ChannelDelete.args = [
    {
        name: 'name',
        required: false,
        description: 'Name of the channel to delete',
    },
];
ChannelDelete.flags = {
    ...flags_1.EasNonInteractiveAndJsonFlags,
};
ChannelDelete.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.LoggedIn,
};
exports.default = ChannelDelete;
async function deleteChannelOnAppAsync(graphqlClient, { channelId }) {
    const data = await (0, client_1.withErrorHandlingAsync)(graphqlClient
        .mutation((0, graphql_tag_1.default) `
          mutation DeleteUpdateChannel($channelId: ID!) {
            updateChannel {
              deleteUpdateChannel(channelId: $channelId) {
                id
              }
            }
          }
        `, {
        channelId,
    })
        .toPromise());
    return data.updateChannel.deleteUpdateChannel;
}
