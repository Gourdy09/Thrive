"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const generated_1 = require("../../graphql/generated");
const WebhookQuery_1 = require("../../graphql/queries/WebhookQuery");
const log_1 = tslib_1.__importDefault(require("../../log"));
const ora_1 = require("../../ora");
const projectUtils_1 = require("../../project/projectUtils");
const json_1 = require("../../utils/json");
const formatWebhook_1 = require("../../webhooks/formatWebhook");
class WebhookList extends EasCommand_1.default {
    async runAsync() {
        const { flags: { event, json }, } = await this.parse(_a);
        if (json) {
            (0, json_1.enableJsonOutput)();
        }
        const { privateProjectConfig: { projectId }, loggedIn: { graphqlClient }, } = await this.getContextAsync(_a, {
            nonInteractive: true,
        });
        const projectDisplayName = await (0, projectUtils_1.getDisplayNameForProjectIdAsync)(graphqlClient, projectId);
        const spinner = (0, ora_1.ora)(`Fetching the list of webhook on project ${projectDisplayName}`).start();
        try {
            const webhooks = await WebhookQuery_1.WebhookQuery.byAppIdAsync(graphqlClient, projectId, event && { event });
            if (webhooks.length === 0) {
                spinner.fail(`There are no webhooks on project ${projectDisplayName}`);
            }
            else {
                spinner.succeed(`Found ${webhooks.length} webhooks on project ${projectDisplayName}`);
                if (json) {
                    (0, json_1.printJsonOnlyOutput)(webhooks);
                }
                else {
                    const list = webhooks
                        .map(webhook => (0, formatWebhook_1.formatWebhook)(webhook))
                        .join(`\n\n${chalk_1.default.dim('———')}\n\n`);
                    log_1.default.log(`\n${list}`);
                }
            }
        }
        catch (err) {
            spinner.fail(`Something went wrong and we couldn't fetch the webhook list for the project ${projectDisplayName}`);
            throw err;
        }
    }
}
_a = WebhookList;
WebhookList.description = 'list webhooks';
WebhookList.flags = {
    event: core_1.Flags.enum({
        description: 'Event type that triggers the webhook',
        options: [generated_1.WebhookType.Build, generated_1.WebhookType.Submit],
    }),
    ...flags_1.EasJsonOnlyFlag,
};
WebhookList.contextDefinition = {
    ..._a.ContextOptions.ProjectConfig,
    ..._a.ContextOptions.LoggedIn,
};
exports.default = WebhookList;
