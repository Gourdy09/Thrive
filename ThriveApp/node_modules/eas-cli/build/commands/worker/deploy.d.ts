import EasCommand from '../../commandUtils/EasCommand';
import { EnvironmentVariableEnvironment } from '../../graphql/generated';
export default class WorkerDeploy extends EasCommand {
    static description: string;
    static aliases: string[];
    static usage: string[];
    static hidden: boolean;
    static state: string;
    static flags: {
        json: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        'non-interactive': import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        prod: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
        alias: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        id: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        'export-dir': import("@oclif/core/lib/interfaces").OptionFlag<string>;
        environment: {
            description: string;
            name: string;
            char?: import("@oclif/core/lib/interfaces").AlphabetUppercase | import("@oclif/core/lib/interfaces").AlphabetLowercase | undefined;
            summary?: string | undefined;
            helpLabel?: string | undefined;
            helpGroup?: string | undefined;
            env?: string | undefined;
            hidden?: boolean | undefined;
            required?: boolean | undefined;
            dependsOn?: string[] | undefined;
            exclusive?: string[] | undefined;
            exactlyOne?: string[] | undefined;
            relationships?: import("@oclif/core/lib/interfaces/parser").Relationship[] | undefined;
            deprecated?: true | import("@oclif/core/lib/interfaces/parser").Deprecation | undefined;
            aliases?: string[] | undefined;
            deprecateAliases?: boolean | undefined;
            parse: import("@oclif/core/lib/interfaces/parser").FlagParser<EnvironmentVariableEnvironment | undefined, string, any>;
            type: "option";
            helpValue?: string | undefined;
            options?: string[] | undefined;
            multiple: false;
            defaultHelp?: import("@oclif/core/lib/interfaces/parser").DefaultHelp<EnvironmentVariableEnvironment | undefined, Record<string, unknown>>;
            input: string[];
            default?: import("@oclif/core/lib/interfaces").Default<EnvironmentVariableEnvironment | undefined, Record<string, unknown>>;
        } | {
            description: string;
            name: string;
            char?: import("@oclif/core/lib/interfaces").AlphabetUppercase | import("@oclif/core/lib/interfaces").AlphabetLowercase | undefined;
            summary?: string | undefined;
            helpLabel?: string | undefined;
            helpGroup?: string | undefined;
            env?: string | undefined;
            hidden?: boolean | undefined;
            required?: boolean | undefined;
            dependsOn?: string[] | undefined;
            exclusive?: string[] | undefined;
            exactlyOne?: string[] | undefined;
            relationships?: import("@oclif/core/lib/interfaces/parser").Relationship[] | undefined;
            deprecated?: true | import("@oclif/core/lib/interfaces/parser").Deprecation | undefined;
            aliases?: string[] | undefined;
            deprecateAliases?: boolean | undefined;
            parse: import("@oclif/core/lib/interfaces/parser").FlagParser<EnvironmentVariableEnvironment | undefined, string, any>;
            type: "option";
            helpValue?: string | undefined;
            options?: string[] | undefined;
            multiple: true;
            defaultHelp?: import("@oclif/core/lib/interfaces/parser").DefaultHelp<EnvironmentVariableEnvironment | undefined, Record<string, unknown>>;
            input: string[];
            default?: import("@oclif/core/lib/interfaces").Default<(EnvironmentVariableEnvironment | undefined)[] | undefined, Record<string, unknown>>;
        };
    };
    static contextDefinition: {
        loggedIn: import("../../commandUtils/context/LoggedInContextField").default;
        projectDir: import("../../commandUtils/context/ProjectDirContextField").default;
        getDynamicPublicProjectConfigAsync: import("../../commandUtils/context/DynamicProjectConfigContextField").DynamicPublicProjectConfigContextField;
        getDynamicPrivateProjectConfigAsync: import("../../commandUtils/context/DynamicProjectConfigContextField").DynamicPrivateProjectConfigContextField;
    };
    runAsync(): Promise<void>;
    private sanitizeFlags;
}
