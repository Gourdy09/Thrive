"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAppleWriter = exports.createAppleReader = exports.loadConfigAsync = exports.getStaticConfigFilePath = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const validate_1 = require("./validate");
const reader_1 = require("../apple/config/reader");
const writer_1 = require("../apple/config/writer");
const errors_1 = require("../errors");
/**
 * Resolve the dynamic config from the user.
 * It supports methods, async methods, or objects (json).
 */
async function resolveDynamicConfigAsync(configFile) {
    const userConfigOrFunction = await Promise.resolve(`${configFile}`).then(s => tslib_1.__importStar(require(s))).then(file => file.default ?? file);
    return typeof userConfigOrFunction === 'function'
        ? // eslint-disable-next-line @typescript-eslint/return-await
            await userConfigOrFunction()
        : userConfigOrFunction;
}
/**
 * Resolve the prefered store config file name from the submit profile.
 * This is relative to the project directory, and uses `store.config.json` by default.
 */
function resolveConfigFilePath(profile) {
    if ('metadataPath' in profile) {
        return profile.metadataPath ?? 'store.config.json';
    }
    return 'store.config.json';
}
/**
 * Get the static configuration file path, based on the metadata context.
 * This uses any custom name provided, but swaps out the extension for `.json`.
 */
function getStaticConfigFilePath({ projectDir, profile, }) {
    const configFile = path_1.default.join(projectDir, resolveConfigFilePath(profile));
    const configExtension = path_1.default.extname(configFile);
    return path_1.default.join(projectDir, `${path_1.default.basename(configFile, configExtension)}.json`);
}
exports.getStaticConfigFilePath = getStaticConfigFilePath;
/**
 * Load the store configuration from a metadata context.
 * This can load `.json` and `.js` config files, using `require`.
 * It throws MetadataValidationErrors when the file doesn't exist, or contains errors.
 * The user is prompted to try anyway when errors are found.
 */
async function loadConfigAsync({ projectDir, profile, skipValidation = false, }) {
    const configFile = path_1.default.join(projectDir, resolveConfigFilePath(profile));
    if (!(await fs_extra_1.default.pathExists(configFile))) {
        throw new errors_1.MetadataValidationError(`Metadata store config file not found: "${configFile}"`);
    }
    const configData = await resolveDynamicConfigAsync(configFile);
    if (!skipValidation) {
        const issues = (0, validate_1.validateConfig)(configData);
        if (issues.length > 0) {
            throw new errors_1.MetadataValidationError(`Metadata store config errors found`, issues);
        }
    }
    return configData;
}
exports.loadConfigAsync = loadConfigAsync;
/** Create a versioned deserializer to fetch App Store data from the store configuration. */
function createAppleReader(config) {
    (0, assert_1.default)(config.configVersion === 0, 'Unsupported store configuration version');
    (0, assert_1.default)(config.apple !== undefined, 'No apple configuration found');
    return new reader_1.AppleConfigReader(config.apple);
}
exports.createAppleReader = createAppleReader;
/** Create the serializer to write the App Store to the store configuration. */
function createAppleWriter() {
    return new writer_1.AppleConfigWriter();
}
exports.createAppleWriter = createAppleWriter;
