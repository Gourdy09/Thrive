"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppReviewDetailTask = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const log_1 = tslib_1.__importDefault(require("../../../log"));
const log_2 = require("../../utils/log");
const task_1 = require("../task");
/** Handle all contact, demo account, or instruction info that are required for the App Store review team. */
class AppReviewDetailTask extends task_1.AppleTask {
    constructor() {
        super(...arguments);
        this.name = () => 'app review detail';
    }
    async prepareAsync({ context }) {
        (0, assert_1.default)(context.version, `App version not initialized, can't download store review details`);
        context.reviewDetail = (await context.version.getAppStoreReviewDetailAsync()) ?? undefined;
    }
    async downloadAsync({ config, context }) {
        if (context.reviewDetail) {
            config.setReviewDetails(context.reviewDetail.attributes);
        }
    }
    async uploadAsync({ config, context }) {
        const reviewDetail = config.getReviewDetails();
        if (!reviewDetail) {
            log_1.default.log((0, chalk_1.default) `{dim - Skipped store review details, not configured}`);
            return;
        }
        (0, assert_1.default)(context.version, `App version not initialized, can't upload store review details`);
        const { versionString } = context.version.attributes;
        if (!context.reviewDetail) {
            // We can't set the demo required property when creating, omit it from the request
            const { demoAccountRequired, ...reviewDetailsToCreate } = reviewDetail;
            context.reviewDetail = await (0, log_2.logAsync)(() => context.version.createReviewDetailAsync(reviewDetailsToCreate), {
                pending: `Creating store review details for ${chalk_1.default.bold(versionString)}...`,
                success: `Created store review details for ${chalk_1.default.bold(versionString)}`,
                failure: `Failed creating store review details for ${chalk_1.default.bold(versionString)}`,
            });
        }
        context.reviewDetail = await (0, log_2.logAsync)(() => context.reviewDetail.updateAsync(reviewDetail), {
            pending: `Updating store review details for ${chalk_1.default.bold(versionString)}...`,
            success: `Updated store review details for ${chalk_1.default.bold(versionString)}`,
            failure: `Failed updating store review details for ${chalk_1.default.bold(versionString)}`,
        });
    }
}
exports.AppReviewDetailTask = AppReviewDetailTask;
