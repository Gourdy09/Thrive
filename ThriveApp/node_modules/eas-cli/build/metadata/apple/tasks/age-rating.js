"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgeRatingTask = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const log_1 = tslib_1.__importDefault(require("../../../log"));
const log_2 = require("../../utils/log");
const task_1 = require("../task");
class AgeRatingTask extends task_1.AppleTask {
    constructor() {
        super(...arguments);
        this.name = () => 'age rating declarations';
    }
    async prepareAsync({ context }) {
        (0, assert_1.default)(context.version, `App version information is not prepared, can't update age rating`);
        context.ageRating = (await context.version.getAgeRatingDeclarationAsync()) ?? undefined;
    }
    async downloadAsync({ config, context }) {
        if (context.ageRating) {
            config.setAgeRating(context.ageRating.attributes);
        }
    }
    async uploadAsync({ config, context }) {
        (0, assert_1.default)(context.ageRating, `Age rating not initialized, can't update age rating`);
        const ageRating = config.getAgeRating();
        if (!ageRating) {
            log_1.default.log((0, chalk_1.default) `{dim - Skipped age rating update, no advisory configured}`);
        }
        else {
            context.ageRating = await (0, log_2.logAsync)(() => context.ageRating.updateAsync(ageRating), {
                pending: 'Updating age rating declaration...',
                success: 'Updated age rating declaration',
                failure: 'Failed to update age rating declaration',
            });
        }
    }
}
exports.AgeRatingTask = AgeRatingTask;
